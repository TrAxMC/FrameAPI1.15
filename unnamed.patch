Index: pom.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- pom.xml	(date 1590262384828)
+++ pom.xml	(date 1590262384828)
@@ -0,0 +1,108 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project xmlns="http://maven.apache.org/POM/4.0.0"
+         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
+    <modelVersion>4.0.0</modelVersion>
+
+    <groupId>de.framedev</groupId>
+    <artifactId>FrameAPI1.15</artifactId>
+    <version>1.0-SNAPSHOT</version>
+    <packaging>jar</packaging>
+
+    <dependencies>
+        <dependency>
+            <groupId>org.spigotmc</groupId>
+            <artifactId>spigot-api</artifactId>
+            <version>1.15.2-R0.1-SNAPSHOT</version>
+            <scope>provided</scope>
+        </dependency>
+        <dependency>
+            <groupId>org.mongodb</groupId>
+            <artifactId>mongodb-driver-sync</artifactId>
+            <version>3.11.0</version>
+        </dependency>
+        <dependency>
+            <groupId>org.bukkit</groupId>
+            <artifactId>bukkit</artifactId>
+            <version>1.15.2-R0.1-SNAPSHOT</version>
+            <type>jar</type>
+            <scope>provided</scope>
+        </dependency>
+        <dependency>
+            <groupId>org.spigotmc</groupId>
+            <artifactId>spigot-api</artifactId>
+            <version>1.15.2-R0.1-SNAPSHOT</version>
+            <type>pom</type>
+        </dependency>
+        <dependency>
+            <groupId>org.projectlombok</groupId>
+            <artifactId>lombok</artifactId>
+            <version>1.16.6</version>
+            <scope>provided</scope>
+        </dependency>
+
+        <dependency>
+            <groupId>com.googlecode.json-simple</groupId>
+            <artifactId>json-simple</artifactId>
+            <version>1.1.1</version>
+            <scope>compile</scope>
+        </dependency>
+        <dependency>
+            <groupId>org.osgi</groupId>
+            <artifactId>org.osgi.core</artifactId>
+            <version>6.0.0</version>
+        </dependency>
+    </dependencies>
+    <properties>
+        <java.version>1.8</java.version>
+        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
+    </properties>
+
+    <build>
+        <plugins>
+            <plugin>
+                <groupId>org.apache.maven.plugins</groupId>
+                <artifactId>maven-compiler-plugin</artifactId>
+                <version>3.1</version>
+                <configuration>
+                    <source>1.8</source>
+                    <target>1.8</target>
+                </configuration>
+            </plugin>
+            <plugin>
+                <groupId>org.apache.maven.plugins</groupId>
+                <artifactId>maven-shade-plugin</artifactId>
+                <version>3.2.2</version>
+                <executions>
+                    <execution>
+                        <phase>package</phase>
+                        <goals>
+                            <goal>shade</goal>
+                        </goals>
+                        <configuration>
+                            <minimizeJar>true</minimizeJar>
+                        </configuration>
+                    </execution>
+                </executions>
+            </plugin>
+        </plugins>
+        <resources>
+            <resource>
+                <directory>src/main/resources</directory>
+                <filtering>true</filtering>
+            </resource>
+        </resources>
+    </build>
+
+
+    <repositories>
+        <repository>
+            <id>spigotmc-repo</id>
+            <url>https://hub.spigotmc.org/nexus/content/groups/public/</url>
+        </repository>
+        <repository>
+            <id>sonatype</id>
+            <url>https://oss.sonatype.org/content/groups/public/</url>
+        </repository>
+    </repositories>
+</project>
\ No newline at end of file
Index: .project
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .project	(date 1590167435782)
+++ .project	(date 1590167435782)
@@ -0,0 +1,23 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<projectDescription>
+	<name>FrameAPI1.15</name>
+	<comment></comment>
+	<projects>
+	</projects>
+	<buildSpec>
+		<buildCommand>
+			<name>org.eclipse.jdt.core.javabuilder</name>
+			<arguments>
+			</arguments>
+		</buildCommand>
+		<buildCommand>
+			<name>org.eclipse.m2e.core.maven2Builder</name>
+			<arguments>
+			</arguments>
+		</buildCommand>
+	</buildSpec>
+	<natures>
+		<nature>org.eclipse.jdt.core.javanature</nature>
+		<nature>org.eclipse.m2e.core.maven2Nature</nature>
+	</natures>
+</projectDescription>
Index: FrameAPI1.15.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- FrameAPI1.15.iml	(date 1591785739165)
+++ FrameAPI1.15.iml	(date 1591785739165)
@@ -0,0 +1,60 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<module org.jetbrains.idea.maven.project.MavenProjectsManager.isMavenModule="true" type="JAVA_MODULE" version="4">
+  <component name="EclipseModuleManager">
+    <libelement value="file:///home/darryl/Minecraft/Server 1.15.2/spigot-1.15.2.jar" />
+    <conelement value="org.eclipse.m2e.MAVEN2_CLASSPATH_CONTAINER" />
+    <src_description expected_position="0">
+      <src_folder value="file://$MODULE_DIR$/src/main/java" expected_position="0" />
+      <src_folder value="file://$MODULE_DIR$/src/main/resources" expected_position="1" />
+      <src_folder value="file://$MODULE_DIR$/src/test/java" expected_position="2" />
+    </src_description>
+  </component>
+  <component name="FacetManager">
+    <facet type="minecraft" name="Minecraft">
+      <configuration>
+        <autoDetectTypes>
+          <platformType>SPIGOT</platformType>
+        </autoDetectTypes>
+      </configuration>
+    </facet>
+  </component>
+  <component name="NewModuleRootManager" LANGUAGE_LEVEL="JDK_1_8">
+    <output url="file://$MODULE_DIR$/target/classes" />
+    <output-test url="file://$MODULE_DIR$/target/test-classes" />
+    <content url="file://$MODULE_DIR$">
+      <sourceFolder url="file://$MODULE_DIR$/src/main/java" isTestSource="false" />
+      <sourceFolder url="file://$MODULE_DIR$/src/main/resources" type="java-resource" />
+      <sourceFolder url="file://$MODULE_DIR$/src/test/java" isTestSource="true" />
+      <excludeFolder url="file://$MODULE_DIR$/target" />
+    </content>
+    <orderEntry type="sourceFolder" forTests="false" />
+    <orderEntry type="jdk" jdkName="JavaSE-1.8" jdkType="JavaSDK" />
+    <orderEntry type="library" name="org.eclipse.m2e.MAVEN2_CLASSPATH_CONTAINER" level="application" />
+    <orderEntry type="library" scope="PROVIDED" name="Maven: org.spigotmc:spigot-api:1.15.2-R0.1-SNAPSHOT" level="project" />
+    <orderEntry type="library" name="Maven: commons-lang:commons-lang:2.6" level="project" />
+    <orderEntry type="library" name="Maven: com.google.guava:guava:21.0" level="project" />
+    <orderEntry type="library" name="Maven: com.google.code.gson:gson:2.8.0" level="project" />
+    <orderEntry type="library" name="Maven: net.md-5:bungeecord-chat:1.15-SNAPSHOT" level="project" />
+    <orderEntry type="library" name="Maven: org.yaml:snakeyaml:1.25" level="project" />
+    <orderEntry type="library" name="Maven: org.mongodb:mongodb-driver-sync:3.11.0" level="project" />
+    <orderEntry type="library" name="Maven: org.mongodb:bson:3.11.0" level="project" />
+    <orderEntry type="library" name="Maven: org.mongodb:mongodb-driver-core:3.11.0" level="project" />
+    <orderEntry type="library" scope="PROVIDED" name="Maven: org.bukkit:bukkit:1.15.2-R0.1-SNAPSHOT" level="project" />
+    <orderEntry type="library" scope="PROVIDED" name="Maven: org.projectlombok:lombok:1.16.6" level="project" />
+    <orderEntry type="library" name="Maven: com.googlecode.json-simple:json-simple:1.1.1" level="project" />
+    <orderEntry type="library" name="Maven: junit:junit:4.10" level="project" />
+    <orderEntry type="library" name="Maven: org.hamcrest:hamcrest-core:1.1" level="project" />
+    <orderEntry type="library" name="Maven: org.osgi:org.osgi.core:6.0.0" level="project" />
+    <orderEntry type="module-library">
+      <library>
+        <CLASSES>
+          <root url="jar://$MODULE_DIR$/../../../Developer/FrameAPI Server 1.15/spigot-1.15.2.jar!/" />
+        </CLASSES>
+        <JAVADOC />
+        <SOURCES>
+          <root url="jar://$MODULE_DIR$/../../../Developer/FrameAPI Server 1.15/spigot-1.15.2.jar!/" />
+        </SOURCES>
+      </library>
+    </orderEntry>
+  </component>
+</module>
\ No newline at end of file
Index: .classpath
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .classpath	(date 1590167483645)
+++ .classpath	(date 1590167483645)
@@ -0,0 +1,34 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<classpath>
+	<classpathentry kind="src" output="target/classes" path="src/main/java">
+		<attributes>
+			<attribute name="optional" value="true"/>
+			<attribute name="maven.pomderived" value="true"/>
+		</attributes>
+	</classpathentry>
+	<classpathentry excluding="**" kind="src" output="target/classes" path="src/main/resources">
+		<attributes>
+			<attribute name="maven.pomderived" value="true"/>
+		</attributes>
+	</classpathentry>
+	<classpathentry kind="src" output="target/test-classes" path="src/test/java">
+		<attributes>
+			<attribute name="test" value="true"/>
+			<attribute name="optional" value="true"/>
+			<attribute name="maven.pomderived" value="true"/>
+		</attributes>
+	</classpathentry>
+	<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.8">
+		<attributes>
+			<attribute name="module" value="true"/>
+			<attribute name="maven.pomderived" value="true"/>
+		</attributes>
+	</classpathentry>
+	<classpathentry kind="con" path="org.eclipse.m2e.MAVEN2_CLASSPATH_CONTAINER">
+		<attributes>
+			<attribute name="maven.pomderived" value="true"/>
+		</attributes>
+	</classpathentry>
+	<classpathentry exported="true" kind="lib" path="/home/darryl/Minecraft/Server 1.15.2/spigot-1.15.2.jar"/>
+	<classpathentry kind="output" path="target/classes"/>
+</classpath>
Index: .idea/artifacts/FrameAPI.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/artifacts/FrameAPI.xml	(date 1592260259841)
+++ .idea/artifacts/FrameAPI.xml	(date 1592260259841)
@@ -0,0 +1,8 @@
+<component name="ArtifactManager">
+  <artifact type="jar" name="FrameAPI">
+    <output-path>$PROJECT_DIR$/../../../Developer/Plugins</output-path>
+    <root id="archive" name="FrameAPI.jar">
+      <element id="module-output" name="FrameAPI1.15" />
+    </root>
+  </artifact>
+</component>
\ No newline at end of file
Index: .idea/compiler.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/compiler.xml	(date 1591731385681)
+++ .idea/compiler.xml	(date 1591731385681)
@@ -0,0 +1,16 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="CompilerConfiguration">
+    <annotationProcessing>
+      <profile name="Maven default annotation processors profile" enabled="true">
+        <sourceOutputDir name="target/generated-sources/annotations" />
+        <sourceTestOutputDir name="target/generated-test-sources/test-annotations" />
+        <outputRelativeToContentRoot value="true" />
+        <module name="FrameAPI1.15" />
+      </profile>
+    </annotationProcessing>
+    <bytecodeTargetLevel>
+      <module name="FrameAPI1.15" target="1.8" />
+    </bytecodeTargetLevel>
+  </component>
+</project>
\ No newline at end of file
Index: .idea/jarRepositories.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/jarRepositories.xml	(date 1591731385897)
+++ .idea/jarRepositories.xml	(date 1591731385897)
@@ -0,0 +1,30 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="RemoteRepositoriesConfiguration">
+    <remote-repository>
+      <option name="id" value="central" />
+      <option name="name" value="Central Repository" />
+      <option name="url" value="https://repo.maven.apache.org/maven2" />
+    </remote-repository>
+    <remote-repository>
+      <option name="id" value="central" />
+      <option name="name" value="Maven Central repository" />
+      <option name="url" value="https://repo1.maven.org/maven2" />
+    </remote-repository>
+    <remote-repository>
+      <option name="id" value="spigotmc-repo" />
+      <option name="name" value="spigotmc-repo" />
+      <option name="url" value="https://hub.spigotmc.org/nexus/content/groups/public/" />
+    </remote-repository>
+    <remote-repository>
+      <option name="id" value="jboss.community" />
+      <option name="name" value="JBoss Community repository" />
+      <option name="url" value="https://repository.jboss.org/nexus/content/repositories/public/" />
+    </remote-repository>
+    <remote-repository>
+      <option name="id" value="sonatype" />
+      <option name="name" value="sonatype" />
+      <option name="url" value="https://oss.sonatype.org/content/groups/public/" />
+    </remote-repository>
+  </component>
+</project>
\ No newline at end of file
Index: .idea/encodings.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/encodings.xml	(date 1591731385859)
+++ .idea/encodings.xml	(date 1591731385859)
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="Encoding">
+    <file url="file://$PROJECT_DIR$/src/main/java" charset="UTF-8" />
+    <file url="file://$PROJECT_DIR$/src/main/resources" charset="UTF-8" />
+  </component>
+</project>
\ No newline at end of file
Index: .idea/libraries/Maven__com_google_code_gson_gson_2_8_0.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/libraries/Maven__com_google_code_gson_gson_2_8_0.xml	(date 1591731386042)
+++ .idea/libraries/Maven__com_google_code_gson_gson_2_8_0.xml	(date 1591731386042)
@@ -0,0 +1,13 @@
+<component name="libraryTable">
+  <library name="Maven: com.google.code.gson:gson:2.8.0">
+    <CLASSES>
+      <root url="jar://$MAVEN_REPOSITORY$/com/google/code/gson/gson/2.8.0/gson-2.8.0.jar!/" />
+    </CLASSES>
+    <JAVADOC>
+      <root url="jar://$MAVEN_REPOSITORY$/com/google/code/gson/gson/2.8.0/gson-2.8.0-javadoc.jar!/" />
+    </JAVADOC>
+    <SOURCES>
+      <root url="jar://$MAVEN_REPOSITORY$/com/google/code/gson/gson/2.8.0/gson-2.8.0-sources.jar!/" />
+    </SOURCES>
+  </library>
+</component>
\ No newline at end of file
Index: .idea/libraries/Maven__com_googlecode_json_simple_json_simple_1_1_1.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/libraries/Maven__com_googlecode_json_simple_json_simple_1_1_1.xml	(date 1591731386282)
+++ .idea/libraries/Maven__com_googlecode_json_simple_json_simple_1_1_1.xml	(date 1591731386282)
@@ -0,0 +1,13 @@
+<component name="libraryTable">
+  <library name="Maven: com.googlecode.json-simple:json-simple:1.1.1">
+    <CLASSES>
+      <root url="jar://$MAVEN_REPOSITORY$/com/googlecode/json-simple/json-simple/1.1.1/json-simple-1.1.1.jar!/" />
+    </CLASSES>
+    <JAVADOC>
+      <root url="jar://$MAVEN_REPOSITORY$/com/googlecode/json-simple/json-simple/1.1.1/json-simple-1.1.1-javadoc.jar!/" />
+    </JAVADOC>
+    <SOURCES>
+      <root url="jar://$MAVEN_REPOSITORY$/com/googlecode/json-simple/json-simple/1.1.1/json-simple-1.1.1-sources.jar!/" />
+    </SOURCES>
+  </library>
+</component>
\ No newline at end of file
Index: .idea/libraries/Maven__com_google_guava_guava_21_0.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/libraries/Maven__com_google_guava_guava_21_0.xml	(date 1591731386103)
+++ .idea/libraries/Maven__com_google_guava_guava_21_0.xml	(date 1591731386103)
@@ -0,0 +1,13 @@
+<component name="libraryTable">
+  <library name="Maven: com.google.guava:guava:21.0">
+    <CLASSES>
+      <root url="jar://$MAVEN_REPOSITORY$/com/google/guava/guava/21.0/guava-21.0.jar!/" />
+    </CLASSES>
+    <JAVADOC>
+      <root url="jar://$MAVEN_REPOSITORY$/com/google/guava/guava/21.0/guava-21.0-javadoc.jar!/" />
+    </JAVADOC>
+    <SOURCES>
+      <root url="jar://$MAVEN_REPOSITORY$/com/google/guava/guava/21.0/guava-21.0-sources.jar!/" />
+    </SOURCES>
+  </library>
+</component>
\ No newline at end of file
Index: .idea/libraries/Maven__junit_junit_4_10.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/libraries/Maven__junit_junit_4_10.xml	(date 1591731386462)
+++ .idea/libraries/Maven__junit_junit_4_10.xml	(date 1591731386462)
@@ -0,0 +1,13 @@
+<component name="libraryTable">
+  <library name="Maven: junit:junit:4.10">
+    <CLASSES>
+      <root url="jar://$MAVEN_REPOSITORY$/junit/junit/4.10/junit-4.10.jar!/" />
+    </CLASSES>
+    <JAVADOC>
+      <root url="jar://$MAVEN_REPOSITORY$/junit/junit/4.10/junit-4.10-javadoc.jar!/" />
+    </JAVADOC>
+    <SOURCES>
+      <root url="jar://$MAVEN_REPOSITORY$/junit/junit/4.10/junit-4.10-sources.jar!/" />
+    </SOURCES>
+  </library>
+</component>
\ No newline at end of file
Index: .idea/libraries/Maven__commons_lang_commons_lang_2_6.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/libraries/Maven__commons_lang_commons_lang_2_6.xml	(date 1591731386403)
+++ .idea/libraries/Maven__commons_lang_commons_lang_2_6.xml	(date 1591731386403)
@@ -0,0 +1,13 @@
+<component name="libraryTable">
+  <library name="Maven: commons-lang:commons-lang:2.6">
+    <CLASSES>
+      <root url="jar://$MAVEN_REPOSITORY$/commons-lang/commons-lang/2.6/commons-lang-2.6.jar!/" />
+    </CLASSES>
+    <JAVADOC>
+      <root url="jar://$MAVEN_REPOSITORY$/commons-lang/commons-lang/2.6/commons-lang-2.6-javadoc.jar!/" />
+    </JAVADOC>
+    <SOURCES>
+      <root url="jar://$MAVEN_REPOSITORY$/commons-lang/commons-lang/2.6/commons-lang-2.6-sources.jar!/" />
+    </SOURCES>
+  </library>
+</component>
\ No newline at end of file
Index: .idea/libraries/Maven__org_bukkit_bukkit_1_15_2_R0_1_SNAPSHOT.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/libraries/Maven__org_bukkit_bukkit_1_15_2_R0_1_SNAPSHOT.xml	(date 1591731386538)
+++ .idea/libraries/Maven__org_bukkit_bukkit_1_15_2_R0_1_SNAPSHOT.xml	(date 1591731386538)
@@ -0,0 +1,13 @@
+<component name="libraryTable">
+  <library name="Maven: org.bukkit:bukkit:1.15.2-R0.1-SNAPSHOT">
+    <CLASSES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/bukkit/bukkit/1.15.2-R0.1-SNAPSHOT/bukkit-1.15.2-R0.1-SNAPSHOT.jar!/" />
+    </CLASSES>
+    <JAVADOC>
+      <root url="jar://$MAVEN_REPOSITORY$/org/bukkit/bukkit/1.15.2-R0.1-SNAPSHOT/bukkit-1.15.2-R0.1-SNAPSHOT-javadoc.jar!/" />
+    </JAVADOC>
+    <SOURCES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/bukkit/bukkit/1.15.2-R0.1-SNAPSHOT/bukkit-1.15.2-R0.1-SNAPSHOT-sources.jar!/" />
+    </SOURCES>
+  </library>
+</component>
\ No newline at end of file
Index: .idea/libraries/Maven__net_md_5_bungeecord_chat_1_15_SNAPSHOT.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/libraries/Maven__net_md_5_bungeecord_chat_1_15_SNAPSHOT.xml	(date 1591731386507)
+++ .idea/libraries/Maven__net_md_5_bungeecord_chat_1_15_SNAPSHOT.xml	(date 1591731386507)
@@ -0,0 +1,13 @@
+<component name="libraryTable">
+  <library name="Maven: net.md-5:bungeecord-chat:1.15-SNAPSHOT">
+    <CLASSES>
+      <root url="jar://$MAVEN_REPOSITORY$/net/md-5/bungeecord-chat/1.15-SNAPSHOT/bungeecord-chat-1.15-20200526.094816-73.jar!/" />
+    </CLASSES>
+    <JAVADOC>
+      <root url="jar://$MAVEN_REPOSITORY$/net/md-5/bungeecord-chat/1.15-SNAPSHOT/bungeecord-chat-1.15-20200526.094816-73-javadoc.jar!/" />
+    </JAVADOC>
+    <SOURCES>
+      <root url="jar://$MAVEN_REPOSITORY$/net/md-5/bungeecord-chat/1.15-SNAPSHOT/bungeecord-chat-1.15-20200526.094816-73-sources.jar!/" />
+    </SOURCES>
+  </library>
+</component>
\ No newline at end of file
Index: .idea/libraries/Maven__org_mongodb_bson_3_11_0.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/libraries/Maven__org_mongodb_bson_3_11_0.xml	(date 1591731386985)
+++ .idea/libraries/Maven__org_mongodb_bson_3_11_0.xml	(date 1591731386985)
@@ -0,0 +1,13 @@
+<component name="libraryTable">
+  <library name="Maven: org.mongodb:bson:3.11.0">
+    <CLASSES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/mongodb/bson/3.11.0/bson-3.11.0.jar!/" />
+    </CLASSES>
+    <JAVADOC>
+      <root url="jar://$MAVEN_REPOSITORY$/org/mongodb/bson/3.11.0/bson-3.11.0-javadoc.jar!/" />
+    </JAVADOC>
+    <SOURCES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/mongodb/bson/3.11.0/bson-3.11.0-sources.jar!/" />
+    </SOURCES>
+  </library>
+</component>
\ No newline at end of file
Index: .idea/libraries/Maven__org_hamcrest_hamcrest_core_1_1.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/libraries/Maven__org_hamcrest_hamcrest_core_1_1.xml	(date 1591731386945)
+++ .idea/libraries/Maven__org_hamcrest_hamcrest_core_1_1.xml	(date 1591731386945)
@@ -0,0 +1,13 @@
+<component name="libraryTable">
+  <library name="Maven: org.hamcrest:hamcrest-core:1.1">
+    <CLASSES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/hamcrest/hamcrest-core/1.1/hamcrest-core-1.1.jar!/" />
+    </CLASSES>
+    <JAVADOC>
+      <root url="jar://$MAVEN_REPOSITORY$/org/hamcrest/hamcrest-core/1.1/hamcrest-core-1.1-javadoc.jar!/" />
+    </JAVADOC>
+    <SOURCES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/hamcrest/hamcrest-core/1.1/hamcrest-core-1.1-sources.jar!/" />
+    </SOURCES>
+  </library>
+</component>
\ No newline at end of file
Index: .idea/libraries/Maven__org_mongodb_mongodb_driver_sync_3_11_0.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/libraries/Maven__org_mongodb_mongodb_driver_sync_3_11_0.xml	(date 1591731387301)
+++ .idea/libraries/Maven__org_mongodb_mongodb_driver_sync_3_11_0.xml	(date 1591731387301)
@@ -0,0 +1,13 @@
+<component name="libraryTable">
+  <library name="Maven: org.mongodb:mongodb-driver-sync:3.11.0">
+    <CLASSES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/mongodb/mongodb-driver-sync/3.11.0/mongodb-driver-sync-3.11.0.jar!/" />
+    </CLASSES>
+    <JAVADOC>
+      <root url="jar://$MAVEN_REPOSITORY$/org/mongodb/mongodb-driver-sync/3.11.0/mongodb-driver-sync-3.11.0-javadoc.jar!/" />
+    </JAVADOC>
+    <SOURCES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/mongodb/mongodb-driver-sync/3.11.0/mongodb-driver-sync-3.11.0-sources.jar!/" />
+    </SOURCES>
+  </library>
+</component>
\ No newline at end of file
Index: .idea/libraries/Maven__org_mongodb_mongodb_driver_core_3_11_0.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/libraries/Maven__org_mongodb_mongodb_driver_core_3_11_0.xml	(date 1591731387207)
+++ .idea/libraries/Maven__org_mongodb_mongodb_driver_core_3_11_0.xml	(date 1591731387207)
@@ -0,0 +1,13 @@
+<component name="libraryTable">
+  <library name="Maven: org.mongodb:mongodb-driver-core:3.11.0">
+    <CLASSES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/mongodb/mongodb-driver-core/3.11.0/mongodb-driver-core-3.11.0.jar!/" />
+    </CLASSES>
+    <JAVADOC>
+      <root url="jar://$MAVEN_REPOSITORY$/org/mongodb/mongodb-driver-core/3.11.0/mongodb-driver-core-3.11.0-javadoc.jar!/" />
+    </JAVADOC>
+    <SOURCES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/mongodb/mongodb-driver-core/3.11.0/mongodb-driver-core-3.11.0-sources.jar!/" />
+    </SOURCES>
+  </library>
+</component>
\ No newline at end of file
Index: .idea/libraries/Maven__org_projectlombok_lombok_1_16_6.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/libraries/Maven__org_projectlombok_lombok_1_16_6.xml	(date 1591731387494)
+++ .idea/libraries/Maven__org_projectlombok_lombok_1_16_6.xml	(date 1591731387494)
@@ -0,0 +1,13 @@
+<component name="libraryTable">
+  <library name="Maven: org.projectlombok:lombok:1.16.6">
+    <CLASSES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/projectlombok/lombok/1.16.6/lombok-1.16.6.jar!/" />
+    </CLASSES>
+    <JAVADOC>
+      <root url="jar://$MAVEN_REPOSITORY$/org/projectlombok/lombok/1.16.6/lombok-1.16.6-javadoc.jar!/" />
+    </JAVADOC>
+    <SOURCES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/projectlombok/lombok/1.16.6/lombok-1.16.6-sources.jar!/" />
+    </SOURCES>
+  </library>
+</component>
\ No newline at end of file
Index: .idea/libraries/Maven__org_osgi_org_osgi_core_6_0_0.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/libraries/Maven__org_osgi_org_osgi_core_6_0_0.xml	(date 1591731387375)
+++ .idea/libraries/Maven__org_osgi_org_osgi_core_6_0_0.xml	(date 1591731387375)
@@ -0,0 +1,13 @@
+<component name="libraryTable">
+  <library name="Maven: org.osgi:org.osgi.core:6.0.0">
+    <CLASSES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/osgi/org.osgi.core/6.0.0/org.osgi.core-6.0.0.jar!/" />
+    </CLASSES>
+    <JAVADOC>
+      <root url="jar://$MAVEN_REPOSITORY$/org/osgi/org.osgi.core/6.0.0/org.osgi.core-6.0.0-javadoc.jar!/" />
+    </JAVADOC>
+    <SOURCES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/osgi/org.osgi.core/6.0.0/org.osgi.core-6.0.0-sources.jar!/" />
+    </SOURCES>
+  </library>
+</component>
\ No newline at end of file
Index: .idea/libraries/Maven__org_yaml_snakeyaml_1_25.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/libraries/Maven__org_yaml_snakeyaml_1_25.xml	(date 1591731387591)
+++ .idea/libraries/Maven__org_yaml_snakeyaml_1_25.xml	(date 1591731387591)
@@ -0,0 +1,13 @@
+<component name="libraryTable">
+  <library name="Maven: org.yaml:snakeyaml:1.25">
+    <CLASSES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/yaml/snakeyaml/1.25/snakeyaml-1.25.jar!/" />
+    </CLASSES>
+    <JAVADOC>
+      <root url="jar://$MAVEN_REPOSITORY$/org/yaml/snakeyaml/1.25/snakeyaml-1.25-javadoc.jar!/" />
+    </JAVADOC>
+    <SOURCES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/yaml/snakeyaml/1.25/snakeyaml-1.25-sources.jar!/" />
+    </SOURCES>
+  </library>
+</component>
\ No newline at end of file
Index: .idea/libraries/Maven__org_spigotmc_spigot_api_1_15_2_R0_1_SNAPSHOT.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/libraries/Maven__org_spigotmc_spigot_api_1_15_2_R0_1_SNAPSHOT.xml	(date 1591731387561)
+++ .idea/libraries/Maven__org_spigotmc_spigot_api_1_15_2_R0_1_SNAPSHOT.xml	(date 1591731387561)
@@ -0,0 +1,13 @@
+<component name="libraryTable">
+  <library name="Maven: org.spigotmc:spigot-api:1.15.2-R0.1-SNAPSHOT">
+    <CLASSES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/spigotmc/spigot-api/1.15.2-R0.1-SNAPSHOT/spigot-api-1.15.2-R0.1-20200606.093503-114.jar!/" />
+    </CLASSES>
+    <JAVADOC>
+      <root url="jar://$MAVEN_REPOSITORY$/org/spigotmc/spigot-api/1.15.2-R0.1-SNAPSHOT/spigot-api-1.15.2-R0.1-20200606.093503-114-javadoc.jar!/" />
+    </JAVADOC>
+    <SOURCES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/spigotmc/spigot-api/1.15.2-R0.1-SNAPSHOT/spigot-api-1.15.2-R0.1-20200606.093503-114-sources.jar!/" />
+    </SOURCES>
+  </library>
+</component>
\ No newline at end of file
Index: .idea/modules.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/modules.xml	(date 1591731333454)
+++ .idea/modules.xml	(date 1591731333454)
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ProjectModuleManager">
+    <modules>
+      <module fileurl="file://$PROJECT_DIR$/FrameAPI1.15.iml" filepath="$PROJECT_DIR$/FrameAPI1.15.iml" />
+    </modules>
+  </component>
+</project>
\ No newline at end of file
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/misc.xml	(date 1591731383483)
+++ .idea/misc.xml	(date 1591731383483)
@@ -0,0 +1,16 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="EntryPointsManager">
+    <list size="1">
+      <item index="0" class="java.lang.String" itemvalue="org.bukkit.event.EventHandler" />
+    </list>
+  </component>
+  <component name="MavenProjectsManager">
+    <option name="originalFiles">
+      <list>
+        <option value="$PROJECT_DIR$/pom.xml" />
+      </list>
+    </option>
+  </component>
+  <component name="ProjectRootManager" version="2" languageLevel="JDK_1_8" project-jdk-name="1.8" project-jdk-type="JavaSDK" />
+</project>
\ No newline at end of file
Index: bin/FrameAPI1.15.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- bin/FrameAPI1.15.iml	(date 1590068274149)
+++ bin/FrameAPI1.15.iml	(date 1590068274149)
@@ -0,0 +1,64 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<module org.jetbrains.idea.maven.project.MavenProjectsManager.isMavenModule="true" type="JAVA_MODULE" version="4">
+  <component name="FacetManager">
+    <facet type="minecraft" name="Minecraft">
+      <configuration>
+        <autoDetectTypes>
+          <platformType>SPIGOT</platformType>
+        </autoDetectTypes>
+      </configuration>
+    </facet>
+  </component>
+  <component name="McpModuleSettings">
+    <option name="srgType" value="SRG" />
+  </component>
+  <component name="NewModuleRootManager" LANGUAGE_LEVEL="JDK_1_8">
+    <output url="file://$MODULE_DIR$/target/classes" />
+    <output-test url="file://$MODULE_DIR$/target/test-classes" />
+    <content url="file://$MODULE_DIR$">
+      <sourceFolder url="file://$MODULE_DIR$/src/main/java" isTestSource="false" />
+      <sourceFolder url="file://$MODULE_DIR$/src/main/resources" type="java-resource" />
+      <sourceFolder url="file://$MODULE_DIR$/src/test/java" isTestSource="true" />
+      <excludeFolder url="file://$MODULE_DIR$/target" />
+    </content>
+    <orderEntry type="inheritedJdk" />
+    <orderEntry type="sourceFolder" forTests="false" />
+    <orderEntry type="module-library" exported="">
+      <library name="CraftBukkit">
+        <CLASSES />
+        <JAVADOC />
+        <SOURCES>
+          <root url="file://$MAVEN_REPOSITORY$/CraftBukkit/src/main/java" />
+          <root url="file://$MAVEN_REPOSITORY$/CraftBukkit/src/test/java" />
+        </SOURCES>
+      </library>
+    </orderEntry>
+    <orderEntry type="library" exported="" name="repository" level="project" />
+    <orderEntry type="library" scope="PROVIDED" name="Maven: org.spigotmc:spigot-api:1.15.2-R0.1-SNAPSHOT" level="project" />
+    <orderEntry type="library" name="Maven: commons-lang:commons-lang:2.6" level="project" />
+    <orderEntry type="library" name="Maven: com.google.guava:guava:21.0" level="project" />
+    <orderEntry type="library" name="Maven: com.google.code.gson:gson:2.8.0" level="project" />
+    <orderEntry type="library" name="Maven: net.md-5:bungeecord-chat:1.15-SNAPSHOT" level="project" />
+    <orderEntry type="library" name="Maven: org.yaml:snakeyaml:1.25" level="project" />
+    <orderEntry type="library" name="Maven: org.mongodb:mongodb-driver-sync:3.11.0" level="project" />
+    <orderEntry type="library" name="Maven: org.mongodb:bson:3.11.0" level="project" />
+    <orderEntry type="library" name="Maven: org.mongodb:mongodb-driver-core:3.11.0" level="project" />
+    <orderEntry type="library" scope="PROVIDED" name="Maven: org.bukkit:bukkit:1.15.2-R0.1-SNAPSHOT" level="project" />
+    <orderEntry type="library" scope="PROVIDED" name="Maven: org.projectlombok:lombok:1.16.6" level="project" />
+    <orderEntry type="library" name="Maven: com.googlecode.json-simple:json-simple:1.1.1" level="project" />
+    <orderEntry type="library" name="Maven: junit:junit:4.10" level="project" />
+    <orderEntry type="library" name="Maven: org.hamcrest:hamcrest-core:1.1" level="project" />
+    <orderEntry type="library" name="Maven: org.osgi:org.osgi.core:6.0.0" level="project" />
+    <orderEntry type="module-library">
+      <library>
+        <CLASSES>
+          <root url="jar://$MODULE_DIR$/../../../Developer/FrameAPI Server 1.15/spigot-1.15.2.jar!/" />
+        </CLASSES>
+        <JAVADOC />
+        <SOURCES>
+          <root url="jar://$MODULE_DIR$/../../../Developer/FrameAPI Server 1.15/spigot-1.15.2.jar!/" />
+        </SOURCES>
+      </library>
+    </orderEntry>
+  </component>
+</module>
\ No newline at end of file
Index: bin/pom.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- bin/pom.xml	(date 1583933955041)
+++ bin/pom.xml	(date 1583933955041)
@@ -0,0 +1,109 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project xmlns="http://maven.apache.org/POM/4.0.0"
+         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
+    <modelVersion>4.0.0</modelVersion>
+
+    <groupId>de.framedev</groupId>
+    <artifactId>FrameAPI1.15</artifactId>
+    <version>1.0-SNAPSHOT</version>
+    <packaging>jar</packaging>
+
+    <dependencies>
+        <dependency>
+            <groupId>org.spigotmc</groupId>
+            <artifactId>spigot-api</artifactId>
+            <version>1.15.2-R0.1-SNAPSHOT</version>
+            <scope>provided</scope>
+        </dependency>
+        <dependency>
+            <groupId>org.mongodb</groupId>
+            <artifactId>mongodb-driver-sync</artifactId>
+            <version>3.11.0</version>
+        </dependency>
+        <dependency>
+            <groupId>org.bukkit</groupId>
+            <artifactId>bukkit</artifactId>
+            <version>1.15.2-R0.1-SNAPSHOT</version>
+            <type>jar</type>
+            <scope>provided</scope>
+        </dependency>
+        <dependency>
+            <groupId>org.spigotmc</groupId>
+            <artifactId>spigot-api</artifactId>
+            <version>1.15.2-R0.1-SNAPSHOT</version>
+            <type>pom</type>
+        </dependency>
+        <dependency>
+            <groupId>org.projectlombok</groupId>
+            <artifactId>lombok</artifactId>
+            <version>1.16.6</version>
+            <scope>provided</scope>
+        </dependency>
+
+        <dependency>
+            <groupId>com.googlecode.json-simple</groupId>
+            <artifactId>json-simple</artifactId>
+            <version>1.1.1</version>
+            <scope>compile</scope>
+        </dependency>
+        <dependency>
+            <groupId>org.osgi</groupId>
+            <artifactId>org.osgi.core</artifactId>
+            <version>6.0.0</version>
+        </dependency>
+    </dependencies>
+    <properties>
+        <java.version>1.8</java.version>
+        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
+    </properties>
+
+    <build>
+        <plugins>
+            <plugin>
+                <groupId>org.apache.maven.plugins</groupId>
+                <artifactId>maven-compiler-plugin</artifactId>
+                <version>3.1</version>
+                <configuration>
+                    <source>1.8</source>
+                    <target>1.8</target>
+                </configuration>
+            </plugin>
+            <plugin>
+                <groupId>org.apache.maven.plugins</groupId>
+                <artifactId>maven-shade-plugin</artifactId>
+                <version>3.2.2</version>
+                <executions>
+                    <execution>
+                        <phase>package</phase>
+                        <goals>
+                            <goal>shade</goal>
+                        </goals>
+                        <configuration>
+                            <minimizeJar>true</minimizeJar>
+                        </configuration>
+                    </execution>
+                </executions>
+            </plugin>
+        </plugins>
+        <resources>
+            <resource>
+                <directory>src/main/resources</directory>
+                <filtering>true</filtering>
+            </resource>
+        </resources>
+    </build>
+
+
+    <repositories>
+        <repository>
+            <id>spigotmc-repo</id>
+            <url>https://hub.spigotmc.org/nexus/content/groups/public/</url>
+        </repository>
+        <repository>
+            <id>sonatype</id>
+            <url>https://oss.sonatype.org/content/groups/public/</url>
+        </repository>
+    </repositories>
+
+</project>
\ No newline at end of file
Index: bin/.project
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- bin/.project	(date 1590167435782)
+++ bin/.project	(date 1590167435782)
@@ -0,0 +1,23 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<projectDescription>
+	<name>FrameAPI1.15</name>
+	<comment></comment>
+	<projects>
+	</projects>
+	<buildSpec>
+		<buildCommand>
+			<name>org.eclipse.jdt.core.javabuilder</name>
+			<arguments>
+			</arguments>
+		</buildCommand>
+		<buildCommand>
+			<name>org.eclipse.m2e.core.maven2Builder</name>
+			<arguments>
+			</arguments>
+		</buildCommand>
+	</buildSpec>
+	<natures>
+		<nature>org.eclipse.jdt.core.javanature</nature>
+		<nature>org.eclipse.m2e.core.maven2Nature</nature>
+	</natures>
+</projectDescription>
Index: src/main/java/de/framedev/frameapi/mongodb/MongoManager.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/de/framedev/frameapi/mongodb/MongoManager.java	(date 1592504211269)
+++ src/main/java/de/framedev/frameapi/mongodb/MongoManager.java	(date 1592504211269)
@@ -0,0 +1,54 @@
+package de.framedev.frameapi.mongodb;
+
+import com.mongodb.MongoClientSettings;
+import com.mongodb.MongoCredential;
+import com.mongodb.ServerAddress;
+import com.mongodb.client.MongoClient;
+import com.mongodb.client.MongoClients;
+import com.mongodb.client.MongoDatabase;
+import org.bukkit.configuration.file.FileConfiguration;
+import org.bukkit.configuration.file.YamlConfiguration;
+
+import java.io.File;
+import java.util.Arrays;
+
+public class MongoManager {
+    File file = new File("plugins/MDBConnection/config.yml");
+    FileConfiguration cfg = (FileConfiguration) YamlConfiguration.loadConfiguration(this.file);
+    String databasestring = this.cfg.getString("MongoDB.Database");
+    String username = this.cfg.getString("MongoDB.User");
+    String password = this.cfg.getString("MongoDB.Password");
+    private String hostname = this.cfg.getString("MongoDB.Host");
+    private int port = this.cfg.getInt("MongoDB.Port");
+
+    private MongoClient client;
+
+    private MongoDatabase database;
+
+
+    public void connectLocalHost() {
+        this.client = MongoClients.create(
+                MongoClientSettings.builder()
+                        .applyToClusterSettings(builder -> builder.hosts(Arrays.asList(new ServerAddress(this.hostname, this.port)))).build());
+        this.database = this.client.getDatabase(this.databasestring);
+    }
+
+    public void connect() {
+        MongoCredential credential = MongoCredential.createCredential(this.username, this.databasestring, this.password.toCharArray());
+        this.client = MongoClients.create(
+                MongoClientSettings.builder()
+                        .credential(credential)
+                        .applyToClusterSettings(builder -> builder.hosts(Arrays.asList(new ServerAddress(this.hostname, this.port)))).build());
+        this.database = this.client.getDatabase(this.databasestring);
+    }
+
+
+    public MongoClient getClient() {
+        return this.client;
+    }
+
+    public MongoDatabase getDatabase() {
+        return this.database;
+    }
+}
+
Index: .idea/vcs.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/vcs.xml	(date 1592824859338)
+++ .idea/vcs.xml	(date 1592824859338)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="VcsDirectoryMappings">
+    <mapping directory="$PROJECT_DIR$" vcs="Git" />
+  </component>
+</project>
\ No newline at end of file
Index: target/classes/config.yml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- target/classes/config.yml	(date 1592260209894)
+++ target/classes/config.yml	(date 1592260209894)
@@ -0,0 +1,165 @@
+##This Config.yml is in use by FrameAPI
+##Pls don't change things you don't now what thit it!
+##Copyrighted By FrameDev
+##Have fun and don't make Config.yml Broken :D
+#
+#===============================
+#=          FrameDev           =
+#===============================
+
+##Use MYSQL
+MYSQL:
+  Host: ' '
+  User: ' '
+  Password: ' '
+  Database: ' '
+  Port: '3306'
+  Boolean: false
+
+BungeeCord: false
+
+# Save EnderChest in MYSQL
+SaveMYSQLEnderChest: false
+
+EnderChestStartKit: false
+
+# This is for the Command openinv
+SaveInventoryMYSQL: false
+
+# Would you save Players Inventory in MYSQL
+SavePlayersInventory: false
+
+# This is for the Command openinvnumber (number)
+# the groups under SaveInventoryMultiple is for the permission and how many
+SaveInventoryMultiple:
+  default: 4
+  premium: 6
+  moderator: 8
+  master: 10
+  owner: 100
+
+
+##Get the Boolean for first Join Money
+StartMoney: false
+
+##Change the Money on first Join
+StartBudget: 1000
+
+##Change the Text when the Plugin is loading
+##Would you like to have the Message when yes true else false :D
+MessageOfReload:
+  Text: '&aHello &b[Player]'
+  Boolean: false
+
+##Every Night change it to day false = natural Day-Night circle
+NoNight: false
+
+##The First Money.Time is wich TimeStamp you get you'r Money the second/ Amount is your Amount to get the Money
+##Boolean is would you like to get the Money
+##20 = 1 Sec
+##Use this for the Time when you earn the Money from The FrameAPI
+##cmds == Money Commands to get Money or show Money!
+##MSG == Are the messages for the Money Commands!
+
+Money:
+  Time: 500
+  Amount: 100
+  Boolean: false
+  CMDS: false
+  MSG:
+    Balance: '&aYour money is &b[Money]'
+    Pay: '&aYou gave &b[Target] &b[Money]'
+    Set: '&aYour money has been set to &b[Money]'
+MoneyBalance:
+  Other:
+    MSG: '&aThe money from &b[Target] &ais &b[Money]'
+MoneySet:
+  Other:
+    MSG: '&aThe money from &b[Target] &ahas been set to &b[Money]'
+
+# Remove Money when Player is Dead
+RemoveMoneyDeath:
+  boolean: false
+  amount: 1000.0
+##Would like you to use the Teleporter Invenotry�
+Teleporter:
+  Inventory: false
+
+##Set Time in World
+##With the Methode setTimeMessage
+SetTime:
+  Message: false
+  Text: '&aTime set to &b[Time]'
+
+##Teleport to old Location can be disable
+OldLoc:
+  Teleport: false
+# What you would to use
+Util:
+#  - Money
+#  - Energy
+#  - Bank
+#Signs to use
+#Remove #in front of the Signs with you would to use
+Signs:
+#  - Money
+#  - Warp
+##MoneySigns Text Can be Changed
+MoneySign:
+  Balance: '&b[Bank Balance]'
+  Buy: '&aBuy'
+  Sell: '&aSell'
+  Free: '&aFree'
+
+##Use Denied Words in Chat with /denied add or / denied remove 
+Chat:
+  Denied: false
+
+
+##Would you like to use /setwarp or /warp?
+##/setwarp (warpname) / warp (warpname)
+Use:
+  Warps: false
+
+# Your MOTD, Server Name in Server Browser
+Motd:
+  Name: '&bFrameAPIMOTD Change this in &cConfig.yml'
+  Boolean: false
+
+# Prefix Change
+Prefix: '&6[&bFrame&9API&6]&f'
+#No Permission Text Don't use (')
+NoPerm: '&cYou don"t have access to this Command'
+
+# Would you have an Different JoinMessage or not in Messages.yml can you change the Text
+Join:
+  Message:
+    Boolean: true
+
+# Would you have an Different QuitMessage or not in Messages.yml can you change the Text
+
+Leave:
+  Message:
+    Boolean: true
+
+OfflinePlayers:
+  Money:
+    Boolean: false
+    Amount: 25
+    Time: 300
+
+# Rightclick to a Player to set it as Passenger to you
+SetPlayerPassenger: false
+
+
+# Set the Language Only en_EN or de_DE // en_EN = english // de_DE = german // en_EN is the Default language
+language: 'en_EN'
+
+AFK:
+  Time: 120
+  Boolean: false
+  IsAFK: '&7[Player] is now AFK'
+  IsNotAFK: '&7[Player] is no longer AFK'
+
+# Skip The Night when one Player Sleep
+SkipNight: false
Index: target/classes/kits.yml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- target/classes/kits.yml	(date 1592260210119)
+++ target/classes/kits.yml	(date 1592260210119)
@@ -0,0 +1,14 @@
+Items:
+  StarterKit:
+    - STONE_SWORD,1
+    - STONE_PICKAXE,1
+    - STONE_AXE,1
+    - STONE_SHOVEL,1
+    - TORCH,32
+    - LEATHER_LEGGINGS,1
+    - LEATHER_CHESTPLATE,1
+    - LEATHER_HELMET,1
+    - LEATHER_BOOTS,1
+    - APPLE,16
+  YourKit:
+    - MATERIAL,Amount
\ No newline at end of file
Index: bin/src/main/resources/messages.yml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- bin/src/main/resources/messages.yml	(date 1583258921376)
+++ bin/src/main/resources/messages.yml	(date 1583258921376)
@@ -0,0 +1,39 @@
+# Other Messages
+
+message:
+  TeleportBack: '&aYou has been Teleportet to your &cDeathLocation'
+  NoLocation: '&4No Location found!'
+  targetheal: '&aYou have been healed by &b[player]'
+  targethealplayer: '&aYou have been Healed &b[target]'
+  heal: '&aYou have been Healed'
+  notenabledback: '&c/back is not enabled in Config.yml'
+  notactivated: '&cthis Command is not Activated'
+  GamemodeChanged: '&aYour GameMode has been changed to &b[GameMode]'
+  GodModeChanged: '&aYour GodMode has been changed!'
+Startbudget:
+  Text:
+    Set: '&bStartBudget Sucessfuly set to [Money]'
+
+# Warp Messages
+Warp:
+  Warp: '&aYou were teleported to &b[warp]'
+  warpremoved: '&a[Prefix] &a[Warpname]&c was Removed!'
+  warpdoesntexist: '&4Doesnt Exists or was &cRemoved!'
+# PayLoad Text and True or False
+Payload:
+  Text: '&aYou got your reward &b[Money]'
+  Boolean: true
+
+# Change the Join Message
+JoinMessage: '&bWelcome &a[Player]'
+
+# Change the Leave Message
+LeaveMessage: '&bGoodbye &a[Player]'
+
+# Use to create a bill only works with MYSQL
+Bill:
+  Create: '&aYou have now put a bill to &b[Target]'
+  Get: '&aYou got an invoice from &b[Target] &aamounting to &b[Amount]'
+  Pay: '&bYou payed the Bill from &a[Target] &bin Amount of &a[Amount]'
+
+LoadedFirst: true
\ No newline at end of file
Index: bin/src/main/resources/config.yml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- bin/src/main/resources/config.yml	(date 1590067272657)
+++ bin/src/main/resources/config.yml	(date 1590067272657)
@@ -0,0 +1,157 @@
+##This Config.yml is in use by FrameAPI
+##Pls don't change things you don't now what thit it!
+##Copyrighted By FrameDev
+##Have fun and don't make Config.yml Broken :D
+#
+#===============================
+#=          FrameDev           =
+#===============================
+
+##Use MYSQL
+MYSQL:
+  Host: ' '
+  User: ' '
+  Password: ' '
+  Database: ' '
+  Port: '3306'
+  Boolean: false
+
+# Save EnderChest in MYSQL
+SaveMYSQLEnderChest: false
+
+# This is for the Command openinv
+SaveInventoryMYSQL: false
+
+# Would you save Players Inventory in MYSQL���
+SavePlayersInventory: false
+
+# This is for the Command openinvnumber (number)
+# de groups under SaveInventoryMultiple is for the permission and how many
+SaveInventoryMultiple:
+  default: 4
+  master: 10
+
+
+##Get the Boolean for first Join Money
+StartMoney: false
+
+##Change the Money on first Join
+StartBudget: 1000
+
+##Change the Text when the Plugin is loading
+##Would you like to have the Message when yes true else false :D
+MessageOfReload:
+  Text: '&aHello &b[Player]'
+  Boolean: false
+
+##Every Night change it to day false = natural Day-Night circle
+NoNight: false
+
+##The First Money.Time is wich TimeStamp you get you'r Money the second/ Amount is your Amount to get the Money
+##Boolean is would you like to get the Money
+##20 = 1 Sec
+##Use this for the Time when you earn the Money from The FrameAPI
+##cmds == Money Commands to get Money or show Money!
+##MSG == Are the messages for the Money Commands!
+
+Money:
+  Time: 500
+  Amount: 100
+  Boolean: false
+  CMDS: false
+  MSG:
+    Balance: '&aYour money is &b[Money]'
+    Pay: '&aYou gave &b[Target] &b[Money]'
+    Set: '&aYour money has been set to &b[Money]'
+MoneyBalance:
+  Other:
+    MSG: '&aThe money from &b[Target] &ais &b[Money]'
+MoneySet:
+  Other:
+    MSG: '&aThe money from &b[Target] &ahas been set to &b[Money]'
+
+# Remove Money when Player is Dead
+RemoveMoneyDeath:
+  boolean: false
+  amount: 1000.0
+##Would like you to use the Teleporter Invenotry�
+Teleporter:
+  Inventory: false
+
+##Set Time in World
+##With the Methode setTimeMessage
+SetTime:
+  Message: false
+  Text: '&aTime set to &b[Time]'
+
+##Teleport to old Location can be disable
+OldLoc:
+  Teleport: false
+# What you would to use
+Util:
+#  - Money
+#  - Energy
+#  - Bank
+#Signs to use
+#Remove #in front of the Signs with you would to use
+Signs:
+#  - Money
+#  - Warp
+##MoneySigns Text Can be Changed
+MoneySign:
+  Balance: '&b[Bank Balance]'
+  Buy: '&aBuy'
+  Sell: '&aSell'
+  Free: '&aFree'
+
+##Use Denied Words in Chat with /denied add or / denied remove 
+Chat:
+  Denied: false
+
+
+##Would you like to use /setwarp or /warp?
+##/setwarp (warpname) / warp (warpname)
+Use:
+  Warps: false
+
+# Your MOTD, Server Name in Server Browser
+Motd:
+  Name: '&bFrameAPIMOTD Change this in &cConfig.yml'
+  Boolean: false
+
+# Prefix Change
+Prefix: '&6[&bFrame&9API&6]&f'
+#No Permission Text Don't use (')
+NoPerm: '&cYou don"t have access to this Command'
+
+# Would you have an Different JoinMessage or not in Messages.yml can you change the Text
+Join:
+  Message:
+    Boolean: true
+
+# Would you have an Different QuitMessage or not in Messages.yml can you change the Text
+
+Leave:
+  Message:
+    Boolean: true
+
+OfflinePlayers:
+  Money:
+    Boolean: false
+    Amount: 25
+    Time: 300
+
+# Rightclick to a Player to set it as Passenger to you
+SetPlayerPassenger: false
+
+
+# Set the Language Only en_EN or de_DE // en_EN = english // de_DE = german // en_EN is the Default language
+language: 'en_EN'
+
+AFK:
+  Time: 120
+  Boolean: true
+  IsAFK: '&7[Player] is now AFK'
+  IsNotAFK: '&7[Player] is no longer AFK'
+
+SkipNight: true
Index: bin/src/main/resources/plugin.yml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- bin/src/main/resources/plugin.yml	(date 1590102734091)
+++ bin/src/main/resources/plugin.yml	(date 1590102734091)
@@ -0,0 +1,282 @@
+name: FrameAPI
+author: FrameDev
+version: 4.4.5
+api-version: 1.13
+description: FrameAPI this API add much things to your Minecraft!
+main: de.framedev.frameapi.main.Main
+load: STARTUP
+loadbefore:
+  - MDBConnection
+commands:
+  setwheat:
+  getwheat:
+  setcarrot:
+  getcarrot:
+  setpotato:
+  getpotato:
+  setsugarcane:
+  getsugarcane:
+  openinv:
+  openinvnumber:
+  enderchest:
+    aliases:
+      - ec
+  invsee:
+  vanish:
+    aliases:
+      - v
+  frameapi:
+    description: each Commands
+  lootchest:
+  trash:
+    description: Open an Trash Inventory
+  health:
+  gm:
+  spawnentity:
+  sets:
+  loader:
+  fly:
+  back:
+    description: Teleport to the DeathLocation when enabled
+  spawnmob:
+    description: Spawns a Mob
+  denied:
+    description: Set a Denied word in Config if this word was writing the Player will bi kicked
+  getitem:
+    description: Gives you an Item with ItemLore and displayname and Unbreakable
+  heal:
+    description: heal player
+  getenergy:
+  getmysql:
+  pos:
+  cleartps:
+  teleporter:
+    description: Open the Teleporter Inventory
+  addentity:
+  set:
+    description: set the Money from the Player
+    usage:
+      /set [player] [amount]
+  balance:
+    aliases: [bal]
+    description: shows your money
+  pay:
+    description: use to give a Player Money
+  setwarp:
+    description: set a Warp point
+  removewarp:
+    description: remove a Warp point
+  warp:
+    description: teleport to an Warp point
+  playerlistadd:
+  mute:
+  kits:
+  tps:
+    description: Show you the TPS
+  deposit:
+    description: Deposit Money in your Bank Account
+  withdraw:
+    description: getMoney from Bank
+  transfer:
+    description: Transfer Money to Player
+  bankbalance:
+    description: Show Bank Money
+  setbank:
+    description: setbank Money
+  msg:
+    description: write a message to Player
+  createpay:
+    description: Create a Bill
+  paythebill:
+    description: Pay the Bill
+  sethealth:
+  ultrahardcore:
+  adminenergy:
+  addenergy:
+  item:
+    aliases:
+      - i
+  balancetop:
+    aliases:
+      - baltop
+  backpack:
+  afk:
+    description: Provides AFK message when player types /afk.
+    usage: /<command>
+    aliases: [awayfromkeyboard, away, aafk]
+permissions:
+  frameapi.*:
+    description: Gives access to all FrameAPI commands
+    children:
+      frameapi.invsee: true
+      frameapi.config: true
+      frameapi.startbudget: true
+      frameapi.teleporter: true
+      frameapi.backtp: true
+      frameapi.spawnmob: true
+      frameapi.denied: true
+      frameapi.getitem: true
+      frameapi.mysql: true
+      frameapi.setwarp: true
+      frameapi.warp: true
+      frameapi.removewarp: true
+      frameapi.balance: true
+      frameapi.set: true
+      frameapi.signs: true
+      frameapi.heal: true
+      frameapi.bankbalance: true
+      frameapi.balance.other: false
+      frameapi.setbank.other: false
+      frameapi.set.other: false
+      frameapi.setbank: true
+      frameapi.transfer: true
+      frameapi.withdraw: true
+      frameapi.deposit: true
+      frameapi.tps: true
+      frameapi.msg: true
+      frameapi.help: true
+      frameapi.update: true
+      frameapi.energy: true
+      frameapi.chunkloader: true
+      frameapi.fly: true
+      frameapi.afk: true
+      frameapi.vanish: true
+      frameapi.saveinventory: true
+      frameapi.saveinventorynumber.multiple: true
+      frameapi.gamemode: true
+      frameapi.godmode: true
+      frameapi.trash: true
+      frameapi.balancetop: true
+      frameapi.enderchest: true
+      frameapi.enderchest.other: true
+      frameapi.backpack: true
+      frameapi.backpack.other: true
+  frameapi.backpack:
+    default: op
+  frameapi.backpack.other:
+    default: op
+    children:
+      frameapi.backpack: true
+  frameapi.balancetop:
+    default: op
+  frameapi.invsee:
+    default: op
+  frameapi.startbudget:
+    description: Allows you to use StartBudget Command
+    default: op
+  frameapi.teleporter:
+    description: Allows you to use Teleporter Inventory
+    default: op
+  frameapi.backtp:
+    description: Allows you to use back teleport
+    default: op
+  frameapi.spawnmob:
+    description: Allows you to use Spawn Mob
+    default: op
+  frameapi.denied:
+    description: Allows you to use Denied Cmd
+    default: op
+  frameapi.getitem:
+    description: Allows you to use GetItem CMD
+    default: op
+  frameapi.heal:
+    description: Allows you to use Heal CMD
+    default: op
+  frameapi.mysql:
+    description: Allow you to use Mysql Help CMD
+  frameapi.setwarp:
+    default: op
+    description: Allow you to set a Warp Point
+  frameapi.warp:
+    default: op
+    description: allow you to Teleport ya
+  frameapi.balance:
+    default: op
+    description: allow you to show our Money
+  frameapi.balance.other:
+    default: op
+    description: allow you to show another Players Money
+    children:
+      frameapi.balance: true
+  frameapi.enderchest:
+    default: op
+  frameapi.enderchest.other:
+    default: op
+    children:
+      frameapi.enderchest: true
+  frameapi.set:
+    default: op
+    description: allow you to set the Money from a Player
+  frameapi.set.other:
+    default: op
+    children:
+      frameapi.set: true
+  frameapi.signs:
+    default: op
+  frameapi.signs.use:
+    default: op
+    children:
+      frameapi.signs: true
+  frameapi.signs.create:
+    default: op
+    children:
+      frameapi.signs: true
+  frameapi.config:
+    default: op
+  frameapi.help:
+    default: op
+  frameapi.removewarp:
+    default: op
+  frameapi.bankbalance:
+    default: op
+  frameapi.bankbalance.other:
+    default: op
+    children:
+      frameapi.bankbalance: true
+  frameapi.setbank:
+    default: op
+  frameapi.setbank.other:
+    default: op
+    children:
+      frameapi.setbank: true
+  frameapi.transfer:
+    default: op
+  frameapi.withdraw:
+    default: op
+  frameapi.deposit:
+    default: op
+  frameapi.tps:
+    default: op
+  frameapi.update:
+    default: op
+  frameapi.msg:
+    default: op
+  frameapi.energy:
+    default: op
+  frameapi.chunkloader:
+    default: op
+  frameapi.fly:
+    default: op
+  frameapi.fly.other:
+    default: op
+    children:
+      frameapi.fly: true
+  frameapi.afk:
+    default: op
+  frameapi.vanish:
+    default: op
+  frameapi.saveinventory:
+    default: op
+  frameapi.saveinventorynumber.multiple:
+    default: op
+  frameapi.gamemode:
+    default: op
+  frameapi.gamemode.other:
+    default: op
+    children:
+      frameapi.gamemode: true
+  frameapi.godmode:
+    default: op
+  frameapi.trash:
+    default: op
+
Index: bin/src/main/resources/kits.yml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- bin/src/main/resources/kits.yml	(date 1583258921376)
+++ bin/src/main/resources/kits.yml	(date 1583258921376)
@@ -0,0 +1,14 @@
+Items:
+  StarterKit:
+    - STONE_SWORD,1
+    - STONE_PICKAXE,1
+    - STONE_AXE,1
+    - STONE_SHOVEL,1
+    - TORCH,32
+    - LEATHER_LEGGINGS,1
+    - LEATHER_CHESTPLATE,1
+    - LEATHER_HELMET,1
+    - LEATHER_BOOTS,1
+    - APPLE,16
+  YourKit:
+    - MATERIAL,Amount
\ No newline at end of file
Index: bin/target/classes/config.yml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- bin/target/classes/config.yml	(date 1590068222019)
+++ bin/target/classes/config.yml	(date 1590068222019)
@@ -0,0 +1,157 @@
+##This Config.yml is in use by FrameAPI
+##Pls don't change things you don't now what thit it!
+##Copyrighted By FrameDev
+##Have fun and don't make Config.yml Broken :D
+#
+#===============================
+#=          FrameDev           =
+#===============================
+
+##Use MYSQL
+MYSQL:
+  Host: ' '
+  User: ' '
+  Password: ' '
+  Database: ' '
+  Port: '3306'
+  Boolean: false
+
+# Save EnderChest in MYSQL
+SaveMYSQLEnderChest: false
+
+# This is for the Command openinv
+SaveInventoryMYSQL: false
+
+# Would you save Players Inventory in MYSQL���
+SavePlayersInventory: false
+
+# This is for the Command openinvnumber (number)
+# de groups under SaveInventoryMultiple is for the permission and how many
+SaveInventoryMultiple:
+  default: 4
+  master: 10
+
+
+##Get the Boolean for first Join Money
+StartMoney: false
+
+##Change the Money on first Join
+StartBudget: 1000
+
+##Change the Text when the Plugin is loading
+##Would you like to have the Message when yes true else false :D
+MessageOfReload:
+  Text: '&aHello &b[Player]'
+  Boolean: false
+
+##Every Night change it to day false = natural Day-Night circle
+NoNight: false
+
+##The First Money.Time is wich TimeStamp you get you'r Money the second/ Amount is your Amount to get the Money
+##Boolean is would you like to get the Money
+##20 = 1 Sec
+##Use this for the Time when you earn the Money from The FrameAPI
+##cmds == Money Commands to get Money or show Money!
+##MSG == Are the messages for the Money Commands!
+
+Money:
+  Time: 500
+  Amount: 100
+  Boolean: false
+  CMDS: false
+  MSG:
+    Balance: '&aYour money is &b[Money]'
+    Pay: '&aYou gave &b[Target] &b[Money]'
+    Set: '&aYour money has been set to &b[Money]'
+MoneyBalance:
+  Other:
+    MSG: '&aThe money from &b[Target] &ais &b[Money]'
+MoneySet:
+  Other:
+    MSG: '&aThe money from &b[Target] &ahas been set to &b[Money]'
+
+# Remove Money when Player is Dead
+RemoveMoneyDeath:
+  boolean: false
+  amount: 1000.0
+##Would like you to use the Teleporter Invenotry�
+Teleporter:
+  Inventory: false
+
+##Set Time in World
+##With the Methode setTimeMessage
+SetTime:
+  Message: false
+  Text: '&aTime set to &b[Time]'
+
+##Teleport to old Location can be disable
+OldLoc:
+  Teleport: false
+# What you would to use
+Util:
+#  - Money
+#  - Energy
+#  - Bank
+#Signs to use
+#Remove #in front of the Signs with you would to use
+Signs:
+#  - Money
+#  - Warp
+##MoneySigns Text Can be Changed
+MoneySign:
+  Balance: '&b[Bank Balance]'
+  Buy: '&aBuy'
+  Sell: '&aSell'
+  Free: '&aFree'
+
+##Use Denied Words in Chat with /denied add or / denied remove 
+Chat:
+  Denied: false
+
+
+##Would you like to use /setwarp or /warp?
+##/setwarp (warpname) / warp (warpname)
+Use:
+  Warps: false
+
+# Your MOTD, Server Name in Server Browser
+Motd:
+  Name: '&bFrameAPIMOTD Change this in &cConfig.yml'
+  Boolean: false
+
+# Prefix Change
+Prefix: '&6[&bFrame&9API&6]&f'
+#No Permission Text Don't use (')
+NoPerm: '&cYou don"t have access to this Command'
+
+# Would you have an Different JoinMessage or not in Messages.yml can you change the Text
+Join:
+  Message:
+    Boolean: true
+
+# Would you have an Different QuitMessage or not in Messages.yml can you change the Text
+
+Leave:
+  Message:
+    Boolean: true
+
+OfflinePlayers:
+  Money:
+    Boolean: false
+    Amount: 25
+    Time: 300
+
+# Rightclick to a Player to set it as Passenger to you
+SetPlayerPassenger: false
+
+
+# Set the Language Only en_EN or de_DE // en_EN = english // de_DE = german // en_EN is the Default language
+language: 'en_EN'
+
+AFK:
+  Time: 120
+  Boolean: true
+  IsAFK: '&7[Player] is now AFK'
+  IsNotAFK: '&7[Player] is no longer AFK'
+
+SkipNight: true
Index: bin/target/classes/kits.yml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- bin/target/classes/kits.yml	(date 1590068222133)
+++ bin/target/classes/kits.yml	(date 1590068222133)
@@ -0,0 +1,14 @@
+Items:
+  StarterKit:
+    - STONE_SWORD,1
+    - STONE_PICKAXE,1
+    - STONE_AXE,1
+    - STONE_SHOVEL,1
+    - TORCH,32
+    - LEATHER_LEGGINGS,1
+    - LEATHER_CHESTPLATE,1
+    - LEATHER_HELMET,1
+    - LEATHER_BOOTS,1
+    - APPLE,16
+  YourKit:
+    - MATERIAL,Amount
\ No newline at end of file
Index: bin/target/classes/plugin.yml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- bin/target/classes/plugin.yml	(date 1590102735215)
+++ bin/target/classes/plugin.yml	(date 1590102735215)
@@ -0,0 +1,282 @@
+name: FrameAPI
+author: FrameDev
+version: 4.4.5
+api-version: 1.13
+description: FrameAPI this API add much things to your Minecraft!
+main: de.framedev.frameapi.main.Main
+load: STARTUP
+loadbefore:
+  - MDBConnection
+commands:
+  setwheat:
+  getwheat:
+  setcarrot:
+  getcarrot:
+  setpotato:
+  getpotato:
+  setsugarcane:
+  getsugarcane:
+  openinv:
+  openinvnumber:
+  enderchest:
+    aliases:
+      - ec
+  invsee:
+  vanish:
+    aliases:
+      - v
+  frameapi:
+    description: each Commands
+  lootchest:
+  trash:
+    description: Open an Trash Inventory
+  health:
+  gm:
+  spawnentity:
+  sets:
+  loader:
+  fly:
+  back:
+    description: Teleport to the DeathLocation when enabled
+  spawnmob:
+    description: Spawns a Mob
+  denied:
+    description: Set a Denied word in Config if this word was writing the Player will bi kicked
+  getitem:
+    description: Gives you an Item with ItemLore and displayname and Unbreakable
+  heal:
+    description: heal player
+  getenergy:
+  getmysql:
+  pos:
+  cleartps:
+  teleporter:
+    description: Open the Teleporter Inventory
+  addentity:
+  set:
+    description: set the Money from the Player
+    usage:
+      /set [player] [amount]
+  balance:
+    aliases: [bal]
+    description: shows your money
+  pay:
+    description: use to give a Player Money
+  setwarp:
+    description: set a Warp point
+  removewarp:
+    description: remove a Warp point
+  warp:
+    description: teleport to an Warp point
+  playerlistadd:
+  mute:
+  kits:
+  tps:
+    description: Show you the TPS
+  deposit:
+    description: Deposit Money in your Bank Account
+  withdraw:
+    description: getMoney from Bank
+  transfer:
+    description: Transfer Money to Player
+  bankbalance:
+    description: Show Bank Money
+  setbank:
+    description: setbank Money
+  msg:
+    description: write a message to Player
+  createpay:
+    description: Create a Bill
+  paythebill:
+    description: Pay the Bill
+  sethealth:
+  ultrahardcore:
+  adminenergy:
+  addenergy:
+  item:
+    aliases:
+      - i
+  balancetop:
+    aliases:
+      - baltop
+  backpack:
+  afk:
+    description: Provides AFK message when player types /afk.
+    usage: /<command>
+    aliases: [awayfromkeyboard, away, aafk]
+permissions:
+  frameapi.*:
+    description: Gives access to all FrameAPI commands
+    children:
+      frameapi.invsee: true
+      frameapi.config: true
+      frameapi.startbudget: true
+      frameapi.teleporter: true
+      frameapi.backtp: true
+      frameapi.spawnmob: true
+      frameapi.denied: true
+      frameapi.getitem: true
+      frameapi.mysql: true
+      frameapi.setwarp: true
+      frameapi.warp: true
+      frameapi.removewarp: true
+      frameapi.balance: true
+      frameapi.set: true
+      frameapi.signs: true
+      frameapi.heal: true
+      frameapi.bankbalance: true
+      frameapi.balance.other: false
+      frameapi.setbank.other: false
+      frameapi.set.other: false
+      frameapi.setbank: true
+      frameapi.transfer: true
+      frameapi.withdraw: true
+      frameapi.deposit: true
+      frameapi.tps: true
+      frameapi.msg: true
+      frameapi.help: true
+      frameapi.update: true
+      frameapi.energy: true
+      frameapi.chunkloader: true
+      frameapi.fly: true
+      frameapi.afk: true
+      frameapi.vanish: true
+      frameapi.saveinventory: true
+      frameapi.saveinventorynumber.multiple: true
+      frameapi.gamemode: true
+      frameapi.godmode: true
+      frameapi.trash: true
+      frameapi.balancetop: true
+      frameapi.enderchest: true
+      frameapi.enderchest.other: true
+      frameapi.backpack: true
+      frameapi.backpack.other: true
+  frameapi.backpack:
+    default: op
+  frameapi.backpack.other:
+    default: op
+    children:
+      frameapi.backpack: true
+  frameapi.balancetop:
+    default: op
+  frameapi.invsee:
+    default: op
+  frameapi.startbudget:
+    description: Allows you to use StartBudget Command
+    default: op
+  frameapi.teleporter:
+    description: Allows you to use Teleporter Inventory
+    default: op
+  frameapi.backtp:
+    description: Allows you to use back teleport
+    default: op
+  frameapi.spawnmob:
+    description: Allows you to use Spawn Mob
+    default: op
+  frameapi.denied:
+    description: Allows you to use Denied Cmd
+    default: op
+  frameapi.getitem:
+    description: Allows you to use GetItem CMD
+    default: op
+  frameapi.heal:
+    description: Allows you to use Heal CMD
+    default: op
+  frameapi.mysql:
+    description: Allow you to use Mysql Help CMD
+  frameapi.setwarp:
+    default: op
+    description: Allow you to set a Warp Point
+  frameapi.warp:
+    default: op
+    description: allow you to Teleport ya
+  frameapi.balance:
+    default: op
+    description: allow you to show our Money
+  frameapi.balance.other:
+    default: op
+    description: allow you to show another Players Money
+    children:
+      frameapi.balance: true
+  frameapi.enderchest:
+    default: op
+  frameapi.enderchest.other:
+    default: op
+    children:
+      frameapi.enderchest: true
+  frameapi.set:
+    default: op
+    description: allow you to set the Money from a Player
+  frameapi.set.other:
+    default: op
+    children:
+      frameapi.set: true
+  frameapi.signs:
+    default: op
+  frameapi.signs.use:
+    default: op
+    children:
+      frameapi.signs: true
+  frameapi.signs.create:
+    default: op
+    children:
+      frameapi.signs: true
+  frameapi.config:
+    default: op
+  frameapi.help:
+    default: op
+  frameapi.removewarp:
+    default: op
+  frameapi.bankbalance:
+    default: op
+  frameapi.bankbalance.other:
+    default: op
+    children:
+      frameapi.bankbalance: true
+  frameapi.setbank:
+    default: op
+  frameapi.setbank.other:
+    default: op
+    children:
+      frameapi.setbank: true
+  frameapi.transfer:
+    default: op
+  frameapi.withdraw:
+    default: op
+  frameapi.deposit:
+    default: op
+  frameapi.tps:
+    default: op
+  frameapi.update:
+    default: op
+  frameapi.msg:
+    default: op
+  frameapi.energy:
+    default: op
+  frameapi.chunkloader:
+    default: op
+  frameapi.fly:
+    default: op
+  frameapi.fly.other:
+    default: op
+    children:
+      frameapi.fly: true
+  frameapi.afk:
+    default: op
+  frameapi.vanish:
+    default: op
+  frameapi.saveinventory:
+    default: op
+  frameapi.saveinventorynumber.multiple:
+    default: op
+  frameapi.gamemode:
+    default: op
+  frameapi.gamemode.other:
+    default: op
+    children:
+      frameapi.gamemode: true
+  frameapi.godmode:
+    default: op
+  frameapi.trash:
+    default: op
+
Index: bin/target/classes/messages.yml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- bin/target/classes/messages.yml	(date 1590068222380)
+++ bin/target/classes/messages.yml	(date 1590068222380)
@@ -0,0 +1,39 @@
+# Other Messages
+
+message:
+  TeleportBack: '&aYou has been Teleportet to your &cDeathLocation'
+  NoLocation: '&4No Location found!'
+  targetheal: '&aYou have been healed by &b[player]'
+  targethealplayer: '&aYou have been Healed &b[target]'
+  heal: '&aYou have been Healed'
+  notenabledback: '&c/back is not enabled in Config.yml'
+  notactivated: '&cthis Command is not Activated'
+  GamemodeChanged: '&aYour GameMode has been changed to &b[GameMode]'
+  GodModeChanged: '&aYour GodMode has been changed!'
+Startbudget:
+  Text:
+    Set: '&bStartBudget Sucessfuly set to [Money]'
+
+# Warp Messages
+Warp:
+  Warp: '&aYou were teleported to &b[warp]'
+  warpremoved: '&a[Prefix] &a[Warpname]&c was Removed!'
+  warpdoesntexist: '&4Doesnt Exists or was &cRemoved!'
+# PayLoad Text and True or False
+Payload:
+  Text: '&aYou got your reward &b[Money]'
+  Boolean: true
+
+# Change the Join Message
+JoinMessage: '&bWelcome &a[Player]'
+
+# Change the Leave Message
+LeaveMessage: '&bGoodbye &a[Player]'
+
+# Use to create a bill only works with MYSQL
+Bill:
+  Create: '&aYou have now put a bill to &b[Target]'
+  Get: '&aYou got an invoice from &b[Target] &aamounting to &b[Amount]'
+  Pay: '&bYou payed the Bill from &a[Target] &bin Amount of &a[Amount]'
+
+LoadedFirst: true
\ No newline at end of file
Index: bin/target/maven-status/maven-compiler-plugin/compile/default-compile/inputFiles.lst
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- bin/target/maven-status/maven-compiler-plugin/compile/default-compile/inputFiles.lst	(date 1583262186751)
+++ bin/target/maven-status/maven-compiler-plugin/compile/default-compile/inputFiles.lst	(date 1583262186751)
@@ -0,0 +1,66 @@
+D:\Desktop\Test\FrameAPI1.15\src\main\java\de\framedev\frameapi\managers\MongoManager.java
+D:\Desktop\Test\FrameAPI1.15\src\main\java\de\framedev\frameapi\api\SaveInventory.java
+D:\Desktop\Test\FrameAPI1.15\src\main\java\de\framedev\frameapi\listeners\money\MoneySigns.java
+D:\Desktop\Test\FrameAPI1.15\src\main\java\de\framedev\frameapi\cmds\MoneyBankCMD.java
+D:\Desktop\Test\FrameAPI1.15\src\main\java\de\framedev\frameapi\interfaces\EnergyListenerInterface.java
+D:\Desktop\Test\FrameAPI1.15\src\main\java\de\framedev\frameapi\managers\ItemBuilder.java
+D:\Desktop\Test\FrameAPI1.15\src\main\java\de\framedev\frameapi\pets\Pets.java
+D:\Desktop\Test\FrameAPI1.15\src\main\java\de\framedev\frameapi\queries\UpdateQuery.java
+D:\Desktop\Test\FrameAPI1.15\src\main\java\de\framedev\frameapi\cmds\EnergyCMD.java
+D:\Desktop\Test\FrameAPI1.15\src\main\java\de\framedev\frameapi\enums\MaterialInID.java
+D:\Desktop\Test\FrameAPI1.15\src\main\java\de\framedev\frameapi\queries\DeleteQuery.java
+D:\Desktop\Test\FrameAPI1.15\src\main\java\de\framedev\frameapi\cmds\MoneyCMD.java
+D:\Desktop\Test\FrameAPI1.15\src\main\java\de\framedev\frameapi\api\energy\Energy.java
+D:\Desktop\Test\FrameAPI1.15\src\main\java\de\framedev\frameapi\utils\UUIDManager.java
+D:\Desktop\Test\FrameAPI1.15\src\main\java\de\framedev\frameapi\queries\InsertQuery.java
+D:\Desktop\Test\FrameAPI1.15\src\main\java\de\framedev\frameapi\cmds\PositionCMD.java
+D:\Desktop\Test\FrameAPI1.15\src\main\java\de\framedev\frameapi\managers\MultiWorldManager.java
+D:\Desktop\Test\FrameAPI1.15\src\main\java\de\framedev\frameapi\mysql\InventoryStringDeSerializer.java
+D:\Desktop\Test\FrameAPI1.15\src\main\java\de\framedev\frameapi\mysql\IsTableExist.java
+D:\Desktop\Test\FrameAPI1.15\src\main\java\de\framedev\frameapi\api\API.java
+D:\Desktop\Test\FrameAPI1.15\src\main\java\de\framedev\frameapi\listeners\money\GetInterest.java
+D:\Desktop\Test\FrameAPI1.15\src\main\java\de\framedev\frameapi\listeners\PlayerKillPlayer.java
+D:\Desktop\Test\FrameAPI1.15\src\main\java\de\framedev\frameapi\utils\Information.java
+D:\Desktop\Test\FrameAPI1.15\src\main\java\de\framedev\frameapi\interfaces\EnergyInterface.java
+D:\Desktop\Test\FrameAPI1.15\src\main\java\de\framedev\frameapi\listeners\LeaveListener.java
+D:\Desktop\Test\FrameAPI1.15\src\main\java\de\framedev\frameapi\queries\SelectQuery.java
+D:\Desktop\Test\FrameAPI1.15\src\main\java\de\framedev\frameapi\cmds\FlyCMD.java
+D:\Desktop\Test\FrameAPI1.15\src\main\java\de\framedev\frameapi\queries\Callback.java
+D:\Desktop\Test\FrameAPI1.15\src\main\java\de\framedev\frameapi\afk\AFK.java
+D:\Desktop\Test\FrameAPI1.15\src\main\java\de\framedev\frameapi\listeners\money\MoneyBankSigns.java
+D:\Desktop\Test\FrameAPI1.15\src\main\java\de\framedev\frameapi\glass\Glas.java
+D:\Desktop\Test\FrameAPI1.15\src\main\java\de\framedev\frameapi\listeners\energy\CapacitorListener.java
+D:\Desktop\Test\FrameAPI1.15\src\main\java\de\framedev\frameapi\utils\UUIDFetcher.java
+D:\Desktop\Test\FrameAPI1.15\src\main\java\de\framedev\frameapi\managers\BackendManager.java
+D:\Desktop\Test\FrameAPI1.15\src\main\java\de\framedev\frameapi\listeners\money\GetMoneyInTime.java
+D:\Desktop\Test\FrameAPI1.15\src\main\java\de\framedev\frameapi\cmds\ChunkloaderCMD.java
+D:\Desktop\Test\FrameAPI1.15\src\main\java\de\framedev\frameapi\cmds\FrameAPICMDS.java
+D:\Desktop\Test\FrameAPI1.15\src\main\java\de\framedev\frameapi\cmds\FrameCMDS.java
+D:\Desktop\Test\FrameAPI1.15\src\main\java\de\framedev\frameapi\interfaces\EnergyInterfaceWithEnergyEinheiten.java
+D:\Desktop\Test\FrameAPI1.15\src\main\java\de\framedev\frameapi\utils\Config.java
+D:\Desktop\Test\FrameAPI1.15\src\main\java\de\framedev\frameapi\interfaces\Constructors.java
+D:\Desktop\Test\FrameAPI1.15\src\main\java\de\framedev\frameapi\managers\ChunkloaderManager.java
+D:\Desktop\Test\FrameAPI1.15\src\main\java\de\framedev\frameapi\managers\CropsManager.java
+D:\Desktop\Test\FrameAPI1.15\src\main\java\de\framedev\frameapi\kits\GetKits.java
+D:\Desktop\Test\FrameAPI1.15\src\main\java\de\framedev\frameapi\managers\FileManager.java
+D:\Desktop\Test\FrameAPI1.15\src\main\java\de\framedev\frameapi\utils\ReplaceCharConfig.java
+D:\Desktop\Test\FrameAPI1.15\src\main\java\de\framedev\frameapi\api\SaveEnderChest.java
+D:\Desktop\Test\FrameAPI1.15\src\main\java\de\framedev\frameapi\warps\WarpSigns.java
+D:\Desktop\Test\FrameAPI1.15\src\main\java\de\framedev\frameapi\enums\EnergyEinheiten.java
+D:\Desktop\Test\FrameAPI1.15\src\main\java\de\framedev\frameapi\managers\WorldManager.java
+D:\Desktop\Test\FrameAPI1.15\src\main\java\de\framedev\frameapi\listeners\JoinListener.java
+D:\Desktop\Test\FrameAPI1.15\src\main\java\de\framedev\frameapi\utils\Lags.java
+D:\Desktop\Test\FrameAPI1.15\src\main\java\de\framedev\frameapi\api\SavePlayersInventory.java
+D:\Desktop\Test\FrameAPI1.15\src\main\java\de\framedev\frameapi\queries\CreateTableQuery.java
+D:\Desktop\Test\FrameAPI1.15\src\main\java\de\framedev\frameapi\api\money\Money.java
+D:\Desktop\Test\FrameAPI1.15\src\main\java\de\framedev\frameapi\main\Main.java
+D:\Desktop\Test\FrameAPI1.15\src\main\java\de\framedev\frameapi\api\energy\EnergyWithEnergyEinheiten.java
+D:\Desktop\Test\FrameAPI1.15\src\main\java\de\framedev\frameapi\api\OpenOtherInventory.java
+D:\Desktop\Test\FrameAPI1.15\src\main\java\de\framedev\frameapi\mysql\MYSQL.java
+D:\Desktop\Test\FrameAPI1.15\src\main\java\de\framedev\frameapi\managers\SetBlock.java
+D:\Desktop\Test\FrameAPI1.15\src\main\java\de\framedev\frameapi\glass\Cocktail.java
+D:\Desktop\Test\FrameAPI1.15\src\main\java\de\framedev\frameapi\managers\InventoryManager.java
+D:\Desktop\Test\FrameAPI1.15\src\main\java\de\framedev\frameapi\mysql\SQL.java
+D:\Desktop\Test\FrameAPI1.15\src\main\java\de\framedev\frameapi\cmds\VanishCMD.java
+D:\Desktop\Test\FrameAPI1.15\src\main\java\de\framedev\frameapi\utils\QueryUtils.java
+D:\Desktop\Test\FrameAPI1.15\src\main\java\de\framedev\frameapi\utils\Init.java
Index: .idea/.gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/.gitignore	(date 1591731334063)
+++ .idea/.gitignore	(date 1591731334063)
@@ -0,0 +1,3 @@
+# Default ignored files
+/shelf/
+/workspace.xml
Index: bin/.settings/org.eclipse.core.resources.prefs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- bin/.settings/org.eclipse.core.resources.prefs	(date 1590167435620)
+++ bin/.settings/org.eclipse.core.resources.prefs	(date 1590167435620)
@@ -0,0 +1,2 @@
+eclipse.preferences.version=1
+encoding/<project>=UTF-8
Index: target/classes/messages.yml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- target/classes/messages.yml	(date 1592260211307)
+++ target/classes/messages.yml	(date 1592260211307)
@@ -0,0 +1,39 @@
+# Other Messages
+
+message:
+  TeleportBack: '&aYou has been Teleportet to your &cDeathLocation'
+  NoLocation: '&4No Location found!'
+  targetheal: '&aYou have been healed by &b[player]'
+  targethealplayer: '&aYou have been Healed &b[target]'
+  heal: '&aYou have been Healed'
+  notenabledback: '&c/back is not enabled in Config.yml'
+  notactivated: '&cthis Command is not Activated'
+  GamemodeChanged: '&aYour GameMode has been changed to &b[GameMode]'
+  GodModeChanged: '&aYour GodMode has been changed!'
+Startbudget:
+  Text:
+    Set: '&bStartBudget Sucessfuly set to [Money]'
+
+# Warp Messages
+Warp:
+  Warp: '&aYou were teleported to &b[warp]'
+  warpremoved: '&a[Prefix] &a[Warpname]&c was Removed!'
+  warpdoesntexist: '&4Doesnt Exists or was &cRemoved!'
+# PayLoad Text and True or False
+Payload:
+  Text: '&aYou got your reward &b[Money]'
+  Boolean: true
+
+# Change the Join Message
+JoinMessage: '&bWelcome &a[Player]'
+
+# Change the Leave Message
+LeaveMessage: '&bGoodbye &a[Player]'
+
+# Use to create a bill only works with MYSQL
+Bill:
+  Create: '&aYou have now put a bill to &b[Target]'
+  Get: '&aYou got an invoice from &b[Target] &aamounting to &b[Amount]'
+  Pay: '&bYou payed the Bill from &a[Target] &bin Amount of &a[Amount]'
+
+LoadedFirst: true
\ No newline at end of file
Index: src/main/java/de/framedev/frameapi/afk/AFK.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/de/framedev/frameapi/afk/AFK.java	(date 1591738414206)
+++ src/main/java/de/framedev/frameapi/afk/AFK.java	(date 1591738414206)
@@ -0,0 +1,230 @@
+package de.framedev.frameapi.afk;
+ 
+import java.util.HashMap;
+
+import org.bukkit.Bukkit;
+import org.bukkit.Location;
+import org.bukkit.command.Command;
+import org.bukkit.command.CommandExecutor;
+import org.bukkit.command.CommandSender;
+import org.bukkit.entity.Player;
+import org.bukkit.event.EventHandler;
+import org.bukkit.event.EventPriority;
+import org.bukkit.event.Listener;
+import org.bukkit.event.block.BlockBreakEvent;
+import org.bukkit.event.block.BlockPlaceEvent;
+import org.bukkit.event.player.AsyncPlayerChatEvent;
+import org.bukkit.event.player.PlayerKickEvent;
+import org.bukkit.event.player.PlayerMoveEvent;
+import org.bukkit.event.player.PlayerQuitEvent;
+
+import de.framedev.frameapi.main.Main;
+import de.framedev.frameapi.utils.ReplaceCharConfig;
+import net.md_5.bungee.api.chat.ComponentBuilder;
+import net.md_5.bungee.api.chat.HoverEvent;
+import net.md_5.bungee.api.chat.TextComponent;
+ 
+public class AFK implements CommandExecutor {
+    private static HashMap<String, String> afkPlayerMap;
+    private static HashMap<String, Long> afkTimeMap;
+    private final Main plugin;
+    private HashMap<String, Location> locationMap;
+
+    public AFK(Main plugin) {
+        this.plugin = plugin;
+        this.locationMap = new HashMap<>();
+        afkPlayerMap = new HashMap<>();
+        afkTimeMap = new HashMap<>();
+        int afktime = plugin.getConfig().getInt("AFK.Time");
+        plugin.getCommand("afk").setExecutor(this);
+        Bukkit.getPluginManager().registerEvents(new Events(), plugin);
+        Bukkit.getScheduler().scheduleSyncRepeatingTask(plugin, new IdleTimer(plugin), (afktime * 20), (afktime * 20));
+    }
+
+    public static void putPlayerToAfkMap(String PlayerName) {
+        afkPlayerMap.put(PlayerName, Bukkit.getPlayer(PlayerName).getPlayerListName());
+    }
+
+    public static void removePlayerFromAfkMap(String playerName) {
+        afkPlayerMap.remove(playerName);
+    }
+
+    public static String getAfkPlayerName(String playerName) {
+        return afkPlayerMap.get(playerName);
+    }
+
+    public static void putPlayerToTimeMap(String playerName) {
+        afkTimeMap.put(playerName, Bukkit.getPlayer(playerName).getPlayerTime());
+        Bukkit.getPlayer(playerName).resetPlayerTime();
+    }
+
+    public static void removePlayerFromTimeMap(String playerName) {
+        afkTimeMap.remove(playerName);
+    }
+
+    public static Long getPlayerAfkTime(String playerName) {
+        return afkTimeMap.get(playerName);
+    }
+
+    public static boolean isPlayerAfk(String playerName) {
+        return afkPlayerMap.containsKey(playerName);
+    }
+
+
+    public boolean onCommand(CommandSender sender, Command command, String label, String[] args) {
+        if (sender instanceof Player) {
+            Player player = (Player) sender;
+            if (player.hasPermission("frameapi.afk")) {
+                if (command.getName().equalsIgnoreCase("afk")) {
+                    if (isPlayerAfk(player.getName())) {
+                        afk(player, true, "");
+                        return true;
+                    }
+                    afk(player, false, "");
+                    return true;
+                }
+            } else {
+                player.sendMessage(Main.FrameMainGet.getPrefix() + " " + Main.FrameMainGet.getNoPerm());
+                return true;
+            }
+        }
+        return false;
+    }
+
+    public void afk(Player player, boolean afk, String reason) {
+        String isafkMessage = this.plugin.getConfig().getString("AFK.IsAFK");
+        String notafkMessage = this.plugin.getConfig().getString("AFK.IsNotAFK");
+
+
+        if (afk) {
+            if (notafkMessage.matches(".*\\[Time].*")) {
+                String afktime = returnAfkTime(player.getName());
+                notafkMessage = notafkMessage.replace("[Time]", "");
+                Bukkit.getPlayer(player.getName()).setPlayerListName(getAfkPlayerName(player.getName()));
+                removePlayerFromAfkMap(player.getName());
+                ReplaceCharConfig.replaceParagraph(notafkMessage);
+                TextComponent tc = new TextComponent();
+                tc.setText(player.getName());
+                tc.setHoverEvent(new HoverEvent(HoverEvent.Action.SHOW_TEXT, (new ComponentBuilder(player.getName())).create()));
+                notafkMessage = ReplaceCharConfig.replaceObjectWithData(notafkMessage, "[Player]", player.getName());
+                Bukkit.broadcastMessage(notafkMessage);
+                Bukkit.getConsoleSender().sendMessage("§7" + player.getName() + " is no longer AFK " + afktime);
+            } else {
+                TextComponent tc = new TextComponent();
+                tc.setText(player.getName());
+                tc.setHoverEvent(new HoverEvent(HoverEvent.Action.SHOW_TEXT, (new ComponentBuilder(player.getName())).create()));
+                Bukkit.getPlayer(player.getName()).setPlayerListName(getAfkPlayerName(player.getName()));
+                removePlayerFromAfkMap(player.getName());
+                notafkMessage = ReplaceCharConfig.replaceParagraph(notafkMessage);
+                notafkMessage = ReplaceCharConfig.replaceObjectWithData(notafkMessage, "[Player]", player.getName());
+                Bukkit.broadcastMessage(notafkMessage);
+            }
+        } else {
+
+            TextComponent tc = new TextComponent();
+            tc.setText(player.getName());
+            tc.setHoverEvent(new HoverEvent(HoverEvent.Action.SHOW_TEXT, (new ComponentBuilder(player.getName())).create()));
+            putPlayerToAfkMap(player.getName());
+            putPlayerToTimeMap(player.getName());
+            isafkMessage = ReplaceCharConfig.replaceParagraph(isafkMessage);
+            isafkMessage = ReplaceCharConfig.replaceObjectWithData(isafkMessage, "[Player]", player.getName());
+            Bukkit.broadcastMessage(isafkMessage);
+        }
+    }
+
+
+    String returnAfkTime(String playerName) {
+        long oldTime = getPlayerAfkTime(playerName).longValue();
+        long currentTime = Bukkit.getPlayer(playerName).getPlayerTime();
+        long minutes = (currentTime - oldTime) / 20L / 60L;
+        long seconds = (currentTime - oldTime) / 20L % 60L;
+        return (minutes == 0L) ? (seconds + "s") : (minutes + "m" + seconds + "s");
+    }
+
+    HashMap<String, Location> getLocationMap() {
+        return this.locationMap;
+    }
+
+    public class Events implements Listener {
+        @EventHandler
+        private void onPlayerMove(PlayerMoveEvent event) {
+            if (AFK.isPlayerAfk(event.getPlayer().getName())) {
+                int movX = event.getFrom().getBlockX() - event.getTo().getBlockX();
+                int movZ = event.getFrom().getBlockZ() - event.getTo().getBlockZ();
+                if (Math.abs(movX) > 0 || Math.abs(movZ) > 0) {
+                    AFK.this.afk(event.getPlayer(), true, "");
+                }
+            }
+        }
+
+
+        @EventHandler
+        public void onBlockPlace(BlockPlaceEvent event) {
+            if (AFK.isPlayerAfk(event.getPlayer().getName())) {
+                String playerName = event.getPlayer().getName();
+                AFK.removePlayerFromAfkMap(event.getPlayer().getName());
+                AFK.removePlayerFromTimeMap(event.getPlayer().getName());
+                AFK.this.returnAfkTime(event.getPlayer().getName());
+                AFK.this.getLocationMap().remove(playerName);
+            }
+        }
+
+        @EventHandler
+        public void onBlockBreak(BlockBreakEvent event) {
+            if (AFK.isPlayerAfk(event.getPlayer().getName())) {
+                String playerName = event.getPlayer().getName();
+                AFK.removePlayerFromAfkMap(event.getPlayer().getName());
+                AFK.removePlayerFromTimeMap(event.getPlayer().getName());
+                AFK.this.returnAfkTime(event.getPlayer().getName());
+                AFK.this.getLocationMap().remove(playerName);
+            }
+        }
+
+        @EventHandler
+        public void onChat(AsyncPlayerChatEvent event) {
+            if (AFK.isPlayerAfk(event.getPlayer().getName())) {
+                String playerName = event.getPlayer().getName();
+                AFK.removePlayerFromAfkMap(event.getPlayer().getName());
+                AFK.removePlayerFromTimeMap(event.getPlayer().getName());
+                AFK.this.returnAfkTime(event.getPlayer().getName());
+                AFK.this.getLocationMap().remove(playerName);
+            }
+        }
+
+        @EventHandler( priority = EventPriority.MONITOR )
+        private void onPlayerQuit(PlayerQuitEvent event) {
+            String playerName = event.getPlayer().getName();
+            AFK.removePlayerFromAfkMap(playerName);
+            AFK.removePlayerFromTimeMap(playerName);
+            AFK.this.getLocationMap().remove(playerName);
+        }
+
+        @EventHandler( priority = EventPriority.MONITOR )
+        private void onPlayerKicked(PlayerKickEvent event) {
+            String playerName = event.getPlayer().getName();
+            AFK.removePlayerFromAfkMap(playerName);
+            AFK.removePlayerFromTimeMap(playerName);
+            AFK.this.getLocationMap().remove(playerName);
+        }
+    }
+
+    class IdleTimer implements Runnable {
+        private final Main plugin;
+        int afktime = Main.getInstance().getConfig().getInt("AFK.Time");
+
+        IdleTimer(Main plugin) {
+            this.plugin = plugin;
+        }
+
+        public void run() {
+            for (Player player : this.plugin.getServer().getOnlinePlayers()) {
+                if (AFK.this.getLocationMap().containsKey(player.getName()) && ((Location) AFK.this.getLocationMap().get(player.getName())).equals(player.getLocation()) && !AFK.isPlayerAfk(player.getName())) {
+                    long idleTime = (this.afktime * 20);
+                    player.setPlayerTime(-idleTime, true);
+                    AFK.this.afk(player, false, "");
+                }
+                AFK.this.getLocationMap().put(player.getName(), player.getLocation());
+            }
+        }
+    }
+}
\ No newline at end of file
Index: src/main/java/de/framedev/frameapi/api/OpenOtherInventory.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/de/framedev/frameapi/api/OpenOtherInventory.java	(date 1590168206260)
+++ src/main/java/de/framedev/frameapi/api/OpenOtherInventory.java	(date 1590168206260)
@@ -0,0 +1,160 @@
+package de.framedev.frameapi.api;
+ 
+import java.io.IOException;
+import java.sql.ResultSet;
+import java.sql.SQLException;
+import java.sql.Statement;
+import java.util.HashMap;
+
+import org.bukkit.Bukkit;
+import org.bukkit.command.Command;
+import org.bukkit.command.CommandExecutor;
+import org.bukkit.command.CommandSender;
+import org.bukkit.configuration.ConfigurationSection;
+import org.bukkit.entity.Player;
+import org.bukkit.event.EventHandler;
+import org.bukkit.event.Listener;
+import org.bukkit.event.inventory.InventoryCloseEvent;
+import org.bukkit.inventory.Inventory;
+import org.bukkit.plugin.Plugin;
+
+import de.framedev.frameapi.main.Main;
+import de.framedev.frameapi.mysql.InventoryStringDeSerializer;
+import de.framedev.frameapi.mysql.MYSQL;
+import de.framedev.frameapi.mysql.SQL;
+import de.framedev.frameapi.queries.UpdateQuery;
+
+
+public class OpenOtherInventory
+   implements CommandExecutor, Listener {
+    private final Main plugin;
+    public HashMap<String, Inventory> inventorys = new HashMap<>();
+    public HashMap<String, Integer> inventoryNumber = new HashMap<>();
+    Inventory inventory = Bukkit.createInventory(null, 45);
+
+    public OpenOtherInventory(Main plugin) {
+        this.plugin = plugin;
+        plugin.getCommand("openinvnumber").setExecutor(this);
+        Bukkit.getPluginManager().registerEvents(this, (Plugin) plugin);
+    }
+
+
+    public boolean onCommand(CommandSender sender, Command command, String label, String[] args) {
+        if (sender instanceof Player) {
+            Player player = (Player) sender;
+            ConfigurationSection cs = Main.getInstance().getConfig().getConfigurationSection("SaveInventoryMultiple");
+            for (String s : cs.getKeys(false)) {
+                try {
+                    if (player.hasPermission("frameapi.saveinventorynumber.multiple." + s) &&
+                            Integer.parseInt(args[0]) <= getAmount(player, s) &&
+                            command.getName().equalsIgnoreCase("openinvnumber")) {
+                        loadInventory(player, Integer.parseInt(args[0]));
+                        break;
+                    }
+                } catch (IllegalArgumentException ex) {
+                    player.sendMessage("§cPlease use §b/openinvnumber (number)");
+                }
+            }
+        }
+        return false;
+    }
+
+    public int getAmount(Player player, String group) {
+        for (String s : this.plugin.getConfig().getConfigurationSection("SaveInventoryMultiple").getKeys(false)) {
+            if (s.equalsIgnoreCase(group)) {
+                int x = this.plugin.getConfig().getInt("SaveInventoryMultiple." + s);
+                return x;
+            }
+        }
+        return 0;
+    }
+
+    public void loadInventory(Player player, int number) {
+        if (!this.inventorys.containsKey(player.getName())) {
+            if (SQL.isTableExists("inventory")) {
+                if (SQL.exists("inventory", "UUID", player.getName())) {
+                    Inventory inventory = null;
+                    try {
+                        try {
+                            Statement statement = MYSQL.getConnection().createStatement();
+                            String sql = "SELECT * FROM inventory WHERE UUID = '" + player.getName() + "' AND InventoryNumber= '" + number + "'";
+                            ResultSet res = statement.executeQuery(sql);
+                            if (res.next()) {
+                                inventory = InventoryStringDeSerializer.fromBase64((String) res.getObject("Inventory"));
+                            }
+                        } catch (SQLException sQLException) {
+                        }
+
+                    } catch (IOException e) {
+                        e.printStackTrace();
+                    }
+                    if (inventory != null) {
+                        player.openInventory(inventory);
+                        this.inventorys.put(player.getName(), inventory);
+                        this.inventoryNumber.put(player.getName(), Integer.valueOf(number));
+                    } else {
+
+                        Inventory inventory1 = Bukkit.createInventory(null, 45);
+                        player.openInventory(inventory1);
+                        this.inventorys.put(player.getName(), inventory1);
+                        this.inventoryNumber.put(player.getName(), Integer.valueOf(number));
+                    }
+                } else {
+                    Inventory inventory1 = Bukkit.createInventory(null, 45);
+                    player.openInventory(inventory1);
+                    this.inventorys.put(player.getName(), inventory1);
+                    this.inventoryNumber.put(player.getName(), Integer.valueOf(number));
+                }
+            } else {
+                SQL.createTable("inventory", new String[]{"UUID VARCHAR(64)", "Inventory TEXT", "InventoryNumber INT"});
+                Inventory inventory1 = Bukkit.createInventory(null, 45);
+                player.openInventory(inventory1);
+                this.inventorys.put(player.getName(), inventory1);
+                this.inventoryNumber.put(player.getName(), Integer.valueOf(number));
+            }
+        }
+    }
+
+    @EventHandler
+    public void saveInventory(InventoryCloseEvent event) {
+        if (this.inventorys.containsKey(event.getPlayer().getName()) &&
+                SQL.isTableExists("inventory"))
+            try {
+                Statement statement = MYSQL.getConnection().createStatement();
+                String sql = "SELECT * FROM inventory WHERE UUID = '" + event.getPlayer().getName() + "' AND InventoryNumber = '" + this.inventoryNumber.get(event.getPlayer().getName()) + "';";
+                ResultSet res = statement.executeQuery(sql);
+                if (res.next()) {
+                    if (res.getString("Inventory") == null) {
+                        SQL.insertData("inventory", "'" + event.getPlayer().getName() + "','" + InventoryStringDeSerializer.toBase64(this.inventorys.get(event.getPlayer().getName())) + "','" + this.inventoryNumber
+                                .get(event.getPlayer().getName()) + "'", new String[]{"UUID", "Inventory", "InventoryNumber"});
+                        this.inventorys.remove(event.getPlayer().getName());
+                        this.inventoryNumber.remove(event.getPlayer().getName());
+                    } else {
+
+                        try {
+                            String sql1 = (new UpdateQuery("inventory")).set("Inventory", "'" + InventoryStringDeSerializer.toBase64(this.inventorys.get(event.getPlayer().getName())) + "'").where("UUID = '" + event.getPlayer().getName() + "'").and("InventoryNumber = '" + this.inventoryNumber.get(event.getPlayer().getName()) + "'").build();
+                            statement.executeUpdate(sql1);
+                        } catch (SQLException e) {
+                            e.printStackTrace();
+                        } finally {
+                            if (MYSQL.con != null) {
+                                MYSQL.close();
+                            }
+                        }
+                        this.inventorys.remove(event.getPlayer().getName());
+                        this.inventoryNumber.remove(event.getPlayer().getName());
+                    }
+                } else {
+                    SQL.createTable("inventory", new String[]{"UUID VARCHAR(64)", "Inventory TEXT", "InventoryNumber INT"});
+                    SQL.insertData("inventory", "'" + event.getPlayer().getName() + "','" + InventoryStringDeSerializer.toBase64(this.inventorys.get(event.getPlayer().getName())) + "','" + this.inventoryNumber
+                            .get(event.getPlayer().getName()) + "'", new String[]{"UUID", "Inventory", "InventoryNumber"});
+                    this.inventorys.remove(event.getPlayer().getName());
+                    this.inventoryNumber.remove(event.getPlayer().getName());
+                }
+            } catch (SQLException sQLException) {
+
+            }
+    }
+}
+
+
Index: src/main/java/de/framedev/frameapi/api/SavePlayersInventory.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/de/framedev/frameapi/api/SavePlayersInventory.java	(date 1591734030430)
+++ src/main/java/de/framedev/frameapi/api/SavePlayersInventory.java	(date 1591734030430)
@@ -0,0 +1,107 @@
+package de.framedev.frameapi.api;
+
+import de.framedev.frameapi.main.Main;
+import de.framedev.frameapi.mysql.InventoryStringDeSerializer;
+import de.framedev.frameapi.mysql.MYSQL;
+import de.framedev.frameapi.mysql.SQL;
+import org.bukkit.Bukkit;
+import org.bukkit.entity.Player;
+import org.bukkit.event.Listener;
+import org.bukkit.plugin.Plugin;
+
+import java.io.IOException;
+import java.sql.ResultSet;
+import java.sql.SQLException;
+import java.sql.Statement;
+
+
+public class SavePlayersInventory implements Listener {
+
+    public SavePlayersInventory() {
+        plugin = Main.getInstance();
+    }
+
+    private final Main plugin;
+
+    public SavePlayersInventory(Main plugin) {
+        this.plugin = plugin;
+        Bukkit.getPluginManager().registerEvents(this, (Plugin) plugin);
+
+    }
+
+
+    public void savePlayerInventory(Player player) {
+        if (plugin.getConfig().getBoolean("SavePlayersInventory")) {
+            if (SQL.isTableExists("PlayerInventory")) {
+                try {
+                    Statement statement = MYSQL.getConnection().createStatement();
+                    String sql = "SELECT * FROM PlayerInventory WHERE UUID = '" + player.getName() + "';";
+                    ResultSet res = statement.executeQuery(sql);
+                    if (res.next()) {
+                        if (res.getString("PlayerInventory") == null) {
+                            SQL.insertData("PlayerInventory", "'" + player.getName() + "','" +
+                                    InventoryStringDeSerializer.itemStackArrayToBase64(player.getInventory().getContents()) + "','" +
+                                    InventoryStringDeSerializer.itemStackArrayToBase64(player.getInventory().getArmorContents()) + "'", "UUID", "PlayerInventory", "PlayerARMOR");
+                        } else {
+                            try {
+                                String sql1 = "UPDATE PlayerInventory SET PlayerInventory = '"
+                                        + InventoryStringDeSerializer.itemStackArrayToBase64(player.getInventory().getContents())
+                                        + "', PlayerARMOR = '" + InventoryStringDeSerializer.itemStackArrayToBase64(player.getInventory().getArmorContents())
+                                        + "' WHERE UUID = '" + player.getName() + "';";
+                                statement.executeUpdate(sql1);
+                            } catch (SQLException e) {
+                                e.printStackTrace();
+                            } finally {
+                                if (MYSQL.con != null) {
+                                    MYSQL.close();
+                                }
+                            }
+                        }
+                    } else {
+                        SQL.insertData("PlayerInventory", "'" + player.getName() + "','" +
+                                InventoryStringDeSerializer.itemStackArrayToBase64(player.getInventory().getContents()) + "','" +
+                                InventoryStringDeSerializer.itemStackArrayToBase64(player.getInventory().getArmorContents())
+                                + "'", "UUID", "PlayerInventory", "PlayerARMOR");
+                    }
+                } catch (SQLException sQLException) {
+
+                }
+            } else {
+                SQL.createTable("PlayerInventory", "UUID VARCHAR(64)", "PlayerInventory TEXT", "PlayerARMOR TEXT");
+                SQL.insertData("PlayerInventory", "'" + player.getName() + "','" +
+                        InventoryStringDeSerializer.itemStackArrayToBase64(player.getInventory().getContents()) + "','" +
+                        InventoryStringDeSerializer.itemStackArrayToBase64(player.getInventory().getArmorContents())
+                        + "'", "UUID", "PlayerInventory", "PlayerARMOR");
+            }
+        }
+    }
+
+    public void loadPlayerInventory(Player player) {
+        if (this.plugin.getConfig().getBoolean("SavePlayersInventory") &&
+                SQL.isTableExists("PlayerInventory")) {
+            try {
+                Statement statement = MYSQL.getConnection().createStatement();
+                String sql = "SELECT * FROM PlayerInventory WHERE UUID = '" + player.getName() + "';";
+                ResultSet res = statement.executeQuery(sql);
+                if (res.next()) {
+                    try {
+                        player.getInventory().setContents(InventoryStringDeSerializer.itemStackArrayFromBase64(res.getString("PlayerInventory")));
+                        player.getInventory().setArmorContents(InventoryStringDeSerializer.itemStackArrayFromBase64(res.getString("PlayerARMOR")));
+                    } catch (SQLException | IOException e) {
+                        e.printStackTrace();
+                    } finally {
+                        if (MYSQL.con != null) {
+                            MYSQL.close();
+                        }
+                    }
+                } else {
+                    SQL.createTable("PlayerInventory", "UUID VARCHAR(64)", "PlayerInventory TEXT", "PlayerARMOR TEXT");
+                }
+            } catch (SQLException sQLException) {
+            }
+        }
+    }
+}
+
+
+
Index: src/main/java/de/framedev/frameapi/api/SaveEnderChest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/de/framedev/frameapi/api/SaveEnderChest.java	(date 1590187180828)
+++ src/main/java/de/framedev/frameapi/api/SaveEnderChest.java	(date 1590187180828)
@@ -0,0 +1,111 @@
+package de.framedev.frameapi.api;
+
+import de.framedev.frameapi.main.Main;
+import de.framedev.frameapi.mysql.InventoryStringDeSerializer;
+import de.framedev.frameapi.mysql.SQL;
+import org.bukkit.Bukkit;
+import org.bukkit.Material;
+import org.bukkit.event.EventHandler;
+import org.bukkit.event.Listener;
+import org.bukkit.event.player.PlayerJoinEvent;
+import org.bukkit.event.player.PlayerKickEvent;
+import org.bukkit.event.player.PlayerQuitEvent;
+import org.bukkit.inventory.Inventory;
+import org.bukkit.inventory.ItemStack;
+import org.bukkit.plugin.Plugin;
+import org.bukkit.scheduler.BukkitRunnable;
+
+import java.io.IOException;
+
+
+public class SaveEnderChest
+        implements Listener {
+    private final Main plugin;
+
+    public SaveEnderChest(Main plugin) {
+        this.plugin = plugin;
+        Bukkit.getPluginManager().registerEvents(this, (Plugin) plugin);
+    }
+
+    @EventHandler
+    public void onQuit(PlayerQuitEvent event) {
+        if (this.plugin.getConfig().getBoolean("SaveMYSQLEnderChest")) {
+            if (SQL.isTableExists("enderchest")) {
+                if (SQL.exists("enderchest", "UUID", event.getPlayer().getName())) {
+                    SQL.updateData("enderchest", "EnderchestInventory", "'" + InventoryStringDeSerializer.toBase64(event.getPlayer().getEnderChest()) + "'", "UUID ='" + event.getPlayer().getName() + "'");
+                } else {
+                    SQL.insertData("enderchest", "'" + event.getPlayer().getName() + "','" + InventoryStringDeSerializer.toBase64(event.getPlayer().getEnderChest()) + "'", new String[]{"UUID", "EnderchestInventory"});
+                }
+            } else {
+                SQL.createTable("enderchest", new String[]{"UUID VARCHAR(64)", "EnderchestInventory TEXT"});
+                SQL.insertData("enderchest", "'" + event.getPlayer().getName() + "','" + InventoryStringDeSerializer.toBase64(event.getPlayer().getEnderChest()) + "'", new String[]{"UUID", "EnderchestInventory"});
+            }
+        }
+    }
+
+    @EventHandler
+    public void onKick(PlayerKickEvent event) {
+        if (this.plugin.getConfig().getBoolean("SaveMYSQLEnderChest")) {
+            if (SQL.isTableExists("enderchest")) {
+                if (SQL.exists("enderchest", "UUID", event.getPlayer().getName())) {
+                    SQL.updateData("enderchest", "EnderchestInventory", "'" + InventoryStringDeSerializer.toBase64(event.getPlayer().getEnderChest()) + "'", "UUID ='" + event.getPlayer().getName() + "'");
+                } else {
+                    SQL.insertData("enderchest", "'" + event.getPlayer().getName() + "','" + InventoryStringDeSerializer.toBase64(event.getPlayer().getEnderChest()) + "'", new String[]{"UUID", "EnderchestInventory"});
+                }
+            } else {
+                SQL.createTable("enderchest", new String[]{"UUID VARCHAR(64)", "EnderchestInventory TEXT"});
+                SQL.insertData("enderchest", "'" + event.getPlayer().getName() + "','" + InventoryStringDeSerializer.toBase64(event.getPlayer().getEnderChest()) + "'", new String[]{"UUID", "EnderchestInventory"});
+            }
+        }
+    }
+
+    @EventHandler
+    public void onJoin(final PlayerJoinEvent event) {
+        (new BukkitRunnable() {
+            public void run() {
+                if (SaveEnderChest.this.plugin.getConfig().getBoolean("SaveMYSQLEnderChest")) {
+                    if (SQL.isTableExists("enderchest")) {
+                        if (SQL.exists("enderchest", "UUID", event.getPlayer().getName())) {
+                            Inventory inventory = null;
+                            try {
+                                inventory = InventoryStringDeSerializer.fromBase64((String) SQL.get("enderchest", "EnderchestInventory", "UUID", event.getPlayer().getName()));
+                            } catch (IOException e) {
+                                e.printStackTrace();
+                            }
+                            if (inventory != null) {
+                                event.getPlayer().getEnderChest().clear();
+                                event.getPlayer().getEnderChest().setContents(inventory.getContents());
+                            }
+                        }
+                    } else {
+                        SQL.createTable("enderchest", new String[]{"UUID VARCHAR(64)", "EnderchestInventory TEXT"});
+                    }
+                }
+            }
+        }).runTaskLater((Plugin) this.plugin, 20L);
+    }
+
+    @EventHandler
+    public void onJoinFirst(final PlayerJoinEvent event) {
+        if (!event.getPlayer().hasPlayedBefore())
+            if(plugin.getConfig().getBoolean("EnderChestStartKit")) {
+                (new BukkitRunnable() {
+                    public void run() {
+                        Inventory inventory = Bukkit.createInventory(null, 27);
+                        inventory.setItem(0, new ItemStack(Material.WHITE_SHULKER_BOX));
+                        inventory.setItem(1, new ItemStack(Material.ORANGE_SHULKER_BOX));
+                        inventory.setItem(2, new ItemStack(Material.MAGENTA_SHULKER_BOX));
+                        inventory.setItem(3, new ItemStack(Material.LIGHT_BLUE_SHULKER_BOX));
+                        inventory.setItem(4, new ItemStack(Material.YELLOW_SHULKER_BOX));
+                        inventory.setItem(5, new ItemStack(Material.LIME_SHULKER_BOX));
+                        inventory.setItem(6, new ItemStack(Material.PINK_SHULKER_BOX));
+                        inventory.setItem(7, new ItemStack(Material.GRAY_SHULKER_BOX));
+                        inventory.setItem(8, new ItemStack(Material.LIGHT_GRAY_SHULKER_BOX));
+                        event.getPlayer().getEnderChest().setContents(inventory.getContents());
+                    }
+                }).runTaskLater((Plugin) this.plugin, 60L);
+            }
+    }
+}
+
+
Index: src/main/java/de/framedev/frameapi/api/API.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/de/framedev/frameapi/api/API.java	(date 1591785190833)
+++ src/main/java/de/framedev/frameapi/api/API.java	(date 1591785190833)
@@ -0,0 +1,1277 @@
+package de.framedev.frameapi.api;
+
+import java.io.File;
+import java.io.IOException;
+import java.io.InputStream;
+import java.io.UnsupportedEncodingException;
+import java.sql.PreparedStatement;
+import java.sql.ResultSet;
+import java.sql.SQLException;
+import java.sql.Statement;
+import java.text.SimpleDateFormat;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Date;
+import java.util.HashMap;
+import java.util.List;
+
+import org.bukkit.Bukkit;
+import org.bukkit.ChatColor;
+import org.bukkit.Color;
+import org.bukkit.Difficulty;
+import org.bukkit.FireworkEffect;
+import org.bukkit.GameMode;
+import org.bukkit.GameRule;
+import org.bukkit.Location;
+import org.bukkit.Material;
+import org.bukkit.OfflinePlayer;
+import org.bukkit.SkullType;
+import org.bukkit.Statistic;
+import org.bukkit.World;
+import org.bukkit.configuration.InvalidConfigurationException;
+import org.bukkit.configuration.file.FileConfiguration;
+import org.bukkit.configuration.file.YamlConfiguration;
+import org.bukkit.enchantments.Enchantment;
+import org.bukkit.entity.Arrow;
+import org.bukkit.entity.Entity;
+import org.bukkit.entity.EntityType;
+import org.bukkit.entity.Firework;
+import org.bukkit.entity.Player;
+import org.bukkit.event.Event;
+import org.bukkit.event.EventHandler;
+import org.bukkit.event.EventPriority;
+import org.bukkit.event.HandlerList;
+import org.bukkit.event.Listener;
+import org.bukkit.event.entity.PlayerDeathEvent;
+import org.bukkit.event.inventory.InventoryClickEvent;
+import org.bukkit.event.player.AsyncPlayerChatEvent;
+import org.bukkit.event.player.PlayerInteractAtEntityEvent;
+import org.bukkit.event.player.PlayerJoinEvent;
+import org.bukkit.event.server.ServerListPingEvent;
+import org.bukkit.inventory.Inventory;
+import org.bukkit.inventory.ItemStack;
+import org.bukkit.inventory.meta.BookMeta;
+import org.bukkit.inventory.meta.FireworkMeta;
+import org.bukkit.inventory.meta.ItemMeta;
+import org.bukkit.inventory.meta.SkullMeta;
+import org.bukkit.plugin.Plugin;
+import org.bukkit.scheduler.BukkitRunnable;
+
+import de.framedev.frameapi.api.money.Money;
+import de.framedev.frameapi.enums.MaterialInID;
+import de.framedev.frameapi.kits.KitManager;
+import de.framedev.frameapi.main.Main;
+import de.framedev.frameapi.managers.FileManager;
+import de.framedev.frameapi.managers.InventoryManager;
+import de.framedev.frameapi.managers.ItemBuilder;
+import de.framedev.frameapi.mysql.IsTableExist;
+import de.framedev.frameapi.mysql.MYSQL;
+import de.framedev.frameapi.mysql.SQL;
+import de.framedev.frameapi.pets.Pets;
+import de.framedev.frameapi.utils.Config;
+import de.framedev.frameapi.utils.Information;
+import net.md_5.bungee.api.chat.ClickEvent;
+import net.md_5.bungee.api.chat.ComponentBuilder;
+import net.md_5.bungee.api.chat.HoverEvent;
+import net.md_5.bungee.api.chat.TextComponent;
+
+
+@SuppressWarnings("deprecation")
+public class API implements Listener {
+    private static HashMap<String, Location> oldloc = new HashMap<>();
+    private static String version = Information.getVersion();
+    private static String Author = Information.getAuthor();
+    private static String name = Information.getName();
+    private static String apiversion = Information.getApiversion();
+    private static File file = new File("plugins/FrameAPI/locations.yml");
+    private static FileConfiguration cfg = (FileConfiguration) YamlConfiguration.loadConfiguration(file);
+    private static FileConfiguration cfglocation;
+    private static File filelocation;
+    private static String messageOfreload;
+    private static Money eco = new Money();
+    private static Inventory inv = Bukkit.createInventory(null, 27, "§aTeleporter");
+
+    public API() {
+
+    }
+
+    public static HashMap<String, Location> getOldloc() {
+        return oldloc;
+    }
+
+    static {
+        for (Player all : Bukkit.getOnlinePlayers()) {
+            ItemStack skull = ItemStackSkull(all.getName());
+            inv.addItem(new ItemStack[]{skull});
+            inv.setItem(26, (new ItemBuilder(Material.BLUE_STAINED_GLASS_PANE)).setDisplayName("§aNext Page").build());
+        }
+    }
+
+    private ArrayList<String> hide = new ArrayList<>();
+    private SimpleDateFormat date2 = new SimpleDateFormat("HH.mm.ss");
+    private String Uhrzeit2 = this.date2.format(new Date());
+    private File deniedFile = new File("plugins/FrameAPI", "DeniedWords.yml");
+    private FileConfiguration deniedcfg = (FileConfiguration) YamlConfiguration.loadConfiguration(this.deniedFile);
+    private File fileplayer = new File("plugins/FrameAPI/playerlist.yml");
+    private FileConfiguration cfgplayer = (FileConfiguration) YamlConfiguration.loadConfiguration(this.fileplayer);
+    private ArrayList<String> names = new ArrayList<>();
+
+
+    @Deprecated
+    public static ItemStack ItemStackSkull(String name) {
+        ItemStack skull = new ItemStack(Material.LEGACY_SKULL_ITEM, 1, (short) SkullType.PLAYER.ordinal());
+
+        SkullMeta meta = (SkullMeta) skull.getItemMeta();
+        meta.setDisplayName("§a" + name);
+        skull.setItemMeta((ItemMeta) meta);
+        return skull;
+    }
+
+    public static ItemStack createItemBuilder(Material material, int amount, String displayname, boolean unbreakable) {
+        return (new ItemBuilder(material)).setAmount(amount).setDisplayName(displayname).setUnbreakable(unbreakable).build();
+    }
+
+
+    public void onUpdate() {
+        Bukkit.getConsoleSender().sendMessage(Main.FrameMainGet.getPrefix() + "§a version 4.4.6 = §bBug Fixes, §aMoney Fix");
+        Bukkit.getConsoleSender().sendMessage(Main.FrameMainGet.getPrefix() + " §aThis Plugin was written by §bFrameDev");
+    }
+
+    public void init() {
+        StartUp(Main.getInstance());
+    }
+
+
+    public void getInformation(Player p) {
+        ArrayList<String> string = new ArrayList<>();
+        string.add(0, Main.FrameMainGet.getPrefix() + " §bPlugin Name = §a" + name);
+        string.add(1, Main.FrameMainGet.getPrefix() + " §bAuthor = §a" + Author);
+        string.add(2, Main.FrameMainGet.getPrefix() + " §bVersion = §a" + version);
+        string.add(3, Main.FrameMainGet.getPrefix() + " §bApi Version = §a" + apiversion);
+        for (String s : string) {
+            p.sendMessage(s);
+        }
+        ArrayList<String> issues = new ArrayList<>();
+        issues.add("§cEnergy is Work in progress");
+        p.sendMessage(issues.get(0));
+    }
+
+
+    public void InformationStartup() {
+        ArrayList<String> string = new ArrayList<>();
+        string.add(0, Main.FrameMainGet.getPrefix() + " §bPlugin Name = §a" + name);
+        string.add(1, Main.FrameMainGet.getPrefix() + " §bAuthor = §a" + Author);
+        string.add(2, Main.FrameMainGet.getPrefix() + " §bVersion = §a" + version);
+        string.add(3, Main.FrameMainGet.getPrefix() + " §bApi Version = §a" + apiversion);
+        ArrayList<String> issues = new ArrayList<>();
+        issues.add("§cEnergy is Work in progress");
+        for (String s : string) {
+            Bukkit.getConsoleSender().sendMessage(s);
+        }
+        Bukkit.getConsoleSender().sendMessage(issues.get(0));
+    }
+
+
+    public void StartUp(Main plugin) {
+        if (Main.getInstance().getConfig().getString("language").equalsIgnoreCase("en_EN")) {
+            Bukkit.getConsoleSender().sendMessage(Main.FrameMainGet.getPrefix() + " §4Attention this Plugin work's Only in this Versions 1.13 - 1.15!");
+            Bukkit.getConsoleSender().sendMessage(Main.FrameMainGet.getPrefix() + " §4if you want a specific version then write me in the forum!");
+            Bukkit.getConsoleSender().sendMessage("§b==========================================");
+            Bukkit.getConsoleSender().sendMessage("§b                                          ");
+            Bukkit.getConsoleSender().sendMessage("§b=         §a[§aFrameAPI]§b                     =");
+            Bukkit.getConsoleSender().sendMessage("§b                                          ");
+            Bukkit.getConsoleSender().sendMessage("§b                                          ");
+            Bukkit.getConsoleSender().sendMessage("§b==========================================");
+            ConfigStartup();
+            Bukkit.getConsoleSender().sendMessage(Main.FrameMainGet.getPrefix() + " §bLoaded");
+        } else if (Main.getInstance().getConfig().getString("language").equalsIgnoreCase("de_DE")) {
+            Bukkit.getConsoleSender().sendMessage(Main.FrameMainGet.getPrefix() + " §4Achtung dieses Plugin funktioniert nur in den Versionen 1.13 - 1.15");
+            Bukkit.getConsoleSender().sendMessage(Main.FrameMainGet.getPrefix() + " §4Wenn du eine eigene Version haben moechtest Kontaktiere mich im Forum");
+            Bukkit.getConsoleSender().sendMessage("§b==========================================");
+            Bukkit.getConsoleSender().sendMessage("§b                                          ");
+            Bukkit.getConsoleSender().sendMessage("§b=         §a[§aFrameAPI]§b                     =");
+            Bukkit.getConsoleSender().sendMessage("§b                                          ");
+            Bukkit.getConsoleSender().sendMessage("§b                                          ");
+            Bukkit.getConsoleSender().sendMessage("§b==========================================");
+            ConfigStartup();
+            Bukkit.getConsoleSender().sendMessage(Main.FrameMainGet.getPrefix() + " §bgeladen");
+        }
+    }
+
+
+    public void sendMessageofReload() {
+        Bukkit.getOnlinePlayers().forEach(current -> {
+            try {
+                messageOfreload = Main.getInstance().getConfig().getString("MessageOfReload.Text");
+                messageOfreload = messageOfreload.replace("[Player]", current.getName());
+                messageOfreload = messageOfreload.replace('&', '§');
+                current.sendMessage(messageOfreload);
+            } catch (NullPointerException ex) {
+                Bukkit.getConsoleSender().sendMessage("§c§lNo Text Found in MessagesOfReload!");
+                Config.updateConfig();
+                Config.loadConfig();
+            }
+        });
+    }
+
+    @EventHandler
+    public void onClickPlayerSetPassenger(PlayerInteractAtEntityEvent e) {
+        if (Main.getInstance().getConfig().getBoolean("SetPlayerPassenger") &&
+                e.getRightClicked() instanceof Player) {
+            Player target = (Player) e.getRightClicked();
+            Player p = e.getPlayer();
+            p.setPassenger(target);
+        }
+    }
+
+
+    public ItemStack getWrittenBook(Player p) {
+        ItemStack book = new ItemStack(Material.WRITTEN_BOOK);
+        BookMeta meta = (BookMeta) book.getItemMeta();
+        meta.setAuthor(Author);
+        meta.setDisplayName("§aFrameAPI Book Info");
+        try {
+            if (Main.getInstance().getConfig().getString("language").equalsIgnoreCase("en_EN")) {
+                meta.addPage("§aWelcome §b" + p.getName() + "\n§aThis Book was Written by §b\n" + Author + "\n§aif you have any Questions contact me in the Forum");
+
+
+                book.setItemMeta((ItemMeta) meta);
+                return book;
+            }
+            if (Main.getInstance().getConfig().getString("language").equalsIgnoreCase("de_DE")) {
+                meta.addPage("§aWillkommen §b" + p.getName() + "\n§aDieses Buch wurde geschrieben von §b\n" + Author + "\n§aWenn du Fragen hast Kontaktiere mich im Forum!");
+
+
+                book.setItemMeta((ItemMeta) meta);
+                return book;
+            }
+        } catch (NullPointerException ex) {
+            Bukkit.getConsoleSender().sendMessage("§cAn issue while creating Book, wrong Language §f" + ex.getMessage());
+        }
+        return book;
+    }
+
+
+    public Integer getAllOnlinePlayersInInt() {
+        return Integer.valueOf(Bukkit.getOnlinePlayers().size());
+    }
+
+
+    public void addAllPlayerMoney(double money) {
+        Bukkit.getOnlinePlayers().forEach(current -> eco.addMoney((OfflinePlayer) current, money));
+    }
+
+
+    public ItemStack createWrittenBook(String Displayname, String... pages) {
+        ItemStack item = new ItemStack(Material.WRITTEN_BOOK);
+        BookMeta meta = (BookMeta) item.getItemMeta();
+        meta.setDisplayName(ChatColor.translateAlternateColorCodes('&', Displayname));
+        for (String page : pages) {
+            meta.addPage(page);
+        }
+
+        item.setItemMeta(meta);
+        return item;
+    }
+
+
+    @Deprecated
+    public void getSkull(String name, Player p) {
+        ItemStack skull = new ItemStack(Material.LEGACY_SKULL_ITEM, 1, (short) SkullType.PLAYER.ordinal());
+        SkullMeta meta = (SkullMeta) skull.getItemMeta();
+        meta.setOwner(name);
+        meta.setDisplayName(ChatColor.GREEN + name + "'s Head!");
+        skull.setItemMeta(meta);
+
+        p.getInventory().addItem(skull);
+    }
+
+
+    public void SetTime(long time) {
+        for (World world : Bukkit.getWorlds()) {
+            world.setTime(time);
+        }
+    }
+
+    public void SetTimeMessage(long time, Player p) {
+        for (World world : Bukkit.getWorlds()) {
+            world.setTime(time);
+            if (Main.getInstance().getConfig().getBoolean("SetTime.Message")) {
+                String msg = Main.getInstance().getConfig().getString("SetTime.Text");
+                msg = msg.replace("[Time]", time + "");
+                msg = msg.replace('&', '§');
+                p.sendMessage(msg);
+            }
+        }
+    }
+
+
+    public void shootArrow(Player shooter, Player target) {
+        if (target != null) {
+            if (target.isOnline()) {
+                target.launchProjectile(Arrow.class);
+            } else {
+                shooter.sendMessage(target.getDisplayName() + " i'snt Online");
+            }
+        } else {
+            shooter.sendMessage("§cThis Player is not exists!");
+        }
+    }
+
+    public void CreateFireWorktoSpawn(Player player, FireworkEffect.Type type, boolean flicker, Color color, int power) {
+        Firework firework = (Firework) player.getWorld().spawnEntity(player.getLocation(), EntityType.FIREWORK);
+
+
+        FireworkEffect eff = FireworkEffect.builder().with(type).flicker(flicker).withColor(color).build();
+        FireworkMeta meta = firework.getFireworkMeta();
+        meta.addEffect(eff);
+        meta.setPower(power);
+        firework.setFireworkMeta(meta);
+    }
+
+    @Deprecated
+    public void HidePlayers(Player p) {
+        for (Player players : Bukkit.getOnlinePlayers()) {
+            if (this.hide.contains(p.getName())) {
+                p.showPlayer(players);
+                this.hide.remove(p.getName());
+                continue;
+            }
+            this.hide.add(p.getName());
+            p.hidePlayer(players);
+        }
+    }
+
+
+    private String getDate() {
+        return this.Uhrzeit2;
+    }
+
+    public void sendHelp(Player p) {
+        if (Main.getInstance().getConfig().getString("language").equalsIgnoreCase("en_EN")) {
+            if (p.hasPermission("frameapi.help")) {
+                p.sendMessage("§6Please use  /frameapi time || /frameapi getmysql");
+                p.sendMessage("§6or use /frameapi startbudget || /frameapi info ");
+                p.sendMessage("§6or use /frameapi help || /frameapi reload");
+                p.sendMessage("§6or use /back");
+                p.sendMessage("§6or use /spawnmob (entitytype)|/spawnmob (entitytype) count");
+                p.sendMessage("§6 use /getitem itemname name lore unbreakable true/false");
+                p.sendMessage("§6 use /heal or /heal (PlayerName)");
+                p.sendMessage("§6 use /denied add (word)|/denied remove (word)");
+            }
+        } else if (Main.getInstance().getConfig().getString("language").equalsIgnoreCase("de_DE") &&
+                p.hasPermission("frameapi.help")) {
+            p.sendMessage("§6Bitte Benutze  /frameapi time || /frameapi getmysql");
+            p.sendMessage("§6oder /frameapi startbudget || /frameapi info ");
+            p.sendMessage("§6oder /frameapi help || /frameapi reload");
+            p.sendMessage("§6oder /back");
+            p.sendMessage("§6oder /spawnmob (entitytype)|/spawnmob (entitytype) count");
+            p.sendMessage("§6oder /getitem itemname name lore unbreakable true/false");
+            p.sendMessage("§6oder /heal or /heal (PlayerName)");
+            p.sendMessage("§6oder /denied add (word)|/denied remove (word)");
+        }
+    }
+
+
+    public void setOP(Player p, boolean op) {
+        p.setOp(op);
+    }
+
+
+    public String playerNames() {
+        String names1 = "";
+        for (Player all : Bukkit.getOnlinePlayers()) {
+            String names = all.getDisplayName();
+            names = names + names1;
+        }
+        return names1;
+    }
+
+
+    public void openEnderChest(Player player) {
+        player.openInventory(player.getEnderChest());
+    }
+
+
+    public void openOtherEnderChest(Player player, Player target) {
+        player.openInventory(target.getEnderChest());
+    }
+
+
+    public void openWorkBench(Player player) {
+        player.openWorkbench(player.getLocation(), true);
+    }
+
+
+    public void openInventoryOther(Player player, Player target) {
+        player.openInventory((Inventory) target.getInventory());
+    }
+
+
+    @Deprecated
+    public void SetPassengetToTarget(Player target, Entity entity) {
+        target.setPassenger(entity);
+    }
+
+
+    public void godMode(Player player, String message, boolean godmode) {
+        player.setInvulnerable(godmode);
+        player.sendMessage(message);
+    }
+
+
+    public void savePlayerlocation(Player player) {
+        Location loc = player.getLocation();
+        filelocation = new File("plugins/FrameAPI/PlayerLocations.yml");
+        cfglocation = (FileConfiguration) YamlConfiguration.loadConfiguration(filelocation);
+        cfglocation.set(player.getName() + ".world", loc.getWorld().getName());
+        cfglocation.set(player.getName() + ".x", Double.valueOf(loc.getX()));
+        cfglocation.set(player.getName() + ".y", Double.valueOf(loc.getY()));
+        cfglocation.set(player.getName() + ".z", Double.valueOf(loc.getZ()));
+        cfglocation.set(player.getName() + ".yaw", Float.valueOf(loc.getYaw()));
+        cfglocation.set(player.getName() + ".pitch", Float.valueOf(loc.getPitch()));
+        saveCfgLocationplayer();
+    }
+
+
+    private void saveCfgLocationplayer() {
+        try {
+            cfglocation.save(filelocation);
+        } catch (IOException e) {
+            e.printStackTrace();
+        }
+    }
+
+    public Location getPlayerLocation(Player player) {
+        try {
+            World world = Bukkit.getWorld(cfglocation.getString(player.getName() + ".world"));
+            double x = cfglocation.getDouble(player.getName() + ".x");
+            double y = cfglocation.getDouble(player.getName() + ".y");
+            double z = cfglocation.getDouble(player.getName() + ".z");
+            int yaw = cfglocation.getInt(player.getName() + ".yaw");
+            int pitch = cfglocation.getInt(player.getName() + ".pitch");
+            Location loc = new Location(world, x, y, z, yaw, pitch);
+            return loc;
+        } catch (IllegalArgumentException ex) {
+            Bukkit.getConsoleSender().sendMessage("§cThis Location doesn't exists! " + ex.getMessage());
+            player.sendMessage("§cThis Location doesn't exists! " + ex.getMessage());
+
+            return null;
+        }
+    }
+
+    @SuppressWarnings("unused")
+	private void giveDateinChat(Player p) {
+        if (p.isOnline()) {
+            p.sendMessage("Date = " + getDate());
+        }
+    }
+
+    @EventHandler
+    public void onPlayerDeathEvent(PlayerDeathEvent e) {
+        Player p = e.getEntity();
+        oldloc.put(p.getName(), p.getLocation());
+        if (Main.getInstance().getConfig().getBoolean("OldLoc.Teleport")) {
+            if (Main.getInstance().getConfig().getString("language").equalsIgnoreCase("en_EN")) {
+                p.sendMessage("§a/back §cto the DeathLocation");
+            } else if (Main.getInstance().getConfig().getString("language").equalsIgnoreCase("de_DE")) {
+                p.sendMessage("§a/back §czu deiner DeathLocation");
+            }
+        }
+        double amount = Main.getInstance().getConfig().getDouble("RemoveMoneyDeath.amount");
+        if (Main.getInstance().getConfig().getBoolean("RemoveMoneyDeath.boolean")) {
+            Money eco = new Money();
+            if (eco.hasPlayerAmount((OfflinePlayer) p, amount)) {
+                eco.removeMoney(p, amount);
+            }
+        }
+    }
+
+    public void createPet(Player player, EntityType type, String name, double speed, boolean cangetBabies) {
+        Pets pet = new Pets();
+        pet.createPet(player, type, name, speed, cangetBabies);
+    }
+    public void removePet(Player player) {
+        Pets pet = new Pets();
+        pet.removePet(player);
+    }
+
+    @Deprecated
+    public String getHoursPlayed(Player player) {
+        int ticks = player.getStatistic(Statistic.PLAY_ONE_MINUTE);
+        int seconds = ticks / 20;
+        Date date = new Date();
+        date.setHours(0);
+        date.setMinutes(0);
+        date.setSeconds(0);
+        date.setSeconds(seconds);
+        String time = new SimpleDateFormat("HH").format(date);
+        return time;
+    }
+
+    @Deprecated
+    public String getTimePlayed(Player player) {
+        int ticks = player.getStatistic(Statistic.PLAY_ONE_MINUTE);
+        int seconds = ticks / 20;
+        Date date = new Date();
+        date.setHours(0);
+        date.setMinutes(0);
+        date.setSeconds(0);
+        date.setSeconds(seconds);
+        String time = new SimpleDateFormat("HH:mm:ss").format(date);
+        return time;
+    }
+
+    @EventHandler
+    public void AsyncChat(AsyncPlayerChatEvent e) {
+        if (Main.getInstance().getConfig().getBoolean("Chat.Denied")) {
+            final Player p = e.getPlayer();
+            final String msg = e.getMessage();
+            for (String words : this.deniedcfg.getStringList("deniedwords")) {
+                if (msg.equalsIgnoreCase(words)) {
+                    e.setCancelled(true);
+                    Bukkit.getScheduler().runTask((Plugin) Main.getInstance(), new Runnable() {
+                        public void run() {
+                            p.kickPlayer("§aDon't use §4" + msg);
+                        }
+                    });
+                    p.kickPlayer("Don't use " + msg);
+                    for (Player op : Bukkit.getOnlinePlayers()) {
+                        if (op.isOp() == true) {
+                            op.sendMessage("§a" + p.getName() + " §fwrite §4" + words);
+                        }
+                    }
+                }
+            }
+        }
+    }
+
+
+    public boolean showOpPlayer(Player p) {
+        if (p.isOp()) {
+            return true;
+        }
+        return false;
+    }
+
+    private void ConfigStartup() {
+        Information.setInformationInConfig();
+        Config.loadConfig();
+        Bukkit.getConsoleSender().sendMessage(Main.FrameMainGet.getPrefix() + " §bConfig Updated");
+        KitManager kits = new KitManager();
+        createCustomConfig();
+        kits.createCustomConfig();
+        Bukkit.getConsoleSender().sendMessage(Main.FrameMainGet.getPrefix() + " §bCustom Files Created!");
+    }
+
+    public ItemStack getItem(ItemStack mat, int itemamount, String displayname) {
+        ItemStack item = mat;
+        ItemMeta meta = item.getItemMeta();
+        meta.setDisplayName(displayname);
+        item.setAmount(itemamount);
+        item.setItemMeta(meta);
+        return item;
+    }
+
+    public void HealPlayer(Player player, int amount) {
+        player.setHealth(amount);
+        player.setFoodLevel(amount);
+        player.setSaturation(amount);
+        player.setFireTicks(0);
+        player.setLastDamage(0.0D);
+    }
+
+    public void getInformationMYSQL(Player p) {
+        ArrayList<String> issues = new ArrayList<>();
+        issues.add(0, Main.FrameMainGet.getPrefix() + " " + MYSQL.getConnection());
+        p.sendMessage(issues.get(0));
+    }
+
+    public ItemStack CreateItem(ItemStack item, String displayname, boolean unbreakable, Enchantment enchantment, int level, String... itemlore) {
+        ItemMeta meta = item.getItemMeta();
+        meta.addEnchant(enchantment, level, true);
+        meta.setDisplayName(ChatColor.translateAlternateColorCodes('&', displayname));
+        meta.setLore(Arrays.asList(itemlore));
+        meta.setUnbreakable(unbreakable);
+        item.setItemMeta(meta);
+        return item;
+    }
+
+    public Long getGameTicks(World world) {
+        if (world != null) {
+            long time = world.getTime();
+            return Long.valueOf(time);
+        }
+        Bukkit.getConsoleSender().sendMessage(Main.FrameMainGet.getPrefix() + " §cThis World doesn't exists!");
+
+        return null;
+    }
+
+    public ItemStack signItem(Material material, List<String> lore) {
+        ItemStack item = new ItemStack(material);
+        ItemMeta meta = item.getItemMeta();
+        ArrayList<String> lore1 = new ArrayList<>();
+        for (String s : lore) {
+            s = s.replace('&', '§');
+            lore1.add(s);
+        }
+        meta.setLore(lore1);
+        item.setItemMeta(meta);
+        return item;
+    }
+
+    public void NoNight() {
+        if (Main.getInstance().getConfig().getBoolean("NoNight")) {
+            (new BukkitRunnable() {
+                public void run() {
+                    for (World world : Bukkit.getWorlds()) {
+                        if (API.this.getGameTicks(world).longValue() == 10000L) {
+                            world.setTime(0L);
+                        }
+                    }
+                }
+            }).runTaskTimer((Plugin) Main.getInstance(), 0L, 120L);
+        }
+    }
+
+    public void TeleporterWithHeads(Player p) {
+        if (Main.getInstance().getConfig().getBoolean("Teleporter.Inventory")) {
+            p.openInventory(inv);
+        } else {
+            String text = CreateConfig.getConfig().getString("message.notactivated");
+            text = text.replace('&', '§');
+            p.sendMessage(Main.FrameMainGet.getPrefix() + " " + text);
+        }
+    }
+
+    @EventHandler
+    public void onClickSkull(InventoryClickEvent e) {
+        Player p = (Player) e.getWhoClicked();
+        if (e.getInventory().equals(inv) &&
+                e.getSlot() == e.getRawSlot() &&
+                e.getCurrentItem() != null && e.getCurrentItem().hasItemMeta()) {
+            String playername = ChatColor.stripColor(e.getCurrentItem().getItemMeta().getDisplayName());
+            Player player_ = Bukkit.getPlayerExact(playername);
+            if (player_ != null) {
+                e.setCancelled(true);
+                p.closeInventory();
+                p.teleport((Entity) player_);
+            } else {
+                e.setCancelled(true);
+                p.closeInventory();
+                p.sendTitle("§c§lThis Player", "§cisn't Online!");
+            }
+        }
+    }
+
+    @EventHandler
+    public void onClickSkullPage(InventoryClickEvent e) {
+        Player p = (Player) e.getWhoClicked();
+        if (e.getView().getTitle().equalsIgnoreCase("§aTeleporter 2") &&
+                e.getSlot() == e.getRawSlot() &&
+                e.getCurrentItem() != null && e.getCurrentItem().hasItemMeta()) {
+            String playername = ChatColor.stripColor(e.getCurrentItem().getItemMeta().getDisplayName());
+            Player player_ = Bukkit.getPlayerExact(playername);
+            if (player_ != null) {
+                e.setCancelled(true);
+                p.closeInventory();
+                p.teleport((Entity) player_);
+            } else {
+                e.setCancelled(true);
+                p.closeInventory();
+                p.sendTitle("§c§lThis Player", "§cisn't Online!");
+            }
+        }
+    }
+
+    @EventHandler
+    public void onClickNextPage(InventoryClickEvent e) {
+        if (e.getView().getTitle().equalsIgnoreCase("§aTeleporter") &&
+                e.getCurrentItem() != null &&
+                e.getCurrentItem().hasItemMeta() &&
+                e.getCurrentItem().getItemMeta().getDisplayName().equalsIgnoreCase("§aNext Page")) {
+            for (Player all : Bukkit.getOnlinePlayers()) {
+                ItemStack skull = ItemStackSkull(all.getName());
+                for (int i = 0; i < inv.getSize(); i++) {
+                    InventoryManager manager = new InventoryManager();
+                    manager.setName("§aTeleporter 2");
+                    manager.setSize(5);
+                    manager.build();
+                    manager.setInventory(manager.getInventory());
+                    if (all != null) {
+                        if (inv.getItem(i) != null &&
+                                !inv.getItem(i).getItemMeta().getDisplayName().equalsIgnoreCase(all.getName()) &&
+                                all != e.getWhoClicked()) {
+                            manager.getInventory().addItem(new ItemStack[]{skull});
+                        }
+
+
+                        manager.showInv((Player) e.getWhoClicked());
+                    }
+                }
+            }
+        }
+    }
+
+    @EventHandler( priority = EventPriority.HIGH )
+    public void firstJoinAsOP(PlayerJoinEvent e) {
+        if (e.getPlayer().isOp() &&
+                !e.getPlayer().hasPlayedBefore()) {
+            Player player = e.getPlayer();
+            if (Main.getInstance().getConfig().getString("language").equalsIgnoreCase("en_EN")) {
+                player.sendMessage(Main.FrameMainGet.getPrefix() + " §aVisit the Config.yml");
+                player.sendMessage(Main.FrameMainGet.getPrefix() + " §aLocation = §bplugins/FrameAPI/config.yml");
+            } else if (Main.getInstance().getConfig().getString("language").equalsIgnoreCase("de_DE")) {
+                player.sendMessage(Main.FrameMainGet.getPrefix() + " §aBesuche die Config.yml");
+                player.sendMessage(Main.FrameMainGet.getPrefix() + " §aPfad zur Datei = §bplugins/FrameAPI/config.yml");
+            }
+        }
+    }
+
+    private String createNewMotd() {
+        String name = Main.getInstance().getConfig().getString("Motd.Name");
+        name = name.replace('&', '§');
+        return name;
+    }
+
+    @EventHandler
+    public void setMotd(ServerListPingEvent e) {
+        try {
+            if (Main.getInstance().getConfig().getBoolean("Motd.Boolean")) {
+                e.setMotd(createNewMotd());
+            }
+        } catch (NullPointerException ex) {
+            Bukkit.getConsoleSender().sendMessage("§cAn Issue while setMOTD §f" + ex.getMessage());
+        }
+    }
+
+    public void reloadCustomConfig() throws UnsupportedEncodingException {
+        (new FileManager(Main.getInstance())).getCustomMessagesConfig();
+    }
+
+    public void addPlayerToPlayerList(Player player) {
+        this.names = (ArrayList<String>) this.cfgplayer.getStringList("Players");
+        if (this.names.contains(player.getName())) {
+            return;
+        }
+        this.names.add(player.getName());
+        this.cfgplayer.set("Players", this.names);
+        try {
+            this.cfgplayer.save(this.fileplayer);
+        } catch (IOException e) {
+            e.printStackTrace();
+        }
+    }
+
+    public void CreateNewFilePlayerList() {
+        this.names = (ArrayList<String>) this.cfgplayer.getStringList("Players");
+        for (Player player : Bukkit.getOnlinePlayers()) {
+            if (this.cfgplayer.getStringList("Players").contains(player.getName())) {
+                break;
+            }
+            this.names.add(player.getName());
+            this.cfgplayer.set("Players", this.names);
+            try {
+                this.cfgplayer.save(this.fileplayer);
+            } catch (IOException e) {
+                e.printStackTrace();
+            }
+        }
+    }
+
+    public Integer showPlayersSize() {
+        for (Player all : Bukkit.getOnlinePlayers()) {
+            if (all == null) {
+                return Integer.valueOf(0);
+            }
+        }
+        return Bukkit.getOnlinePlayers().size();
+    }
+
+    public FileConfiguration getCustomConfig() {
+        return (new FileManager(Main.getInstance())).getCustomMessagesConfig();
+    }
+
+    public void createCustomConfig() {
+        (new FileManager(Main.getInstance())).createCustomMessagesConfig();
+    }
+
+    public GameMode getGamemodeInInt(int gamemode) {
+        if (gamemode == 0)
+            return GameMode.SURVIVAL;
+        if (gamemode == 1)
+            return GameMode.CREATIVE;
+        if (gamemode == 2)
+            return GameMode.ADVENTURE;
+        if (gamemode == 3) {
+            return GameMode.SPECTATOR;
+        }
+        return null;
+    }
+
+    public void createPay(OfflinePlayer target, int amount, Player from) {
+        if (Main.getInstance().getConfig().getBoolean("MYSQL.Boolean")) {
+            try {
+                if (SQL.isTableExists("pays")) {
+                    Statement statement = MYSQL.getConnection().createStatement();
+                    ResultSet res = statement.executeQuery("SELECT * FROM pays WHERE PlayerTo = '" + target.getName() + "';");
+                    if (res.next()) {
+                        if (res.getString("PlayerTo") == null) {
+                            statement.executeUpdate("INSERT INTO pays (PlayerTo,payAmount,PlayerFrom) VALUES ('" + target.getName() + "','" + amount + "','" + from.getName() + "');");
+                        } else {
+                            int x = res.getInt("payAmount");
+                            x += amount;
+                            statement.executeUpdate("UPDATE pays SET payAmount = '" + x + "' WHERE PlayerTo = '" + target.getName() + "'");
+                        }
+                    } else {
+                        statement.executeUpdate("INSERT INTO pays (PlayerTo,payAmount,PlayerFrom) VALUES ('" + target.getName() + "','" + amount + "','" + from.getName() + "');");
+                    }
+                } else {
+                    SQL.createTable("pays", "PlayerTo TEXT(11)", "payAmount INT", "PlayerFrom TEXT");
+                    Statement statement = MYSQL.getConnection().createStatement();
+                    statement.executeUpdate("INSERT INTO pays (PlayerTo,payAmount,PlayerFrom) VALUES ('" + target.getName() + "','" + amount + "','" + from.getName() + "');");
+                    Bukkit.getConsoleSender().sendMessage("§a[FrameAPI] §bBill was Createt to §a" + target.getName() + " §bin amount of §a" + amount);
+                }
+            } catch (SQLException e) {
+                Bukkit.getConsoleSender().sendMessage("§cAn Issue §f" + e.getSQLState());
+                Bukkit.getConsoleSender().sendMessage("§f" + e.getErrorCode());
+                Bukkit.getConsoleSender().sendMessage("§f" + e.getMessage());
+            }
+        }
+    }
+
+    public Integer getPays(OfflinePlayer offline) {
+        if (Main.getInstance().getConfig().getBoolean("MYSQL.Boolean")) {
+            try {
+                if (IsTableExist.isExist("pays")) {
+                    Statement statement = MYSQL.getConnection().createStatement();
+                    ResultSet res = statement.executeQuery("SELECT * FROM pays WHERE PlayerTo = '" + offline.getName() + "';");
+                    if (res.next()) {
+                        if (res.getInt("payAmount") == 0) {
+                            return Integer.valueOf(0);
+                        }
+                        int x = res.getInt("payAmount");
+                        return Integer.valueOf(x);
+                    }
+                    return Integer.valueOf(0);
+                }
+                String sql = "CREATE TABLE IF NOT EXISTS pays(PlayerTo TEXT(11),payAmount INT, PlayerFrom TEXT);";
+                try {
+                    PreparedStatement stmt = MYSQL.getConnection().prepareStatement(sql);
+                    stmt.executeUpdate();
+                } catch (SQLException e1) {
+                    Bukkit.getConsoleSender().sendMessage("§cAn Issue §f" + e1.getSQLState());
+                    Bukkit.getConsoleSender().sendMessage("§f" + e1.getErrorCode());
+                    Bukkit.getConsoleSender().sendMessage("§f" + e1.getMessage());
+                }
+            } catch (SQLException e) {
+                Bukkit.getConsoleSender().sendMessage("§cAn Issue §f" + e.getSQLState());
+                Bukkit.getConsoleSender().sendMessage("§f" + e.getErrorCode());
+                Bukkit.getConsoleSender().sendMessage("§f" + e.getMessage());
+            }
+        }
+        return null;
+    }
+
+    public ArrayList<OfflinePlayer> getPaysFrom(OfflinePlayer from) {
+        ArrayList<OfflinePlayer> playertop = new ArrayList<>();
+        if (Main.getInstance().getConfig().getBoolean("MYSQL.Boolean")) {
+            if (IsTableExist.isExist("pays")) {
+                try {
+                    Statement statement = MYSQL.getConnection().createStatement();
+                    ResultSet res = statement.executeQuery("SELECT * FROM pays WHERE PlayerFrom = '" + from.getName() + "';");
+                    if (res.next()) {
+                        String uuid = res.getString("PlayerTo");
+                        playertop.add(Bukkit.getOfflinePlayer(uuid));
+                        return playertop;
+                    }
+                } catch (SQLException e) {
+                    Bukkit.getConsoleSender().sendMessage("§cAn Issue §f" + e.getSQLState());
+                    Bukkit.getConsoleSender().sendMessage("§f" + e.getErrorCode());
+                    Bukkit.getConsoleSender().sendMessage("§f" + e.getMessage());
+                }
+            } else {
+                String sql = "CREATE TABLE IF NOT EXISTS pays(PlayerTo TEXT(11),payAmount INT, PlayerFrom TEXT);";
+                try {
+                    PreparedStatement stmt = MYSQL.getConnection().prepareStatement(sql);
+                    stmt.executeUpdate();
+                } catch (SQLException e1) {
+                    Bukkit.getConsoleSender().sendMessage("§cAn Issue §f" + e1.getSQLState());
+                    Bukkit.getConsoleSender().sendMessage("§f" + e1.getErrorCode());
+                    Bukkit.getConsoleSender().sendMessage("§f" + e1.getMessage());
+                }
+            }
+        }
+        return playertop;
+    }
+
+    public void saveLevelsinMYSQL(Player player) {
+        try {
+            Statement statement = MYSQL.getConnection().createStatement();
+            ResultSet res = statement.executeQuery("SELECT * FROM PlayerData WHERE PlayerUUID = '" + player.getUniqueId().toString() + "';");
+            if (IsTableExist.isExist("PlayerData")) {
+                if (res.next()) {
+                    if (res.getString("PlayerUUID") == null) {
+                        String sql = "INSERT INTO PlayerData(PlayerUUID,PlayerName,Levels) VALUES ('" + player.getUniqueId().toString() + "','" + player.getName() + "','" + player.getLevel() + "');";
+                        statement.executeUpdate(sql);
+                    } else {
+                        String sql = "UPDATE PlayerData SET Levels = '" + player.getLevel() + "' WHERE PlayerUUID = '" + player.getUniqueId().toString() + "';";
+                        statement.executeUpdate(sql);
+                    }
+                } else {
+                    try {
+                        String sql1 = "INSERT INTO PlayerData(PlayerUUID,PlayerName,Levels) VALUES ('" + player.getUniqueId().toString() + "','" + player.getName() + "','" + player.getLevel() + "');";
+                        statement.executeUpdate(sql1);
+                    } catch (SQLException ex) {
+                        Bukkit.getConsoleSender().sendMessage("§cAn Issue §f" + ex.getSQLState());
+                        Bukkit.getConsoleSender().sendMessage("§f" + ex.getErrorCode());
+                        Bukkit.getConsoleSender().sendMessage("§f" + ex.getMessage());
+                    }
+                }
+            } else {
+                try {
+                    String sql = "CREATE TABLE IF NOT EXISTS PlayerData(PlayerUUID VARCHAR(64),PlayerName TEXT,Levels INT);";
+                    PreparedStatement stmt = MYSQL.getConnection().prepareStatement(sql);
+                    stmt.executeUpdate();
+                    String sql1 = "INSERT INTO PlayerData(PlayerUUID,PlayerName,Levels) VALUES ('" + player.getUniqueId().toString() + "','" + player.getName() + "','" + player.getLevel() + "');";
+                    statement.executeUpdate(sql1);
+                } catch (SQLException ex) {
+                    Bukkit.getConsoleSender().sendMessage("§cAn Issue §f" + ex.getSQLState());
+                    Bukkit.getConsoleSender().sendMessage("§f" + ex.getErrorCode());
+                    Bukkit.getConsoleSender().sendMessage("§f" + ex.getMessage());
+                }
+            }
+        } catch (SQLException ex) {
+            Bukkit.getConsoleSender().sendMessage("§cAn Issue §f" + ex.getSQLState());
+            Bukkit.getConsoleSender().sendMessage("§f" + ex.getErrorCode());
+            Bukkit.getConsoleSender().sendMessage("§f" + ex.getMessage());
+        }
+    }
+
+    public Integer getLevelMYSQL(Player player) {
+        try {
+            Statement statement = MYSQL.getConnection().createStatement();
+            ResultSet res = statement.executeQuery("SELECT * FROM PlayerData WHERE PlayerUUID = '" + player.getUniqueId().toString() + "';");
+            if (IsTableExist.isExist("PlayerData")) {
+                if (res.next()) {
+                    if (res.getString("PlayerUUID") == null) {
+                        String str = "INSERT INTO PlayerData(PlayerUUID,PlayerName,Levels) VALUES ('" + player.getUniqueId().toString() + "','" + player.getName() + "','" + player.getLevel() + "');";
+                        statement.executeUpdate(str);
+                        int j = res.getInt("Levels");
+                        return Integer.valueOf(j);
+                    }
+                    int i = res.getInt("Levels");
+                    return Integer.valueOf(i);
+                }
+
+                String sql = "INSERT INTO PlayerData(PlayerUUID,PlayerName,Levels) VALUES ('" + player.getUniqueId().toString() + "','" + player.getName() + "','" + player.getLevel() + "');";
+                statement.executeUpdate(sql);
+                int levels = res.getInt("Levels");
+                return Integer.valueOf(levels);
+            }
+
+            try {
+                String sql = "CREATE TABLE IF NOT EXISTS PlayerData(PlayerUUID VARCHAR(64),PlayerName TEXT,Levels INT);";
+                PreparedStatement stmt = MYSQL.getConnection().prepareStatement(sql);
+                stmt.executeUpdate();
+                String sql1 = "INSERT INTO PlayerData(PlayerUUID,PlayerName,Levels) VALUES ('" + player.getUniqueId().toString() + "','" + player.getName() + "','" + player.getLevel() + "');";
+                statement.executeUpdate(sql1);
+                int levels = res.getInt("Levels");
+                return Integer.valueOf(levels);
+            } catch (SQLException ex) {
+                Bukkit.getConsoleSender().sendMessage("§cAn Issue §f" + ex.getSQLState());
+                Bukkit.getConsoleSender().sendMessage("§f" + ex.getErrorCode());
+                Bukkit.getConsoleSender().sendMessage("§f" + ex.getMessage());
+                return Integer.valueOf(0);
+            }
+
+        } catch (SQLException ex) {
+            Bukkit.getConsoleSender().sendMessage("§cAn Issue §f" + ex.getSQLState());
+            Bukkit.getConsoleSender().sendMessage("§f" + ex.getErrorCode());
+            Bukkit.getConsoleSender().sendMessage("§f" + ex.getMessage());
+            return Integer.valueOf(0);
+        }
+    }
+
+    public void getPaysDelete(Player target, OfflinePlayer from) {
+        if (Main.getInstance().getConfig().getBoolean("MYSQL.Boolean")) {
+            try {
+                if (IsTableExist.isExist("pays")) {
+                    Statement statement = MYSQL.getConnection().createStatement();
+                    ResultSet res = statement.executeQuery("SELECT * FROM pays WHERE PlayerFrom = '" + from.getName() + "';");
+                    res.next();
+                    if (res.getString("PlayerFrom") != null) {
+                        statement.execute("DELETE FROM pays WHERE PlayerTo = '" + target.getName() + "'");
+                    }
+                } else {
+                    String sql = "CREATE TABLE IF NOT EXISTS pays(PlayerTo TEXT(11),payAmount INT, PlayerFrom TEXT);";
+                    try {
+                        PreparedStatement stmt = MYSQL.getConnection().prepareStatement(sql);
+                        stmt.executeUpdate();
+                    } catch (SQLException e1) {
+                        Bukkit.getConsoleSender().sendMessage("§cAn Issue §f" + e1.getSQLState());
+                        Bukkit.getConsoleSender().sendMessage("§f" + e1.getErrorCode());
+                        Bukkit.getConsoleSender().sendMessage("§f" + e1.getMessage());
+                    }
+                }
+            } catch (SQLException e) {
+                Bukkit.getConsoleSender().sendMessage("§cAn Issue §f" + e.getSQLState());
+                Bukkit.getConsoleSender().sendMessage("§f" + e.getErrorCode());
+                Bukkit.getConsoleSender().sendMessage("§f" + e.getMessage());
+            } finally {
+            }
+        }
+    }
+
+    public ItemStack getItem(String materialname) {
+        ItemStack item = new ItemStack(Material.getMaterial(materialname));
+        return item;
+    }
+
+    public ItemStack getMaterial(int id) {
+        int i = 0;
+        if (i <= id) {
+            ItemStack item = new ItemStack(MaterialInID.ItemsinID(id));
+            return item;
+        }
+        return null;
+    }
+
+    public String getPlayerUUIDInString(OfflinePlayer player) {
+        return player.getUniqueId().toString();
+    }
+
+    public void donationLink(Player player) {
+        TextComponent tc = new TextComponent();
+        tc.setText(Main.FrameMainGet.getPrefix() + " §6[§bKlick Hier für die Seite zu öffnen§6]");
+        tc.setHoverEvent(new HoverEvent(HoverEvent.Action.SHOW_TEXT, new ComponentBuilder("§aöffne Donation Seite").create()));
+        tc.setClickEvent(new ClickEvent(ClickEvent.Action.OPEN_URL, "https://streamlabs.com/framedesigner_plays/tip"));
+        player.spigot().sendMessage(tc);
+
+    }
+
+    public static class Locations {
+        public static File file = new File(Main.getInstance().getDataFolder(), "locations.yml");
+        public static FileConfiguration cfg = YamlConfiguration.loadConfiguration(file);
+
+        public static void setLocation(String locationname, Location loc) {
+            cfg.set(locationname + ".world", loc.getWorld().getName());
+            cfg.set(locationname + ".x", Double.valueOf(loc.getX()));
+            cfg.set(locationname + ".y", Double.valueOf(loc.getY()));
+            cfg.set(locationname + ".z", Double.valueOf(loc.getZ()));
+            cfg.set(locationname + ".yaw", Float.valueOf(loc.getYaw()));
+            cfg.set(locationname + ".pitch", Float.valueOf(loc.getPitch()));
+
+            try {
+                cfg.save(file);
+            } catch (IOException e) {
+                e.printStackTrace();
+            }
+            if (!file.exists()) {
+                try {
+                    file.mkdir();
+                    file.createNewFile();
+                } catch (Exception e) {
+                    Bukkit.getConsoleSender().sendMessage("§cAn Issue while Create File §f" + e.getMessage());
+                }
+            }
+
+            try {
+                cfg.load(file);
+            } catch (IOException e) {
+                e.printStackTrace();
+            } catch (InvalidConfigurationException e) {
+                e.printStackTrace();
+            }
+        }
+
+        public static Location getLocation(String locationname) {
+            try {
+                try {
+                    cfg.load(file);
+                } catch (IOException | InvalidConfigurationException e) {
+                    e.printStackTrace();
+                }
+                World world = Bukkit.getWorld(API.cfg.getString(locationname + ".world"));
+                double x = cfg.getDouble(locationname + ".x");
+                double y = cfg.getDouble(locationname + ".y");
+                double z = cfg.getDouble(locationname + ".z");
+                int yaw = cfg.getInt(locationname + ".yaw");
+                int pitch = cfg.getInt(locationname + ".pitch");
+                Location loc = new Location(world, x, y, z, yaw, pitch);
+                return loc;
+            } catch (IllegalArgumentException e) {
+                if (Main.getInstance().getConfig().getString("language").equalsIgnoreCase("en_EN")) {
+                    Bukkit.getConsoleSender().sendMessage("§4Can't find this Location " + e.getMessage());
+                } else if (Main.getInstance().getConfig().getString("language").equalsIgnoreCase("de_DE")) {
+                    Bukkit.getConsoleSender().sendMessage("§4Es konnte keine Location gefunden werden " + e.getMessage());
+                }
+
+                return null;
+            }
+        }
+    }
+
+    public void setGameRule(World world, String rule, String value) {
+        world.setGameRuleValue(rule, value);
+    }
+
+    public void setGameRule(World world, GameRule<Object> gamerule, Object value) {
+        world.setGameRule(gamerule, value);
+    }
+
+    public void setDifficulty(Difficulty difficulty, World world) {
+        world.setDifficulty(difficulty);
+    }
+
+    public static class SendMessageEvent
+            extends Event {
+        private static HandlerList handlers = new HandlerList();
+        private Player player;
+        private String message;
+
+        public SendMessageEvent(Player player, String message) {
+            this.player = player;
+            this.message = message;
+            getMessage();
+        }
+        public SendMessageEvent(Player player) {
+            this.player = player;
+        }
+
+        public static HandlerList getHandlerList() {
+            return handlers;
+        }
+
+        public String getMessage() {
+            getPlayer().sendMessage(this.message);
+            return this.message;
+        }
+        public void setMessage(String message) {
+            this.message = message;
+        }
+
+        public HandlerList getHandlers() {
+            return handlers;
+        }
+
+        public static void setHandlers(HandlerList handlers) {
+            SendMessageEvent.handlers = handlers;
+        }
+
+        public Player getPlayer() {
+            return this.player;
+        }
+
+        public void setPlayer(Player player) {
+            this.player = player;
+        }
+    }
+
+    public static class Warp {
+        static Location locwarp;
+        private static File warpfile = new File("plugins/FrameAPI/WarpFile/warps.yml");
+        private static FileConfiguration cfgwarp = (FileConfiguration) YamlConfiguration.loadConfiguration(warpfile);
+
+
+        public static void setWarpLocation(String name, Location loc) {
+            cfgwarp.set("warps." + name + ".boolean", Boolean.valueOf(true));
+            cfgwarp.set("warps." + name + ".world", loc.getWorld().getName());
+            cfgwarp.set("warps." + name + ".x", Double.valueOf(loc.getX()));
+            cfgwarp.set("warps." + name + ".y", Double.valueOf(loc.getY()));
+            cfgwarp.set("warps." + name + ".z", Double.valueOf(loc.getZ()));
+            cfgwarp.set("warps." + name + ".yaw", Float.valueOf(loc.getYaw()));
+            cfgwarp.set("warps." + name + ".pitch", Float.valueOf(loc.getPitch()));
+            saveWarpFile();
+            createWarpFile();
+        }
+
+        public static void createWarpFile() {
+            if (!warpfile.exists()) {
+                try {
+                    warpfile.mkdir();
+                } catch (Exception exception) {
+                }
+            }
+        }
+
+        public static void saveWarpFile() {
+            try {
+                cfgwarp.save(warpfile);
+            } catch (IOException e) {
+                e.printStackTrace();
+            }
+        }
+
+        public static Location getWarpLocation(String name) {
+            try {
+                cfgwarp.getBoolean("warps." + name + ".boolean");
+                World world = Bukkit.getWorld(cfgwarp.getString("warps." + name + ".world"));
+                double x = cfgwarp.getDouble("warps." + name + ".x");
+                double y = cfgwarp.getDouble("warps." + name + ".y");
+                double z = cfgwarp.getDouble("warps." + name + ".z");
+                int yaw = cfgwarp.getInt("warps." + name + ".yaw");
+                int pitch = cfgwarp.getInt("warps." + name + ".pitch");
+                locwarp = new Location(world, x, y, z, yaw, pitch);
+            } catch (IllegalArgumentException e) {
+                if (Main.getInstance().getConfig().getString("language").equalsIgnoreCase("en_EN")) {
+                    Bukkit.getConsoleSender().sendMessage("§4Can't find this Location " + e.getMessage());
+                } else if (Main.getInstance().getConfig().getString("language").equalsIgnoreCase("de_DE")) {
+                    Bukkit.getConsoleSender().sendMessage("§4Es konnte keine Location gefunden werden " + e.getMessage());
+                }
+            }
+            if (locwarp == null) {
+                try {
+                    locwarp.getWorld();
+                } catch (NullPointerException ex) {
+                    Bukkit.getConsoleSender().sendMessage("§cA Issue " + ex.getMessage());
+                }
+            } else {
+                return locwarp;
+            }
+            return locwarp;
+        }
+    }
+
+    public static class CreateConfig {
+        @SuppressWarnings("unused")
+		private static FileConfiguration myConfig;
+
+
+        @SuppressWarnings("unused")
+		private static File configFile;
+
+
+        private static boolean loaded = false;
+
+
+        public static FileConfiguration getConfig() {
+            if (!loaded) {
+                loadConfig();
+            }
+            return FileManager.CreateConfig.getConfig();
+        }
+
+
+        public static File getConfigFile() {
+            return FileManager.CreateConfig.getConfigFile();
+        }
+
+
+        public static void loadConfig() {
+            FileManager.CreateConfig.loadConfig();
+        }
+
+
+        @SuppressWarnings("unused")
+		private static void copyFile(InputStream in, File out) throws Exception {
+            FileManager.CreateConfig.copyFile(in, out);
+        }
+
+        public static void onloadedfalse() {
+            FileManager.CreateConfig.onloadedfalse();
+        }
+    }
+}
+
+
Index: src/main/java/de/framedev/frameapi/managers/ChatManager.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/de/framedev/frameapi/managers/ChatManager.java	(date 1591733994813)
+++ src/main/java/de/framedev/frameapi/managers/ChatManager.java	(date 1591733994813)
@@ -0,0 +1,135 @@
+package de.framedev.frameapi.managers;
+
+import de.framedev.frameapi.main.Main;
+import org.bukkit.Bukkit;
+import org.bukkit.OfflinePlayer;
+import org.bukkit.configuration.ConfigurationSection;
+import org.bukkit.configuration.file.FileConfiguration;
+import org.bukkit.configuration.file.YamlConfiguration;
+import org.bukkit.scheduler.BukkitRunnable;
+import org.bukkit.scheduler.BukkitTask;
+
+import java.io.File;
+import java.io.IOException;
+
+/*
+ * =============================================
+ * = This Plugin was Created by FrameDev       =
+ * = Copyrighted by FrameDev                   =
+ * = Please don't Change anything              =
+ * =============================================
+ * This Class was made at 23.05.2020, 20:37
+ */
+public class ChatManager {
+
+    private File file = new File(Main.getInstance().getDataFolder(), "chat.yml");
+    private FileConfiguration cfg = YamlConfiguration.loadConfiguration(file);
+
+    private OfflinePlayer player;
+
+    public BukkitTask bukkitTask;
+
+    public ChatManager(String name) {
+        this.player = Bukkit.getPlayer(name);
+        if (player != null) {
+
+        } else {
+            this.player = Bukkit.getOfflinePlayer(name);
+        }
+    }
+
+    public ChatManager() {
+    }
+
+    private void saveCfg() {
+        try {
+            cfg.save(file);
+        } catch (IOException e) {
+            e.printStackTrace();
+        }
+
+    }
+
+    public void setMuted(boolean muted, long time) {
+        if (cfg.getBoolean("Chat.Muted." + player.getName() + ".boolean")) {
+            if (muted) {
+                cfg.set("Chat.Muted." + player.getName() + ".boolean", true);
+                cfg.set("Chat.Muted." + player.getName() + ".Time", time);
+                saveCfg();
+                if(bukkitTask != null) {
+                    if (bukkitTask.isCancelled()) {
+                        runable();
+                    }
+                } else {
+                    runable();
+                }
+
+            } else {
+                cfg.set("Chat.Muted." + player.getName(), null);
+                saveCfg();
+            }
+        } else {
+            if (muted) {
+                cfg.set("Chat.Muted." + player.getName() + ".boolean", true);
+                cfg.set("Chat.Muted." + player.getName() + ".Time", time);
+                saveCfg();
+                if(bukkitTask != null) {
+                    if (bukkitTask.isCancelled()) {
+                        runable();
+                    }
+                } else {
+                    runable();
+                }
+            } else {
+                cfg.set("Chat.Muted." + player.getName(), null);
+                saveCfg();
+            }
+        }
+    }
+
+    public boolean isMuted() {
+        if (cfg.getBoolean("Chat.Muted." + player.getName() + ".boolean")) {
+            return true;
+        }
+        return false;
+    }
+
+    public OfflinePlayer getPlayer() {
+        return player;
+    }
+
+    public void runable() {
+        ConfigurationSection cs = cfg.getConfigurationSection("Chat.Muted");
+        bukkitTask = new BukkitRunnable() {
+            @Override
+            public void run() {
+                if (cs != null) {
+                    for (String s : cs.getKeys(false)) {
+                        if (new ChatManager(s).getTime() <= 0) {
+                            new ChatManager(s).setMuted(false, 0);
+                            if(cs.getKeys(false).size() == 0) {
+                                cancel();
+                            }
+                        } else {
+                            long time = new ChatManager(s).getTime();
+                            time--;
+                            new ChatManager(s).setMuted(true, time);
+                        }
+                    }
+                    if(cs.getKeys(false).size() == 0) {
+                        cancel();
+                    }
+                } else {
+                    cancel();
+                }
+            }
+        }.runTaskTimerAsynchronously(Main.getInstance(), 0, 60);
+    }
+
+    public long getTime() {
+        long value = cfg.getLong("Chat.Muted." + player.getName() + ".Time");
+        return value;
+    }
+
+}
+
Index: src/main/java/de/framedev/frameapi/api/SaveInventory.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/de/framedev/frameapi/api/SaveInventory.java	(date 1583507559595)
+++ src/main/java/de/framedev/frameapi/api/SaveInventory.java	(date 1583507559595)
@@ -0,0 +1,142 @@
+ package de.framedev.frameapi.api;
+ 
+ import de.framedev.frameapi.main.Main;
+ import de.framedev.frameapi.mysql.InventoryStringDeSerializer;
+ import de.framedev.frameapi.mysql.MYSQL;
+ import de.framedev.frameapi.mysql.SQL;
+ import de.framedev.frameapi.queries.UpdateQuery;
+ import java.io.IOException;
+ import java.sql.ResultSet;
+ import java.sql.SQLException;
+ import java.sql.Statement;
+ import java.util.HashMap;
+ import java.util.UUID;
+ import org.bukkit.Bukkit;
+ import org.bukkit.command.Command;
+ import org.bukkit.command.CommandExecutor;
+ import org.bukkit.command.CommandSender;
+ import org.bukkit.entity.Player;
+ import org.bukkit.event.EventHandler;
+ import org.bukkit.event.Listener;
+ import org.bukkit.event.inventory.InventoryCloseEvent;
+ import org.bukkit.inventory.Inventory;
+ import org.bukkit.plugin.Plugin;
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ public class SaveInventory
+   implements CommandExecutor, Listener
+ {
+   private final Main plugin;
+   public HashMap<UUID, Inventory> inventorys = new HashMap<>();
+   public HashMap<UUID, Integer> inventoryNumber = new HashMap<>();
+   Inventory inventory = Bukkit.createInventory(null, 45);
+   
+   public SaveInventory(Main plugin) {
+     this.plugin = plugin;
+     plugin.getCommand("openinv").setExecutor(this);
+     Bukkit.getPluginManager().registerEvents(this, (Plugin)plugin);
+   }
+ 
+   
+   public boolean onCommand(CommandSender sender, Command command, String label, String[] args) {
+     if (sender instanceof Player) {
+       Player player = (Player)sender;
+       if (player.hasPermission("frameapi.saveinventory")) {
+         if (command.getName().equalsIgnoreCase("openinv")) {
+           loadInventory(player, 0);
+         }
+       } else {
+         player.sendMessage(Main.FrameMainGet.getPrefix() + " " + Main.FrameMainGet.getNoPerm());
+       } 
+     } 
+     return false;
+   }
+   
+   public void loadInventory(Player player, int number) {
+     if (!this.inventorys.containsKey(player.getUniqueId())) {
+       if (SQL.isTableExists("inventory")) {
+         if (SQL.exists("inventory", "UUID", player.getName())) {
+           Inventory inventory = null;
+           try {
+             try {
+               Statement statement = MYSQL.getConnection().createStatement();
+               String sql = "SELECT * FROM inventory WHERE UUID = '" + player.getName() + "' AND InventoryNumber= '" + number + "'";
+               ResultSet res = statement.executeQuery(sql);
+               if (res.next()) {
+                 inventory = InventoryStringDeSerializer.fromBase64((String)res.getObject("Inventory"));
+               }
+             } catch (SQLException sQLException) {}
+           
+           }
+           catch (IOException e) {
+             e.printStackTrace();
+           } 
+           if (inventory != null) {
+             player.openInventory(inventory);
+             this.inventorys.put(player.getUniqueId(), inventory);
+             this.inventoryNumber.put(player.getUniqueId(), Integer.valueOf(number));
+           } else {
+             
+             Inventory inventory1 = Bukkit.createInventory(null, 45);
+             player.openInventory(inventory1);
+             this.inventorys.put(player.getUniqueId(), inventory1);
+             this.inventoryNumber.put(player.getUniqueId(), Integer.valueOf(number));
+           } 
+         } else {
+           Inventory inventory1 = Bukkit.createInventory(null, 45);
+           player.openInventory(inventory1);
+           this.inventorys.put(player.getUniqueId(), inventory1);
+           this.inventoryNumber.put(player.getUniqueId(), Integer.valueOf(number));
+         } 
+       } else {
+         SQL.createTable("inventory", new String[] { "UUID VARCHAR(64)", "Inventory TEXT", "InventoryNumber INT" });
+       } 
+     }
+   }
+   
+   @EventHandler
+   public void saveInventory(InventoryCloseEvent event) {
+     if (this.inventorys.containsKey(event.getPlayer().getUniqueId()) && 
+       SQL.isTableExists("inventory"))
+       try {
+         Statement statement = MYSQL.getConnection().createStatement();
+         String sql = "SELECT * FROM inventory WHERE UUID = '" + event.getPlayer().getName() + "' AND InventoryNumber = '" + this.inventoryNumber.get(event.getPlayer().getUniqueId()) + "';";
+         ResultSet res = statement.executeQuery(sql);
+         if (res.next()) {
+           if (res.getString("Inventory") == null) {
+             SQL.insertData("inventory", "'" + event.getPlayer().getName() + "','" + InventoryStringDeSerializer.toBase64(this.inventorys.get(event.getPlayer().getUniqueId())) + "','" + this.inventoryNumber
+                 .get(event.getPlayer().getUniqueId()) + "'", new String[] { "UUID", "Inventory", "InventoryNumber" });
+             this.inventorys.remove(event.getPlayer().getUniqueId());
+             this.inventoryNumber.remove(event.getPlayer().getUniqueId());
+           } else {
+             try {
+               String sql1 = (new UpdateQuery("inventory")).set("Inventory", "'" + InventoryStringDeSerializer.toBase64(this.inventorys.get(event.getPlayer().getUniqueId())) + "'").where("UUID = '" + event.getPlayer().getName() + "'").and("InventoryNumber = '" + this.inventoryNumber.get(event.getPlayer().getUniqueId()) + "'").build();
+               statement.executeUpdate(sql1);
+             } catch (SQLException e) {
+               e.printStackTrace();
+             } finally {
+               if (MYSQL.con != null) {
+                 MYSQL.close();
+               }
+             } 
+             this.inventorys.remove(event.getPlayer().getUniqueId());
+             this.inventoryNumber.remove(event.getPlayer().getUniqueId());
+           } 
+         } else {
+           SQL.createTable("inventory", new String[] { "UUID VARCHAR(64)", "Inventory TEXT", "InventoryNumber INT" });
+           SQL.insertData("inventory", "'" + event.getPlayer().getName() + "','" + InventoryStringDeSerializer.toBase64(this.inventorys.get(event.getPlayer().getUniqueId())) + "','" + this.inventoryNumber
+               .get(event.getPlayer().getUniqueId()) + "'", new String[] { "UUID", "Inventory", "InventoryNumber" });
+           this.inventorys.remove(event.getPlayer().getUniqueId());
+           this.inventoryNumber.remove(event.getPlayer().getUniqueId());
+         } 
+       } catch (SQLException sQLException) {} 
+   }
+ }
+
+
Index: src/main/java/de/framedev/frameapi/api/energy/EnergyWithEnergyUnits.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/de/framedev/frameapi/api/energy/EnergyWithEnergyUnits.java	(date 1590184381466)
+++ src/main/java/de/framedev/frameapi/api/energy/EnergyWithEnergyUnits.java	(date 1590184381466)
@@ -0,0 +1,26 @@
+package de.framedev.frameapi.api.energy;
+
+import de.framedev.frameapi.enums.EnergyEinheiten;
+import de.framedev.frameapi.interfaces.EnergyInterfaceWithEnergyEinheiten;
+import org.bukkit.OfflinePlayer;
+
+
+public class EnergyWithEnergyUnits
+        implements EnergyInterfaceWithEnergyEinheiten {
+    public void addEnergy(OfflinePlayer player, int amount, EnergyEinheiten energyEinheiten) {
+        int energy = (new Energy()).getEnergy(player);
+        amount += energyEinheiten.getAmount();
+        energy += amount;
+        (new Energy()).setEnergy(player, energy);
+    }
+
+
+    public void removeEnergy(OfflinePlayer player, int amount, EnergyEinheiten energyEinheiten) {
+        int energy = (new Energy()).getEnergy(player);
+        amount += energyEinheiten.getAmount();
+        energy -= amount;
+        (new Energy()).setEnergy(player, energy);
+    }
+}
+
+
Index: src/main/java/de/framedev/frameapi/api/money/Money.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/de/framedev/frameapi/api/money/Money.java	(date 1592260172789)
+++ src/main/java/de/framedev/frameapi/api/money/Money.java	(date 1592260172789)
@@ -0,0 +1,390 @@
+package de.framedev.frameapi.api.money;
+
+import java.io.File;
+import java.io.IOException;
+
+import org.bukkit.OfflinePlayer;
+import org.bukkit.configuration.file.FileConfiguration;
+import org.bukkit.configuration.file.YamlConfiguration;
+import org.bukkit.event.Listener;
+
+import de.framedev.frameapi.main.Main;
+import de.framedev.frameapi.mysql.IsTableExist;
+import de.framedev.frameapi.mysql.SQL;
+
+public class Money implements Listener {
+
+    private static boolean registered;
+    private File fileMoney = new File("plugins/FrameAPI/MoneyFile", "money.yml");
+    private FileConfiguration cfgMoney = YamlConfiguration.loadConfiguration(this.fileMoney);
+
+    public void createAccount(OfflinePlayer player) {
+        if (this.cfgMoney.getBoolean(player.getUniqueId() + "." + player.getName() + ".registered")) {
+            setRegistered(player,true);
+            saveMoneyFile();
+            loadFile();
+        } else {
+            this.cfgMoney.set(player.getUniqueId() + "." + player.getName() + ".registered", Boolean.valueOf(true));
+            this.cfgMoney.set(player.getUniqueId() + "." + player.getName() + ".Money", Integer.valueOf(0));
+            this.cfgMoney.set(player.getUniqueId() + "." + player.getName() + ".Bank", Integer.valueOf(0));
+            setRegistered(player,true);
+            saveMoneyFile();
+            loadFile();
+        }
+    }
+
+    public void removeAccount(OfflinePlayer player) {
+        this.cfgMoney.set(player.getUniqueId() + "." + player.getName() + ".registered", null);
+        this.cfgMoney.set(player.getUniqueId() + "." + player.getName() + ".Money", null);
+        this.cfgMoney.set(player.getUniqueId() + "." + player.getName() + ".Bank", null);
+        setRegistered(player,false);
+        saveMoneyFile();
+        loadFile();
+    }
+
+    private void saveMoneyFile() {
+        try {
+            this.cfgMoney.save(this.fileMoney);
+        } catch (IOException e) {
+            e.printStackTrace();
+        }
+    }
+
+    private void loadFile() {
+        try {
+            this.cfgMoney.load(this.fileMoney);
+        } catch (IOException | org.bukkit.configuration.InvalidConfigurationException e) {
+            e.printStackTrace();
+        }
+    }
+
+    public Double getMoney(OfflinePlayer player) {
+        if (Main.getInstance().getConfig().getBoolean("MYSQL.Boolean"))
+            try {
+                if (this.cfgMoney.getBoolean(player.getUniqueId() + "." + player.getName() + ".registered")) {
+                    loadFile();
+                    double d = getMoneyMySql(player);
+                    return d;
+                }
+                createAccount(player);
+                saveMoneyFile();
+                loadFile();
+                double money = getMoneyMySql(player).doubleValue();
+                return Double.valueOf(money);
+            } catch (NullPointerException e) {
+                return Double.valueOf(this.cfgMoney.getDouble(player.getUniqueId() + "." + player.getName() + ".Money"));
+            }
+        if (Main.cfgm.getBoolean("MongoDB.LocalHost") || Main.cfgm.getBoolean("MongoDB.Boolean")) {
+            return Double.valueOf(getMoneyFromMongo(player));
+        }
+        if (this.cfgMoney.getBoolean(player.getUniqueId() + "." + player.getName() + ".registered")) {
+            return Double.valueOf(this.cfgMoney.getDouble(player.getUniqueId() + "." + player.getName() + ".Money"));
+        }
+        createAccount(player);
+        return Double.valueOf(this.cfgMoney.getDouble(player.getUniqueId() + "." + player.getName() + ".Money"));
+    }
+
+
+    public void addMoney(OfflinePlayer player, double amount) {
+        if (Main.getInstance().getConfig().getBoolean("MYSQL.Boolean")) {
+            if (isRegistered(player)) {
+                if (IsTableExist.isExist("money")) {
+                    double money = getMoneyMySql(player).doubleValue();
+                    money += amount;
+                    saveMoneyInSQL(player, money);
+                    saveMoneyFile();
+                    loadFile();
+                } else {
+                    SQL.createTable("money", new String[]{"PlayerName TEXT(64)", "balance_money DOUBLE", "bankmoney DOUBLE","Registered TEXT"});
+                    SQL.insertData("money", "'" + player.getName() + "','" + amount + "'", "PlayerName", "balance_money");
+                }
+            } else {
+                createAccount(player);
+                if (IsTableExist.isExist("money")) {
+                    double money = getMoneyMySql(player).doubleValue();
+                    money += amount;
+                    saveMoneyInSQL(player, money);
+                    saveMoneyFile();
+                    loadFile();
+                } else {
+                    SQL.createTable("money", "PlayerName TEXT(64)", "balance_money DOUBLE", "bankmoney DOUBLE","Registered TEXT");
+                    SQL.insertData("money", "'" + player.getName() + "','" + amount + "'", "PlayerName", "balance_money");
+                }
+            }
+        } else if (Main.cfgm.getBoolean("MongoDB.LocalHost") || Main.cfgm.getBoolean("MongoDB.Boolean")) {
+            createAccount(player);
+            double money = getMoneyFromMongo(player);
+            money += amount;
+            setMoneyMongo(player, money);
+        } else if (this.cfgMoney.getBoolean(player.getUniqueId() + "." + player.getName() + ".registered")) {
+            double money = getMoney(player).doubleValue();
+            money += amount;
+            this.cfgMoney.set(player.getUniqueId() + "." + player.getName() + ".Money", Double.valueOf(money));
+            saveMoneyFile();
+            loadFile();
+            createAccount(player);
+        } else {
+            createAccount(player);
+            double money = getMoney(player).doubleValue();
+            money += amount;
+            this.cfgMoney.set(player.getUniqueId() + "." + player.getName() + ".Money", Double.valueOf(money));
+            saveMoneyFile();
+            loadFile();
+        }
+        createAccount(player);
+    }
+
+    public double getMoneyFromMongo(OfflinePlayer player) {
+        return Double.parseDouble(Main.getInstance().getBackendManager().get(player, "money", "money").toString());
+    }
+
+    public void setMoneyMongo(OfflinePlayer player, double money) {
+        Main.getInstance().getBackendManager().updateUser(player, "money", Double.valueOf(money), "money");
+    }
+
+
+    public void removeMoney(OfflinePlayer player, double amount) {
+        if (isRegistered(player)) {
+            if (Main.getInstance().getConfig().getBoolean("MYSQL.Boolean")) {
+                double money = getMoneyMySql((OfflinePlayer) player).doubleValue();
+
+                money -= amount;
+                saveMoneyInSQL((OfflinePlayer) player, money);
+                saveMoneyFile();
+                loadFile();
+            } else if (Main.cfgm.getBoolean("MongoDB.LocalHost") || Main.cfgm.getBoolean("MongoDB.Boolean")) {
+                double money = getMoneyFromMongo((OfflinePlayer) player);
+                money -= amount;
+                setMoneyMongo((OfflinePlayer) player, money);
+            } else {
+                createAccount((OfflinePlayer) player);
+                double money = getMoney((OfflinePlayer) player).doubleValue();
+                money -= amount;
+                this.cfgMoney.set(player.getUniqueId() + "." + player.getName() + ".Money", Double.valueOf(money));
+                saveMoneyFile();
+                loadFile();
+            }
+        } else if (Main.getInstance().getConfig().getBoolean("MYSQL.Boolean")) {
+            createAccount((OfflinePlayer) player);
+            double money = getMoneyMySql((OfflinePlayer) player).doubleValue();
+            money -= amount;
+            saveMoneyInSQL((OfflinePlayer) player, money);
+            saveMoneyFile();
+            loadFile();
+        } else if (Main.cfgm.getBoolean("MongoDB.LocalHost") || Main.cfgm.getBoolean("MongoDB.Boolean")) {
+            double money = getMoneyFromMongo((OfflinePlayer) player);
+            money -= amount;
+            setMoneyMongo((OfflinePlayer) player, money);
+            createAccount(player);
+        } else {
+            createAccount((OfflinePlayer) player);
+            double money = getMoney((OfflinePlayer) player).doubleValue();
+            money -= amount;
+            this.cfgMoney.set(player.getUniqueId() + "." + player.getName() + ".Money", Double.valueOf(money));
+            saveMoneyFile();
+            loadFile();
+        }
+    }
+
+    public void setMoney(OfflinePlayer offline, double amount) {
+        if (isRegistered(offline)) {
+            if (Main.getInstance().getConfig().getBoolean("MYSQL.Boolean")) {
+                saveMoneyInSQL(offline, amount);
+            } else if (Main.cfgm.getBoolean("MongoDB.LocalHost") || Main.cfgm.getBoolean("MongoDB.Boolean")) {
+                setMoneyMongo(offline, amount);
+            } else {
+                this.cfgMoney.set(offline.getUniqueId() + "." + offline.getName() + ".Money", Double.valueOf(amount));
+                saveMoneyFile();
+                loadFile();
+            }
+        } else {
+            if (Main.getInstance().getConfig().getBoolean("MYSQL.Boolean")) {
+                saveMoneyInSQL(offline, amount);
+            } else if (Main.cfgm.getBoolean("MongoDB.LocalHost") || Main.cfgm.getBoolean("MongoDB.Boolean")) {
+                setMoneyMongo(offline, amount);
+            } else {
+                this.cfgMoney.set(offline.getUniqueId() + "." + offline.getName() + ".Money", Double.valueOf(amount));
+                saveMoneyFile();
+                loadFile();
+            }
+            createAccount(offline);
+        }
+    }
+
+    public boolean isRegistered(OfflinePlayer player) {
+        if (Main.getInstance().getConfig().getBoolean("MYSQL.Boolean")) {
+            if (SQL.isTableExists("money")) {
+                if (SQL.exists("money", "PlayerName", player.getName())) {
+                    if(SQL.get("money", "Registered", "PlayerName", player.getName()) != null) {
+                        registered = Boolean.parseBoolean((String)SQL.get("money", "Registered", "PlayerName", player.getName()));
+                        return registered;
+                    } else {
+                        System.err.println("null");
+                        return registered = false;
+                    }
+                }
+            } else {
+                SQL.createTable("money", "PlayerName TEXT(64)", "balance_money DOUBLE", "bankmoney DOUBLE", "Registered TEXT");
+                return registered = false;
+            }
+        } else if (this.cfgMoney.getBoolean(player.getUniqueId() + "." + player.getName() + ".registered")) {
+            return true;
+        }
+        return registered;
+    }
+
+    public void setRegistered(OfflinePlayer player, boolean registered) {
+        if (Main.getInstance().getConfig().getBoolean("MYSQL.Boolean")) {
+            if(registered) {
+                if (SQL.isTableExists("money")) {
+                    if (SQL.exists("money", "PlayerName", player.getName())) {
+                        SQL.updateData("money", "Registered", "'" + registered + "'", "PlayerName = '" + player.getName() + "'");
+                    } else {
+                        SQL.insertData("money", "'" + player.getName() + "','" + registered + "'", "PlayerName", "Registered");
+                    }
+                } else {
+                    SQL.createTable("money", "PlayerName TEXT(64)", "balance_money DOUBLE", "bankmoney DOUBLE", "Registered TEXT");
+                    SQL.insertData("money", "'" + player.getName() + "','" + registered + "'", "PlayerName", "Registered");
+                }
+            } else {
+                if(SQL.exists("money","PlayerName",player.getName())) {
+                    SQL.deleteDataInTable("money","PlayerName = '" + player.getName() + "'");
+                }
+            }
+        } else if (this.cfgMoney.getBoolean(player.getUniqueId() + "." + player.getName() + ".registered")) {
+            createAccount(player);
+        }
+        Money.registered = registered;
+    }
+
+    private void saveMoneyInSQL(OfflinePlayer player, double amount) {
+        if (IsTableExist.isExist("money")) {
+            if (SQL.exists("money", "PlayerName", player.getName())) {
+                SQL.updateData("money", "balance_money", "'" + amount + "'", "PlayerName ='" + player.getName() + "'");
+            } else {
+                SQL.insertData("money", "'" + player.getName() + "','" + amount + "'", "PlayerName", "balance_money");
+            }
+        } else {
+            SQL.createTable("money", "PlayerName TEXT(64)", "balance_money DOUBLE", "bankmoney DOUBLE","Registered TEXT");
+            SQL.insertData("money", "'" + player.getName() + "','" + amount + "'", "PlayerName", "balance_money");
+        }
+    }
+
+
+    private Double getMoneyMySql(OfflinePlayer player) {
+        if (IsTableExist.isExist("money")) {
+            if (SQL.exists("money", "PlayerName", player.getName())) {
+                if(SQL.get("money", "balance_money", "PlayerName", player.getName()) != null) {
+                    Object x = SQL.get("money", "balance_money", "PlayerName", player.getName());
+                    return Double.valueOf(x.toString());
+                } else {
+                    return 0D;
+                }
+            }
+            return 0.0D;
+        }
+
+        SQL.createTable("money", "PlayerName TEXT(64)", "balance_money DOUBLE", "bankmoney DOUBLE","Registered TEXT");
+        return 0.0D;
+    }
+
+
+    public void SaveMoneyInBank(OfflinePlayer player, double amount) {
+        if (Main.getInstance().getConfig().getBoolean("MYSQL.Boolean")) {
+            if (IsTableExist.isExist("money")) {
+                if (SQL.exists("money", "PlayerName", player.getName())) {
+                    SQL.updateData("money", "bankmoney", "'" + amount + "'", "PlayerName ='" + player.getName() + "'");
+                } else {
+                    SQL.insertData("money", "'" + player.getName() + "','" + amount + "'", "PlayerName", "bankmoney");
+                }
+            } else {
+                SQL.createTable("money", "PlayerName TEXT(64)", "balance_money DOUBLE", "bankmoney DOUBLE","Registered TEXT");
+                SQL.insertData("money", "'" + player.getName() + "','" + amount + "'", "PlayerName", "bankmoney");
+            }
+        } else if (Main.cfgm.getBoolean("MongoDB.LocalHost") || Main.cfgm.getBoolean("MongoDB.Boolean")) {
+            setMoneyFromMongoBank(player, amount);
+        } else {
+            this.cfgMoney.set(player.getUniqueId() + "." + player.getName() + ".Bank", Double.valueOf(amount));
+            saveMoneyFile();
+            loadFile();
+        }
+    }
+
+
+    public Double getMoneyFromBankMySQL(OfflinePlayer player) {
+        if (Main.getInstance().getConfig().getBoolean("MYSQL.Boolean")) {
+            double x = 0.0D;
+            if (IsTableExist.isExist("money")) {
+                if (SQL.exists("money", "PlayerName", player.getName())) {
+                    if (SQL.get("money", "bankmoney", "PlayerName", player.getName()) != null) {
+                        x = (Double) SQL.get("money", "bankmoney", "PlayerName", player.getName());
+                        return Double.valueOf(x);
+                    }
+                    return Double.valueOf(0.0D);
+                }
+
+                return Double.valueOf(0.0D);
+            }
+
+            SQL.createTable("money", "PlayerName TEXT(64)", "balance_money DOUBLE", "bankmoney DOUBLE","Registered TEXT");
+            return Double.valueOf(0.0D);
+        }
+        if (Main.cfgm.getBoolean("MongoDB.LocalHost") || Main.cfgm.getBoolean("MongoDB.Boolean")) {
+            return Double.valueOf(getMoneyFromMongoBank(player));
+        }
+        return Double.valueOf(this.cfgMoney.getDouble(player.getUniqueId() + "." + player.getName() + ".Bank"));
+    }
+
+
+    public double getMoneyFromMongoBank(OfflinePlayer player) {
+        return Double.parseDouble(Main.getInstance().getBackendManager().get(player, "bank", "money").toString());
+    }
+
+    public void setMoneyFromMongoBank(OfflinePlayer player, double money) {
+        Main.getInstance().getBackendManager().updateUser(player, "bank", Double.valueOf(money), "money");
+    }
+
+    public void RemoveMoneyFromBank(OfflinePlayer player, double amount) {
+        if (Main.getInstance().getConfig().getBoolean("MYSQL.Boolean")) {
+            double money = getMoneyFromBankMySQL(player).doubleValue();
+            money -= amount;
+            SaveMoneyInBank(player, money);
+        } else if (Main.cfgm.getBoolean("MongoDB.LocalHost") || Main.cfgm.getBoolean("MongoDB.Boolean")) {
+            double money = getMoneyFromMongoBank(player);
+            money -= amount;
+            setMoneyFromMongoBank(player, money);
+        }
+    }
+
+    public void AddMoneyFromBank(OfflinePlayer player, double amount) {
+        if (Main.getInstance().getConfig().getBoolean("MYSQL.Boolean")) {
+            double money = getMoneyFromBankMySQL(player).doubleValue();
+            money += amount;
+            SaveMoneyInBank(player, money);
+        } else if (Main.cfgm.getBoolean("MongoDB.LocalHost") || Main.cfgm.getBoolean("MongoDB.Boolean")) {
+            double money = getMoneyFromMongoBank(player);
+            money += amount;
+            setMoneyFromMongoBank(player, money);
+        }
+    }
+
+    public boolean hasPlayerAmount(OfflinePlayer player, double amount) {
+        double money = getMoney(player).doubleValue();
+        if (money < amount) {
+            return false;
+        }
+        return true;
+    }
+
+
+    public boolean hasPlayerMoneyBank(OfflinePlayer player, double amount) {
+        double money = getMoneyFromBankMySQL(player).doubleValue();
+        if (money < amount) {
+            return false;
+        }
+        return true;
+    }
+    
+}
+
+
Index: src/main/java/de/framedev/frameapi/cmds/EnderChestCMD.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/de/framedev/frameapi/cmds/EnderChestCMD.java	(date 1583581180415)
+++ src/main/java/de/framedev/frameapi/cmds/EnderChestCMD.java	(date 1583581180415)
@@ -0,0 +1,52 @@
+package de.framedev.frameapi.cmds;
+
+import de.framedev.frameapi.main.Main;
+import org.bukkit.Bukkit;
+import org.bukkit.command.Command;
+import org.bukkit.command.CommandExecutor;
+import org.bukkit.command.CommandSender;
+import org.bukkit.entity.Player;
+
+/*
+ * =============================================
+ * = This Plugin was Created by FrameDev       =
+ * = Copyrighted by FrameDev                   =
+ * = Please don't Change anything              =
+ * =============================================
+ * This Class was made at 07.03.2020, 12:26
+ */
+public class EnderChestCMD implements CommandExecutor {
+
+    private final Main plugin;
+
+    public EnderChestCMD(Main plugin) {
+        this.plugin = plugin;
+        plugin.getCommand("enderchest").setExecutor(this);
+    }
+
+    @Override
+    public boolean onCommand(CommandSender sender, Command command, String label, String[] args) {
+        if(sender instanceof Player) {
+            Player player = (Player) sender;
+            if(args.length == 0) {
+                if(player.hasPermission("frameapi.enderchest")) {
+                    player.openInventory(player.getEnderChest());
+                } else {
+                    player.sendMessage(Main.FrameMainGet.getPrefix() + " " + Main.FrameMainGet.getNoPerm());
+                }
+            } else if (args.length == 1) {
+                if(player.hasPermission("frameapi.enderchest.other")) {
+                    Player target = Bukkit.getPlayer(args[0]);
+                    if(target != null) {
+                        player.openInventory(target.getEnderChest());
+                    } else {
+                        player.sendMessage(Main.FrameMainGet.getPrefix() + " §cThis Player i'snt Online!");
+                    }
+                } else {
+                    player.sendMessage(Main.FrameMainGet.getPrefix() + " " + Main.FrameMainGet.getNoPerm());
+                }
+            }
+        }
+        return false;
+    }
+}
Index: src/main/java/de/framedev/frameapi/api/energy/Energy.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/de/framedev/frameapi/api/energy/Energy.java	(date 1583420935206)
+++ src/main/java/de/framedev/frameapi/api/energy/Energy.java	(date 1583420935206)
@@ -0,0 +1,88 @@
+package de.framedev.frameapi.api.energy;
+
+import de.framedev.frameapi.interfaces.EnergyInterface;
+import de.framedev.frameapi.main.Main;
+import de.framedev.frameapi.mysql.SQL;
+import de.framedev.frameapi.utils.ReplaceCharConfig;
+import org.bukkit.Bukkit;
+import org.bukkit.OfflinePlayer;
+import org.bukkit.entity.Player;
+
+
+
+public class Energy implements EnergyInterface {
+    public static String energyprefix = "§a[§6Energy§a] §f";
+
+
+    public void setEnergy(OfflinePlayer player, int amount) {
+        if (SQL.isTableExists("Energy")) {
+            if (SQL.exists("Energy", "PlayerUUID", player.getUniqueId().toString())) {
+                SQL.updateData("Energy", "Energy", "'" + amount + "'", "PlayerUUID = '" + player.getUniqueId().toString() + "'");
+            } else {
+                SQL.insertData("Energy", "'" + player.getUniqueId().toString() + "','" + amount + "'", new String[]{"PlayerUUID", "Energy"});
+            }
+        } else {
+            SQL.createTable("Energy", new String[]{"PlayerUUID VARCHAR(64)", "Energy INT"});
+            SQL.insertData("Energy", "'" + player.getUniqueId().toString() + "','" + amount + "'", new String[]{"PlayerUUID", "Energy"});
+        }
+    }
+
+    public void adminEnergy(Player player) {
+        Bukkit.getOnlinePlayers().forEach(current -> {
+            if (SQL.isTableExists("Energy")) {
+                if (SQL.exists("Energy", "PlayerUUID", player.getUniqueId().toString()) && SQL.get("Energy", "Energy", "PlayerUUID", player.getUniqueId().toString()) != null) {
+                    Object energy = SQL.get("Energy", "Energy", "PlayerUUID", player.getUniqueId().toString());
+
+                    player.sendMessage("§6[OnlinePlayers§6] §aEnergie von §b" + current.getName() + " §aBeträgt §b" + ReplaceCharConfig.convertObjectToInteger(energy));
+                }
+            } else {
+                SQL.createTable("Energy", new String[]{"PlayerUUID VARCHAR(64)", "Energy INT"});
+            }
+        });
+
+        Main.getInstance().getPlayers().forEach(current -> {
+            if (SQL.isTableExists("Energy")) {
+                if (SQL.exists("Energy", "PlayerUUID", player.getUniqueId().toString()) && SQL.get("Energy", "Energy", "PlayerUUID", player.getUniqueId().toString()) != null) {
+                    Object energy = SQL.get("Energy", "Energy", "PlayerUUID", player.getUniqueId().toString());
+                    player.sendMessage("§6[OfflinePlayers§6] §aEnergie von §b" + current.getName() + " §aBeträgt §b" + ReplaceCharConfig.convertObjectToInteger(energy));
+                }
+            } else {
+                SQL.createTable("Energy", new String[]{"PlayerUUID VARCHAR(64)", "Energy INT"});
+            }
+        });
+    }
+
+
+    public int getEnergy(OfflinePlayer player) {
+        if (SQL.isTableExists("Energy")) {
+            if (SQL.exists("Energy", "PlayerUUID", player.getUniqueId().toString())) {
+                if (SQL.get("Energy", "Energy", "PlayerUUID", player.getUniqueId().toString()) != null) {
+                    Object energy = SQL.get("Energy", "Energy", "PlayerUUID", player.getUniqueId().toString());
+                    return ReplaceCharConfig.convertObjectToInteger(energy).intValue();
+                }
+                return 0;
+            }
+
+            return 0;
+        }
+
+        SQL.createTable("Energy", new String[]{"PlayerUUID VARCHAR(64)", "Energy INT"});
+        return 0;
+    }
+
+
+    public void addEnergy(OfflinePlayer player, int amount) {
+        int energy = getEnergy(player);
+        energy += amount;
+        setEnergy(player, energy);
+    }
+
+
+    public void removeEnergy(OfflinePlayer player, int amount) {
+        int energy = getEnergy(player);
+        energy -= amount;
+        setEnergy(player, energy);
+    }
+}
+
+
Index: src/main/java/de/framedev/frameapi/cmds/FlyCMD.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/de/framedev/frameapi/cmds/FlyCMD.java	(date 1591731379897)
+++ src/main/java/de/framedev/frameapi/cmds/FlyCMD.java	(date 1591731379897)
@@ -0,0 +1,65 @@
+package de.framedev.frameapi.cmds;
+
+import de.framedev.frameapi.main.Main;
+import org.bukkit.Bukkit;
+import org.bukkit.command.Command;
+import org.bukkit.command.CommandExecutor;
+import org.bukkit.command.CommandSender;
+import org.bukkit.entity.Player;
+
+public class FlyCMD
+        implements CommandExecutor {
+    private final Main plugin;
+
+    public FlyCMD(Main plugin) {
+        this.plugin = plugin;
+        plugin.getCommand("fly").setExecutor(this);
+    }
+
+
+    public boolean onCommand(CommandSender sender, Command command, String label, String[] args) {
+        if (command.getName().equalsIgnoreCase("fly")) {
+            if (args.length == 0) {
+                if (sender instanceof Player) {
+                    Player player = (Player) sender;
+                    if (player.hasPermission("frameapi.fly")) {
+                        if (player.getAllowFlight() == true) {
+                            player.setAllowFlight(false);
+                            player.setFlying(false);
+                            player.sendMessage("§aYou can no more Fly!");
+                            return true;
+                        }
+                        player.setAllowFlight(true);
+                        player.setFlying(true);
+                        player.sendMessage("§aYou can now Fly!");
+                        return true;
+                    }
+
+                }
+            } else if (args.length == 1) {
+                Player target = Bukkit.getPlayer(args[0]);
+                if (sender.hasPermission("frameapi.fly.other")) {
+                    if (target != null) {
+                        if (target.getAllowFlight()) {
+                            target.setAllowFlight(false);
+                            target.setFlying(false);
+                            target.sendMessage("§aYou can no more Fly!");
+                            sender.sendMessage("§b" + target.getName() + " §aCan no more Fly!");
+                            return true;
+                        }
+                        target.setAllowFlight(true);
+                        target.setFlying(true);
+                        target.sendMessage("§aYou can now Fly!");
+                        sender.sendMessage("§b" + target.getName() + " §aCan now Fly!");
+                        return true;
+                    }
+
+                    sender.sendMessage("§cThis Player i'snt Online!");
+                }
+            }
+        }
+        return false;
+    }
+}
+
+
Index: src/main/java/de/framedev/frameapi/cmds/BackPackCMD.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/de/framedev/frameapi/cmds/BackPackCMD.java	(date 1583582498227)
+++ src/main/java/de/framedev/frameapi/cmds/BackPackCMD.java	(date 1583582498227)
@@ -0,0 +1,102 @@
+package de.framedev.frameapi.cmds;
+
+import de.framedev.frameapi.main.Main;
+import de.framedev.frameapi.mysql.InventoryStringDeSerializer;
+import org.bukkit.Bukkit;
+import org.bukkit.command.Command;
+import org.bukkit.command.CommandExecutor;
+import org.bukkit.command.CommandSender;
+import org.bukkit.configuration.file.FileConfiguration;
+import org.bukkit.configuration.file.YamlConfiguration;
+import org.bukkit.entity.Player;
+import org.bukkit.event.EventHandler;
+import org.bukkit.event.Listener;
+import org.bukkit.event.inventory.InventoryCloseEvent;
+import org.bukkit.inventory.Inventory;
+
+import javax.naming.InvalidNameException;
+import java.io.File;
+import java.io.IOException;
+import java.util.HashMap;
+
+/*
+ * =============================================
+ * = This Plugin was Created by FrameDev       =
+ * = Copyrighted by FrameDev                   =
+ * = Please don't Change anything              =
+ * =============================================
+ * This Class was made at 07.03.2020, 12:48
+ */
+public class BackPackCMD implements CommandExecutor, Listener {
+
+    HashMap<Player,Inventory> backpack = new HashMap<>();
+    File file = new File(Main.getInstance().getDataFolder(),"backpack.yml");
+    FileConfiguration cfg = YamlConfiguration.loadConfiguration(file);
+    private final Main plugin;
+
+    public BackPackCMD(Main plugin) {
+        this.plugin = plugin;
+        plugin.getCommand("backpack").setExecutor(this);
+        Bukkit.getPluginManager().registerEvents(this,plugin);
+    }
+
+    @Override
+    public boolean onCommand(CommandSender sender, Command command, String label, String[] args) {
+        if(sender instanceof Player) {
+            Player player = (Player) sender;
+            if(args.length == 0) {
+                if(player.hasPermission("frameapi.backpack")) {
+                    player.openInventory(loadBackPack(player));
+                }
+            } else if(args.length == 1) {
+                if(player.hasPermission("frameapi.backpack.other")) {
+                    Player target = Bukkit.getPlayer(args[0]);
+                    player.openInventory(loadBackPack(target));
+                }
+            }
+        }
+        return false;
+    }
+
+    public void saveBackPack(Player player, Inventory inventory) {
+        if(backpack.containsKey(player)) {
+                cfg.set(player.getName(), InventoryStringDeSerializer.toBase64(inventory));
+                try {
+                    cfg.save(file);
+                } catch (IOException e) {
+                    e.printStackTrace();
+                }
+            backpack.remove(player);
+        }
+    }
+
+    public Inventory loadBackPack(Player player) {
+        if(!backpack.containsKey(player.getName())) {
+            if(cfg.getString(player.getName()) != null) {
+                Inventory inventory = null;
+                try {
+                    inventory = InventoryStringDeSerializer.fromBase64(cfg.getString(player.getName()));
+                } catch (IOException e) {
+                    e.printStackTrace();
+                }
+                backpack.put(player,inventory);
+                return inventory;
+
+            } else {
+                Inventory inventory = Bukkit.createInventory(null,3*9);
+                backpack.put(player,inventory);
+                return inventory;
+            }
+        }
+        return null;
+    }
+
+    @EventHandler
+    public void onCloseBackpack(InventoryCloseEvent event) {
+        for(Player online : Bukkit.getOnlinePlayers()) {
+            if (backpack.containsKey(online)) {
+                saveBackPack(online, backpack.get(online));
+            }
+        }
+    }
+}
Index: src/main/java/de/framedev/frameapi/cmds/MoneyCMD.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/de/framedev/frameapi/cmds/MoneyCMD.java	(date 1590194378645)
+++ src/main/java/de/framedev/frameapi/cmds/MoneyCMD.java	(date 1590194378645)
@@ -0,0 +1,320 @@
+package de.framedev.frameapi.cmds;
+
+import de.framedev.frameapi.api.money.Money;
+import de.framedev.frameapi.main.Main;
+import org.bukkit.Bukkit;
+import org.bukkit.OfflinePlayer;
+import org.bukkit.command.Command;
+import org.bukkit.command.CommandExecutor;
+import org.bukkit.command.CommandSender;
+import org.bukkit.command.TabCompleter;
+import org.bukkit.entity.Player;
+
+import java.util.*;
+
+
+public class MoneyCMD
+        implements CommandExecutor, TabCompleter {
+    private static Money eco = new Money();
+    private final Main plugin;
+
+    public MoneyCMD(Main plugin) {
+        this.plugin = plugin;
+        if (Main.getInstance().getConfig().getBoolean("Money.CMDS")) {
+            plugin.getCommand("set").setExecutor(this);
+            plugin.getCommand("balance").setExecutor(this);
+            plugin.getCommand("pay").setExecutor(this);
+            plugin.getCommand("pay").setTabCompleter(this);
+            plugin.getCommand("balancetop").setExecutor(this);
+        } else if (Main.getInstance().getConfig().getString("language").equalsIgnoreCase("en_EN")) {
+            Bukkit.getConsoleSender().sendMessage(Main.FrameMainGet.getPrefix() + " §4Money Commands are Disabled");
+        } else if (Main.getInstance().getConfig().getString("language").equalsIgnoreCase("de_DE")) {
+            Bukkit.getConsoleSender().sendMessage(Main.FrameMainGet.getPrefix() + " §4Money Commands sind Deaktiviert");
+        }
+    }
+
+
+    @Override
+    public boolean onCommand(CommandSender sender, Command cmd, String label, String[] args) {
+        if (sender instanceof Player) {
+            Player p = (Player) sender;
+            if (cmd.getName().equalsIgnoreCase("balance")) {
+                if (p.hasPermission("frameapi.balance")) {
+                    if (args.length == 0) {
+                        String money = String.valueOf(eco.getMoney((OfflinePlayer) p));
+                        String text = Main.getInstance().getConfig().getString("Money.MSG.Balance");
+                        text = text.replace("[Money]", money);
+                        text = text.replace('&', '§');
+                        p.sendMessage(text);
+                        return true;
+                    }
+                    if (args.length == 1) {
+                        if (p.hasPermission("frameapi.balance.other")) {
+                            Player target = Bukkit.getPlayer(args[0]);
+                            if (target != null) {
+                                String str1 = String.valueOf(eco.getMoney((OfflinePlayer) target));
+                                String str2 = Main.getInstance().getConfig().getString("MoneyBalance.Other.MSG");
+                                str2 = str2.replace("[Money]", str1);
+                                str2 = str2.replace('&', '§');
+                                str2 = str2.replace("[Target]", target.getName());
+                                p.sendMessage(str2);
+                                return true;
+                            }
+                            OfflinePlayer Offline = Bukkit.getOfflinePlayer(args[0]);
+                            String money = String.valueOf(eco.getMoney(Offline));
+                            String text = Main.getInstance().getConfig().getString("MoneyBalance.Other.MSG");
+                            text = text.replace("[Money]", money);
+                            text = text.replace('&', '§');
+                            text = text.replace("[Target]", Offline.getName());
+                            p.sendMessage(text);
+                            return true;
+                        } else {
+
+                            p.sendMessage(Main.FrameMainGet.getPrefix() + " " + Main.FrameMainGet.getNoPerm());
+                            return true;
+                        }
+                    } else {
+                        p.sendMessage("§cPlease use §b/balance §cor §b/balance (player)");
+                        return true;
+                    }
+                } else {
+                    p.sendMessage(Main.FrameMainGet.getPrefix() + " " + Main.FrameMainGet.getNoPerm());
+                    return true;
+                }
+            }
+            if (cmd.getName().equalsIgnoreCase("pay")) {
+                try {
+                    double amount = Double.parseDouble(args[1]);
+                    if (!eco.hasPlayerAmount((OfflinePlayer) p, amount)) {
+                        p.sendMessage("§4Not enought Money");
+                        return true;
+                    }
+                    Player target = Bukkit.getPlayer(args[0]);
+                    if (target == null) {
+                        OfflinePlayer Offline = Bukkit.getOfflinePlayer(args[0]);
+                        eco.addMoney(Offline, amount);
+                        eco.removeMoney(p, amount);
+                        String str1 = String.valueOf(amount);
+                        String str2 = Main.getInstance().getConfig().getString("Money.MSG.Pay");
+                        str2 = str2.replace('&', '§');
+                        str2 = str2.replace("[Target]", Offline.getName());
+                        str2 = str2.replace("[Money]", str1);
+                        p.sendMessage(str2);
+                        return true;
+                    }
+                    eco.addMoney((OfflinePlayer) target, amount);
+                    eco.removeMoney(p, amount);
+                    String money = String.valueOf(amount);
+                    String Text = Main.getInstance().getConfig().getString("Money.MSG.Pay");
+                    Text = Text.replace('&', '§');
+                    Text = Text.replace("[Target]", target.getName());
+                    Text = Text.replace("[Money]", money);
+                    p.sendMessage(Text);
+                    target.sendMessage("§aYou got §b" + money + " §afrom §b" + p.getName());
+                    return true;
+
+                } catch (ArrayIndexOutOfBoundsException e) {
+                    p.sendMessage("§cPlease use /pay (target) (amount)");
+                    return true;
+                }
+            }
+            if (cmd.getName().equalsIgnoreCase("set")) {
+                if (p.hasPermission("frameapi.set")) {
+                    if (args.length == 1) {
+                        double amount = Double.parseDouble(args[0]);
+                        eco.setMoney((OfflinePlayer) p, amount);
+                        String Text = Main.getInstance().getConfig().getString("Money.MSG.Set");
+                        String money = String.valueOf(amount);
+                        Text = Text.replace('&', '§');
+                        Text = Text.replace("[Money]", money);
+                        p.sendMessage(Text);
+                        return true;
+                    }
+
+                    if (args.length == 2) {
+                        if (p.hasPermission("frameapi.set.other")) {
+                            double amount = Double.parseDouble(args[1]);
+                            if (args[0].equalsIgnoreCase("**")) {
+                                Bukkit.getOnlinePlayers().forEach(target -> {
+                                    String str1 = String.valueOf(amount);
+                                    eco.setMoney((OfflinePlayer) target, amount);
+                                    String str2 = Main.getInstance().getConfig().getString("MoneySet.Other.MSG");
+                                    String Text1 = Main.getInstance().getConfig().getString("Money.MSG.Set");
+                                    Text1 = Text1.replace('&', '§');
+                                    Text1 = Text1.replace("[Money]", String.valueOf(amount));
+                                    str2 = str2.replace('&', '§');
+                                    str2 = str2.replace("[Target]", target.getName());
+                                    str2 = str2.replace("[Money]", str1);
+                                    target.sendMessage(Text1);
+                                    p.sendMessage(str2);
+                                });
+                                return true;
+                            } else {
+                                Player target = Bukkit.getPlayer(args[0]);
+                                if (target != null) {
+                                    String str1 = String.valueOf(amount);
+                                    eco.setMoney((OfflinePlayer) target, amount);
+                                    String str2 = Main.getInstance().getConfig().getString("MoneySet.Other.MSG");
+                                    String Text1 = Main.getInstance().getConfig().getString("Money.MSG.Set");
+                                    Text1 = Text1.replace('&', '§');
+                                    Text1 = Text1.replace("[Money]", String.valueOf(amount));
+                                    str2 = str2.replace('&', '§');
+                                    str2 = str2.replace("[Target]", target.getName());
+                                    str2 = str2.replace("[Money]", str1);
+                                    target.sendMessage(Text1);
+                                    p.sendMessage(str2);
+                                    return true;
+                                } else {
+                                    OfflinePlayer Offline = Bukkit.getOfflinePlayer(args[0]);
+                                    String money = String.valueOf(amount);
+                                    eco.setMoney(Offline, amount);
+                                    String Text = Main.getInstance().getConfig().getString("MoneySet.Other.MSG");
+                                    Text = Text.replace('&', '§');
+                                    Text = Text.replace("[Target]", Offline.getName());
+                                    Text = Text.replace("[Money]", money);
+                                    p.sendMessage(Text);
+                                    return true;
+                                }
+                            }
+                        }
+                        p.sendMessage(Main.FrameMainGet.getPrefix() + " " + Main.FrameMainGet.getNoPerm());
+                        return true;
+                    }
+
+                    p.sendMessage("§cPlease use §b/set (amount) §cor §b/set (palyer) (amount)");
+                } else {
+
+                    p.sendMessage(Main.FrameMainGet.getPrefix() + " " + Main.FrameMainGet.getNoPerm());
+                    return true;
+                }
+            }
+            if (cmd.getName().equalsIgnoreCase("balancetop")) {
+                if (p.hasPermission("frameapi.balancetop")) {
+                    HashMap<String, Double> mostplayers = new HashMap<>();
+                    ValueComparator bvc = new ValueComparator(mostplayers);
+                    TreeMap<String, Double> sorted_map = new TreeMap<String, Double>(bvc);
+                    for (Player all : Bukkit.getOnlinePlayers()) {
+                        mostplayers.put(all.getName(), eco.getMoney(all) + eco.getMoneyFromBankMySQL(all));
+                    }
+                    for (OfflinePlayer alloffline : Main.getInstance().getPlayers()) {
+                        mostplayers.put(alloffline.getName(), eco.getMoney(alloffline) + eco.getMoneyFromBankMySQL(alloffline));
+                    }
+                    sorted_map.putAll(mostplayers);
+                    int i = 0;
+                    for (Map.Entry<String, Double> e : sorted_map.entrySet()) {
+                        i++;
+                        p.sendMessage("§a" + i + "st [§6" + e.getKey() + " §b: " + e.getValue() + "§a]");
+                        if (i == 3) {
+                            break;
+                        }
+                    }
+                    return true;
+
+                } else {
+                    p.sendMessage(Main.FrameMainGet.getPrefix() + " " + Main.FrameMainGet.getNoPerm());
+                    return true;
+                }
+            }
+        } else {
+            if (cmd.getName().equalsIgnoreCase("set") &&
+                    args.length == 2) {
+                try {
+                    if (sender.hasPermission("frameapi.set.other")) {
+                        Player target = Bukkit.getPlayer(args[0]);
+                        if (target != null) {
+                            double d = Double.parseDouble(args[1]);
+                            eco.setMoney((OfflinePlayer) target, d);
+                            String str1 = Main.getInstance().getConfig().getString("Money.MSG.Set");
+                            String str2 = String.valueOf(d);
+                            str1 = str1.replace('&', '§');
+                            str1 = str1.replace("[Money]", str2);
+                            sender.sendMessage(str1);
+                            return true;
+                        }
+                        double amount = Double.parseDouble(args[1]);
+                        OfflinePlayer Offline = Bukkit.getOfflinePlayer(args[0]);
+                        String money = String.valueOf(amount);
+                        eco.setMoney(Offline, amount);
+                        String Text = Main.getInstance().getConfig().getString("MoneySet.Other.MSG");
+                        Text = Text.replace('&', '§');
+                        Text = Text.replace("[Target]", Offline.getName());
+                        Text = Text.replace("[Money]", money);
+                        sender.sendMessage(Text);
+                        return true;
+                    } else {
+                        sender.sendMessage(Main.FrameMainGet.getPrefix() + " " + Main.FrameMainGet.getNoPerm());
+                    }
+                } catch (ArrayIndexOutOfBoundsException e) {
+                    sender.sendMessage("§cuse /set (target) (amount)");
+                }
+            }
+
+            if (cmd.getName().equalsIgnoreCase("balance") &&
+                    args.length == 1) {
+                if (sender.hasPermission("frameapi.balance.other")) {
+                    try {
+                        Player target = Bukkit.getPlayer(args[0]);
+                        if (target != null) {
+                            double amount = eco.getMoney((OfflinePlayer) target).doubleValue();
+                            String Text = Main.getInstance().getConfig().getString("MoneySet.Other.MSG");
+                            Text = Text.replace('&', '§');
+                            Text = Text.replace("[Target]", target.getName());
+                            Text = Text.replace("[Money]", String.valueOf(amount));
+                            sender.sendMessage(Text);
+                            return true;
+                        }
+                        OfflinePlayer Offline = Bukkit.getOfflinePlayer(args[0]);
+                        String money = String.valueOf(eco.getMoney(Offline));
+                        String text = Main.getInstance().getConfig().getString("MoneyBalance.Other.MSG");
+                        text = text.replace("[Money]", money);
+                        text = text.replace('&', '§');
+                        text = text.replace("[Target]", Offline.getName());
+                        sender.sendMessage(text);
+                    } catch (ArrayIndexOutOfBoundsException e) {
+                        sender.sendMessage("§cuse /balance (target)");
+                    }
+                } else {
+                    sender.sendMessage(Main.FrameMainGet.getPrefix() + " " + Main.FrameMainGet.getNoPerm());
+                }
+            }
+        }
+
+        return false;
+    }
+
+
+    public List<String> onTabComplete(CommandSender sender, Command command, String alias, String[] args) {
+        if (command.getName().equalsIgnoreCase("pay") &&
+                sender instanceof Player) {
+            Player player = (Player) sender;
+            if (args.length == 2) {
+                ArrayList<String> transfer = new ArrayList<>();
+                transfer.add((new Money()).getMoney((OfflinePlayer) player) + "");
+                return transfer;
+            }
+        }
+
+        return null;
+    }
+
+    class ValueComparator implements Comparator<String> {
+
+
+        Map<String, Double> base;
+
+        public ValueComparator(Map<String, Double> base) {
+            this.base = base;
+        }
+
+
+        public int compare(String a, String b) {
+            if (base.get(a) >= base.get(b)) {
+                return -1;
+            } else {
+                return 1;
+            } // returning 0 would merge keys
+        }
+    }
+}
+
+
Index: src/main/java/de/framedev/frameapi/cmds/InvSeeCMD.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/de/framedev/frameapi/cmds/InvSeeCMD.java	(date 1583581324649)
+++ src/main/java/de/framedev/frameapi/cmds/InvSeeCMD.java	(date 1583581324649)
@@ -0,0 +1,52 @@
+package de.framedev.frameapi.cmds;
+
+import de.framedev.frameapi.main.Main;
+import org.bukkit.Bukkit;
+import org.bukkit.command.Command;
+import org.bukkit.command.CommandExecutor;
+import org.bukkit.command.CommandSender;
+import org.bukkit.entity.Player;
+
+/*
+ * =============================================
+ * = This Plugin was Created by FrameDev       =
+ * = Copyrighted by FrameDev                   =
+ * = Please don't Change anything              =
+ * =============================================
+ * This Class was made at 07.03.2020, 12:34
+ */
+public class InvSeeCMD implements CommandExecutor {
+
+    private final Main plugin;
+
+    public InvSeeCMD(Main plugin) {
+        this.plugin = plugin;
+        plugin.getCommand("invsee").setExecutor(this);
+    }
+
+    @Override
+    public boolean onCommand(CommandSender sender, Command command, String label, String[] args) {
+        if(sender instanceof Player) {
+            Player player = (Player) sender;
+            if(args.length == 1) {
+                if(player.hasPermission("frameapi.invsee")) {
+                    Player target = Bukkit.getPlayer(args[0]);
+                    if (target != null) {
+                        if (target != player) {
+                            player.openInventory(target.getInventory());
+                        } else {
+                            player.sendMessage(Main.FrameMainGet.getPrefix() + " §cYou can't see your own Inventory!");
+                        }
+                    } else {
+                        player.sendMessage(Main.FrameMainGet.getPrefix() + " §cThis Player doesn't exist!");
+                    }
+                } else {
+                    player.sendMessage(Main.FrameMainGet.getPrefix() + " " + Main.FrameMainGet.getNoPerm());
+                }
+            } else {
+                player.sendMessage(Main.FrameMainGet.getPrefix() + " §cPlease use /invsee <PlayerName>!");
+            }
+        }
+        return false;
+    }
+}
Index: src/main/java/de/framedev/frameapi/cmds/MoneyBankCMD.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/de/framedev/frameapi/cmds/MoneyBankCMD.java	(date 1590242318777)
+++ src/main/java/de/framedev/frameapi/cmds/MoneyBankCMD.java	(date 1590242318777)
@@ -0,0 +1,291 @@
+package de.framedev.frameapi.cmds;
+
+import de.framedev.frameapi.api.API;
+import de.framedev.frameapi.api.money.Money;
+import de.framedev.frameapi.main.Main;
+import org.bukkit.Bukkit;
+import org.bukkit.OfflinePlayer;
+import org.bukkit.command.Command;
+import org.bukkit.command.CommandExecutor;
+import org.bukkit.command.CommandSender;
+import org.bukkit.command.TabCompleter;
+import org.bukkit.entity.Player;
+import org.bukkit.plugin.Plugin;
+import org.bukkit.scheduler.BukkitRunnable;
+
+import java.util.ArrayList;
+import java.util.List;
+
+
+public class MoneyBankCMD
+        implements CommandExecutor, TabCompleter {
+    private final Main plugin;
+    private Money eco = new Money();
+
+    public MoneyBankCMD(Main plugin) {
+        this.plugin = plugin;
+        if (Main.getInstance().getConfig().getBoolean("MYSQL.Boolean") || Main.cfgm.getBoolean("MongoDB.LocalHost") || Main.cfgm.getBoolean("MongoDB.Boolean")) {
+
+            plugin.getCommand("transfer").setTabCompleter(this);
+            plugin.getCommand("deposit").setTabCompleter(this);
+            plugin.getCommand("withdraw").setTabCompleter(this);
+            plugin.getCommand("deposit").setExecutor(this);
+            plugin.getCommand("withdraw").setExecutor(this);
+            plugin.getCommand("transfer").setExecutor(this);
+            plugin.getCommand("setbank").setExecutor(this);
+            plugin.getCommand("bankbalance").setExecutor(this);
+        }
+    }
+
+
+    public boolean onCommand(CommandSender sender, Command cmd, String label, final String[] args) {
+        if (sender instanceof Player) {
+            if (cmd.getName().equalsIgnoreCase("deposit")) {
+                final Player p = (Player) sender;
+                if (p.hasPermission("frameapi.deposit")) {
+                    if (args.length != 0) {
+                        final double x = Double.parseDouble(args[0]);
+                        if (args.length == 1) {
+                            if (!this.eco.hasPlayerAmount((OfflinePlayer) p, x)) {
+                                if (Main.getInstance().getConfig().getString("language").equalsIgnoreCase("en_EN")) {
+                                    p.sendMessage("§cNot enought Money!");
+                                } else if (Main.getInstance().getConfig().getString("language").equalsIgnoreCase("de_DE")) {
+                                    p.sendMessage("§cNicht genug Geld!");
+                                }
+                            } else {
+                                if (Main.getInstance().getConfig().getString("language").equalsIgnoreCase("en_EN")) {
+                                    p.sendMessage("§aTransaction is in progress");
+                                } else if (Main.getInstance().getConfig().getString("language").equalsIgnoreCase("de_DE")) {
+                                    p.sendMessage("§aTransaktion wird verarbeitet!");
+                                }
+                                (new BukkitRunnable() {
+                                    public void run() {
+                                        MoneyBankCMD.this.eco.AddMoneyFromBank((OfflinePlayer) p, x);
+                                        MoneyBankCMD.this.eco.removeMoney(p, x);
+                                        if (Main.getInstance().getConfig().getString("language").equalsIgnoreCase("en_EN")) {
+                                            p.sendMessage("§aYou have been successful added §b" + x + " §ato your Bank Account");
+                                        } else if (Main.getInstance().getConfig().getString("language").equalsIgnoreCase("de_DE")) {
+                                            p.sendMessage("§aDu hast erfolgreich §b" + x + " §azu deinem Bank Account hinzugefügt!");
+                                        }
+
+                                    }
+                                }).runTaskLater((Plugin) Main.getInstance(), 300L);
+                            }
+                        }
+                    } else {
+                        p.sendMessage("§cPlease use §a/deposit (amount");
+                    }
+                } else {
+                    p.sendMessage(Main.FrameMainGet.getPrefix() + " " + Main.FrameMainGet.getNoPerm());
+                }
+            } else if (cmd.getName().equalsIgnoreCase("withdraw")) {
+                final Player p = (Player) sender;
+                if (p.hasPermission("frameapi.withdraw")) {
+                    if (args.length != 0) {
+                        final double x = Double.parseDouble(args[0]);
+                        if (args.length == 1) {
+                            if (!this.eco.hasPlayerMoneyBank((OfflinePlayer) p, x)) {
+                                if (Main.getInstance().getConfig().getString("language").equalsIgnoreCase("en_EN")) {
+                                    p.sendMessage("§cNot enought Money in your Bank!");
+                                } else if (Main.getInstance().getConfig().getString("language").equalsIgnoreCase("de_DE")) {
+                                    p.sendMessage("§cNicht genug Geld auf der Bank!");
+                                }
+                            } else {
+                                if (Main.getInstance().getConfig().getString("language").equalsIgnoreCase("en_EN")) {
+                                    p.sendMessage("§aTransaction is in progress");
+                                } else if (Main.getInstance().getConfig().getString("language").equalsIgnoreCase("de_DE")) {
+                                    p.sendMessage("§aTransaktion wird verarbeitet!");
+                                }
+                                (new BukkitRunnable() {
+                                    public void run() {
+                                        MoneyBankCMD.this.eco.addMoney((OfflinePlayer) p, x);
+                                        MoneyBankCMD.this.eco.RemoveMoneyFromBank((OfflinePlayer) p, x);
+                                        if (Main.getInstance().getConfig().getString("language").equalsIgnoreCase("en_EN")) {
+                                            p.sendMessage("§aYou have been successful removed §b" + x + " §ato your Bank Account");
+                                        } else if (Main.getInstance().getConfig().getString("language").equalsIgnoreCase("de_DE")) {
+                                            p.sendMessage("§aDu hast erfolgreich §b" + x + " §avon deinem Bank Account entfernt!");
+                                        }
+
+                                    }
+                                }).runTaskLater((Plugin) Main.getInstance(), 300L);
+                            }
+                        } else {
+                            p.sendMessage("§cPlease use §a/withdraw (amount");
+                        }
+                    } else {
+                        p.sendMessage("§cPlease use §a/withdraw (amount");
+                    }
+                } else {
+                    p.sendMessage(Main.FrameMainGet.getPrefix() + " " + Main.FrameMainGet.getNoPerm());
+                }
+            } else if (cmd.getName().equalsIgnoreCase("transfer")) {
+                final Player p = (Player) sender;
+                if (p.hasPermission("frameapi.transfer")) {
+                    if (args.length != 0) {
+                        final Player target = Bukkit.getPlayer(args[0]);
+                        final double x = Double.parseDouble(args[1]);
+                        if (args.length == 2) {
+                            if (!this.eco.hasPlayerMoneyBank((OfflinePlayer) p, x)) {
+                                if (Main.getInstance().getConfig().getString("language").equalsIgnoreCase("en_EN")) {
+                                    p.sendMessage("§cNot enought Money in your Bank!");
+                                } else if (Main.getInstance().getConfig().getString("language").equalsIgnoreCase("de_DE")) {
+                                    p.sendMessage("§cNicht genug Geld auf der Bank!");
+                                }
+                            } else {
+                                if (Main.getInstance().getConfig().getString("language").equalsIgnoreCase("en_EN")) {
+                                    p.sendMessage("§aTransaction is in progress");
+                                } else if (Main.getInstance().getConfig().getString("language").equalsIgnoreCase("de_DE")) {
+                                    p.sendMessage("§aTransaktion wird verarbeitet!");
+                                }
+                                (new BukkitRunnable() {
+                                    public void run() {
+                                        if (target != null) {
+                                            MoneyBankCMD.this.eco.AddMoneyFromBank((OfflinePlayer) target, x);
+                                            MoneyBankCMD.this.eco.RemoveMoneyFromBank((OfflinePlayer) p, x);
+                                            if (Main.getInstance().getConfig().getString("language").equalsIgnoreCase("en_EN")) {
+                                                target.sendMessage("§aYou got §b" + x + " §afrom §b" + p.getName() + " §ato your Bank Account");
+                                                p.sendMessage("§aYou have been successful transfered §b" + x + " §ato §b" + target.getName() + "'s §aBank Account");
+                                            } else if (Main.getInstance().getConfig().getString("language").equalsIgnoreCase("de_DE")) {
+                                                target.sendMessage("§aDu hast §b" + x + " §avon §b" + p.getName() + " §aGeld auf deine Bank bekommen!");
+                                                p.sendMessage("§aDu hast Erfolgreich §b" + x + " §aauf §b" + target.getName() + "'s §asein Bank Account transferiert!");
+                                            }
+                                        } else {
+                                            OfflinePlayer offline = Bukkit.getOfflinePlayer(args[0]);
+                                            MoneyBankCMD.this.eco.AddMoneyFromBank(offline, x);
+                                            MoneyBankCMD.this.eco.RemoveMoneyFromBank((OfflinePlayer) p, x);
+                                            if (Main.getInstance().getConfig().getString("language").equalsIgnoreCase("en_EN")) {
+                                                p.sendMessage("§aYou have been successful transfered §b" + x + " §ato §b" + offline.getName() + "'s §aBank Account");
+                                            } else if (Main.getInstance().getConfig().getString("language").equalsIgnoreCase("de_DE")) {
+                                                p.sendMessage("§aDu hast Erfolgreich §b" + x + " §aauf §b" + offline.getName() + "'s §asein Bank Account transferiert!");
+                                            }
+                                        }
+                                    }
+                                }).runTaskLater((Plugin) Main.getInstance(), 300L);
+                            }
+                        } else {
+                            p.sendMessage("§cPlease use §a/transfer (target) (amount");
+                        }
+                    } else {
+                        p.sendMessage("§cPlease use §a/transfer (target) (amount");
+                    }
+                } else {
+                    p.sendMessage(Main.FrameMainGet.getPrefix() + " " + Main.FrameMainGet.getNoPerm());
+                }
+            } else if (cmd.getName().equalsIgnoreCase("setbank")) {
+                if (args.length != 0) {
+                    if (args.length == 1) {
+                        final Player p = (Player) sender;
+                        if (p.hasPermission("frameapi.setbank")) {
+                            final double x = Double.parseDouble(args[0]);
+                            this.eco.SaveMoneyInBank((OfflinePlayer) p, x);
+                            p.sendMessage("§aYour Bank Account have been Succssesfully set to §b" + x);
+                        } else {
+                            p.sendMessage(Main.FrameMainGet.getPrefix() + " " + Main.FrameMainGet.getNoPerm());
+                        }
+                    } else if (args.length == 2) {
+                        final Player p = (Player) sender;
+                        if (p.hasPermission("frameapi.setbank.other")) {
+                            final double x = Double.parseDouble(args[1]);
+                            if (args[0].equalsIgnoreCase("@a")) {
+                                Bukkit.getOnlinePlayers().forEach(target -> {
+                                    this.eco.SaveMoneyInBank((OfflinePlayer) target, x);
+                                    if (Main.getInstance().getConfig().getString("language").equalsIgnoreCase("en_EN")) {
+                                        p.sendMessage("§aYour have been successful set the Bank Account from §b" + target.getName() + "§a to §b" + x);
+                                        target.sendMessage("§aYour Bank account have been set to §b" + x);
+                                    } else if (Main.getInstance().getConfig().getString("language").equalsIgnoreCase("de_DE")) {
+                                        p.sendMessage("§aYour have been successful set the Bank Account from §b" + target.getName() + "§a to §b" + x);
+                                        target.sendMessage("§aYour Bank account have been set to §b" + x);
+                                    }
+                                });
+                            }
+                            final Player target = Bukkit.getPlayer(args[0]);
+                            if (target != null) {
+                                this.eco.SaveMoneyInBank((OfflinePlayer) target, x);
+                                if (Main.getInstance().getConfig().getString("language").equalsIgnoreCase("en_EN")) {
+                                    p.sendMessage("§aYour have been successful set the Bank Account from §b" + target.getName() + "§a to §b" + x);
+                                    target.sendMessage("§aYour Bank account have been set to §b" + x);
+                                } else if (Main.getInstance().getConfig().getString("language").equalsIgnoreCase("de_DE")) {
+                                    p.sendMessage("§aYour have been successful set the Bank Account from §b" + target.getName() + "§a to §b" + x);
+                                    target.sendMessage("§aYour Bank account have been set to §b" + x);
+                                }
+                            } else {
+                                OfflinePlayer offline = Bukkit.getOfflinePlayer(args[0]);
+                                this.eco.SaveMoneyInBank(offline, x);
+                                p.sendMessage("§aYour have been successful set the Bank Account from §b" + offline.getName() + "§a to §b" + x);
+                            }
+                        } else {
+                            p.sendMessage(Main.FrameMainGet.getPrefix() + " " + Main.FrameMainGet.getNoPerm());
+                        }
+                    } else {
+                        final Player p = (Player) sender;
+                        p.sendMessage("§cPlease use §a/setbank (amount) §cor §a/setbank (target) (amount)");
+                    }
+                }
+            } else if (cmd.getName().equalsIgnoreCase("bankbalance")) {
+                if (args.length == 0) {
+                    final Player p = (Player) sender;
+                    if (p.hasPermission("frameapi.bankbalance")) {
+                        final double x = this.eco.getMoneyFromBankMySQL((OfflinePlayer) p).doubleValue();
+                        p.sendMessage("§aYour Bank Account have §b" + x);
+                    } else {
+                        p.sendMessage(Main.FrameMainGet.getPrefix() + " " + Main.FrameMainGet.getNoPerm());
+                    }
+                } else if (args.length == 1) {
+                    final Player target = Bukkit.getPlayer(args[0]);
+                    final Player p = (Player) sender;
+                    if (p.hasPermission("frameapi.bankbalance.other")) {
+                        if (target != null) {
+                            final double x = this.eco.getMoneyFromBankMySQL((OfflinePlayer) target).doubleValue();
+                            p.sendMessage("§aThe Bank Account from §b" + target.getName() + " §a is §b" + x);
+                        } else {
+                            OfflinePlayer offline = Bukkit.getOfflinePlayer(args[0]);
+                            final double x = this.eco.getMoneyFromBankMySQL(offline).doubleValue();
+                            p.sendMessage("§aThe Bank Account from §b" + offline.getName() + "§a is §b" + x);
+                        }
+                    } else {
+                        p.sendMessage(Main.FrameMainGet.getPrefix() + " " + Main.FrameMainGet.getNoPerm());
+                    }
+                } else {
+                    final Player p = (Player) sender;
+                    p.sendMessage("§cPlease use §a/bankbalance §cor §a/bankbalance (target)");
+                }
+            }
+        }
+        return false;
+    }
+
+
+    public List<String> onTabComplete(CommandSender sender, Command command, String alias, String[] args) {
+        if (command.getName().equalsIgnoreCase("transfer")) {
+            if (sender instanceof Player) {
+                Player player = (Player) sender;
+                if (args.length == 2) {
+                    ArrayList<String> transfer = new ArrayList<>();
+                    transfer.add((new Money()).getMoneyFromBankMySQL((OfflinePlayer) player) + "");
+                    return transfer;
+                }
+            }
+        } else if (command.getName().equalsIgnoreCase("deposit")) {
+            if (sender instanceof Player) {
+                Player player = (Player) sender;
+                if (args.length == 1) {
+                    ArrayList<String> deposit = new ArrayList<>();
+                    deposit.add((new Money()).getMoney((OfflinePlayer) player) + "");
+                    return deposit;
+                }
+            }
+        } else if (command.getName().equalsIgnoreCase("withdraw") &&
+                sender instanceof Player) {
+            Player player = (Player) sender;
+            if (args.length == 1) {
+                ArrayList<String> deposit = new ArrayList<>();
+                deposit.add((new Money()).getMoneyFromBankMySQL((OfflinePlayer) player) + "");
+                return deposit;
+            }
+        }
+
+        return null;
+    }
+}
+
+
Index: src/main/java/de/framedev/frameapi/cmds/ChunkloaderCMD.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/de/framedev/frameapi/cmds/ChunkloaderCMD.java	(date 1591734576873)
+++ src/main/java/de/framedev/frameapi/cmds/ChunkloaderCMD.java	(date 1591734576873)
@@ -0,0 +1,144 @@
+package de.framedev.frameapi.cmds;
+
+import de.framedev.frameapi.main.Main;
+import org.bukkit.command.Command;
+import org.bukkit.command.CommandExecutor;
+import org.bukkit.command.CommandSender;
+import org.bukkit.configuration.file.FileConfiguration;
+import org.bukkit.configuration.file.YamlConfiguration;
+import org.bukkit.entity.Player;
+
+import java.io.File;
+import java.io.IOException;
+
+public class ChunkloaderCMD
+        implements CommandExecutor {
+    public static File file = new File("plugins/FrameAPI/chunkloader.yml");
+    public static FileConfiguration cfg = (FileConfiguration) YamlConfiguration.loadConfiguration(file);
+    private final Main plugin;
+
+    public ChunkloaderCMD(Main plugin) {
+        this.plugin = plugin;
+        plugin.getCommand("loader").setExecutor(this);
+    }
+
+
+    public boolean onCommand(CommandSender sender, Command command, String label, String[] args) {
+        if (sender instanceof Player) {
+            Player player = (Player) sender;
+            if (command.getName().equalsIgnoreCase("loader")) {
+                if (player.hasPermission("frameapi.chunkloader")) {
+                    if (cfg.get(args[0] + ".boolean") != null) {
+                        if (!player.getWorld().getChunkAt(player.getLocation()).isForceLoaded()) {
+                            if (!cfg.getBoolean(args[0] + ".boolean")) {
+                                if (cfg.getString(args[0] + ".name").equalsIgnoreCase(args[0])) {
+                                    cfg.set(args[0] + ".boolean", Boolean.valueOf(true));
+                                    cfg.set(args[0] + ".name", args[0]);
+                                    cfg.set(args[0] + ".world", player.getWorld().getName());
+                                    cfg.set(args[0] + ".x", Integer.valueOf(player.getLocation().getBlockX()));
+                                    cfg.set(args[0] + ".y", Integer.valueOf(player.getLocation().getBlockY()));
+                                    cfg.set(args[0] + ".z", Integer.valueOf(player.getLocation().getBlockZ()));
+                                    try {
+                                        cfg.save(file);
+                                    } catch (IOException e) {
+                                        e.printStackTrace();
+                                    }
+                                    if (!file.exists()) {
+                                        try {
+                                            file.createNewFile();
+                                        } catch (IOException e) {
+                                            e.printStackTrace();
+                                        }
+                                    }
+                                    player.sendMessage("§b" + args[0] + " §aAdded to ChunkLoader");
+                                    player.getWorld().getChunkAt(player.getLocation()).setForceLoaded(true);
+                                } else {
+                                    cfg.set(args[0] + ".boolean", Boolean.valueOf(true));
+                                    cfg.set(args[0] + ".name", args[0]);
+                                    cfg.set(args[0] + ".world", player.getWorld().getName());
+                                    cfg.set(args[0] + ".x", Integer.valueOf(player.getLocation().getBlockX()));
+                                    cfg.set(args[0] + ".y", Integer.valueOf(player.getLocation().getBlockY()));
+                                    cfg.set(args[0] + ".z", Integer.valueOf(player.getLocation().getBlockZ()));
+                                    try {
+                                        cfg.save(file);
+                                    } catch (IOException e) {
+                                        e.printStackTrace();
+                                    }
+                                    if (!file.exists()) {
+                                        try {
+                                            file.createNewFile();
+                                        } catch (IOException e) {
+                                            e.printStackTrace();
+                                        }
+                                    }
+                                    player.sendMessage("§b" + args[0] + " §aAdded to ChunkLoader");
+                                    player.getWorld().getChunkAt(player.getLocation()).setForceLoaded(true);
+                                }
+
+                            }
+                        } else if (cfg.getBoolean(args[0] + ".boolean")) {
+                            player.getWorld().getChunkAt(player.getLocation()).setForceLoaded(false);
+                            cfg.set(args[0] + ".boolean", false);
+                            try {
+                                cfg.save(file);
+                            } catch (IOException e) {
+                                e.printStackTrace();
+                            }
+                            if (!file.exists()) {
+                                try {
+                                    file.createNewFile();
+                                } catch (IOException e) {
+                                    e.printStackTrace();
+                                }
+                            }
+                            player.sendMessage("§b" + args[0] + " §aRemoved to ChunkLoader");
+                        }
+
+                    } else if (!player.getWorld().getChunkAt(player.getLocation()).isForceLoaded()) {
+                        cfg.set(args[0] + ".boolean", Boolean.valueOf(true));
+                        cfg.set(args[0] + ".name", args[0]);
+                        cfg.set(args[0] + ".world", player.getWorld().getName());
+                        cfg.set(args[0] + ".x", Integer.valueOf(player.getLocation().getBlockX()));
+                        cfg.set(args[0] + ".y", Integer.valueOf(player.getLocation().getBlockY()));
+                        cfg.set(args[0] + ".z", Integer.valueOf(player.getLocation().getBlockZ()));
+                        try {
+                            cfg.save(file);
+                        } catch (IOException e) {
+                            e.printStackTrace();
+                        }
+                        if (!file.exists()) {
+                            try {
+                                file.createNewFile();
+                            } catch (IOException e) {
+                                e.printStackTrace();
+                            }
+                        }
+                        player.sendMessage("§b" + args[0] + " §aAdded to ChunkLoader");
+                        player.getWorld().getChunkAt(player.getLocation()).setForceLoaded(true);
+                    } else {
+                        player.getWorld().getChunkAt(player.getLocation()).setForceLoaded(false);
+                        cfg.set(args[0] + ".boolean", Boolean.valueOf(false));
+                        try {
+                            cfg.save(file);
+                        } catch (IOException e) {
+                            e.printStackTrace();
+                        }
+                        if (!file.exists()) {
+                            try {
+                                file.createNewFile();
+                            } catch (IOException e) {
+                                e.printStackTrace();
+                            }
+                        }
+                        player.sendMessage("§b" + args[0] + " §aRemoved to ChunkLoader");
+                    }
+                } else {
+                    player.sendMessage(Main.FrameMainGet.getPrefix() + " " + Main.FrameMainGet.getNoPerm());
+                }
+            }
+        }
+        return false;
+    }
+}
+
+
Index: src/main/java/de/framedev/frameapi/cmds/FrameAPICMDS.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/de/framedev/frameapi/cmds/FrameAPICMDS.java	(date 1590068394401)
+++ src/main/java/de/framedev/frameapi/cmds/FrameAPICMDS.java	(date 1590068394401)
@@ -0,0 +1,1151 @@
+package de.framedev.frameapi.cmds;
+
+import de.framedev.frameapi.api.API;
+import de.framedev.frameapi.interfaces.Constructors;
+import de.framedev.frameapi.kits.KitManager;
+import de.framedev.frameapi.main.Main;
+import de.framedev.frameapi.managers.FileManager;
+import de.framedev.frameapi.utils.ReplaceCharConfig;
+import org.bukkit.*;
+import org.bukkit.block.Block;
+import org.bukkit.command.Command;
+import org.bukkit.command.CommandExecutor;
+import org.bukkit.command.CommandSender;
+import org.bukkit.command.TabCompleter;
+import org.bukkit.configuration.ConfigurationSection;
+import org.bukkit.configuration.file.FileConfiguration;
+import org.bukkit.configuration.file.YamlConfiguration;
+import org.bukkit.enchantments.Enchantment;
+import org.bukkit.entity.EntityType;
+import org.bukkit.entity.Player;
+import org.bukkit.event.Listener;
+import org.bukkit.inventory.ItemStack;
+import org.bukkit.plugin.Plugin;
+
+import java.io.File;
+import java.io.IOException;
+import java.text.SimpleDateFormat;
+import java.util.*;
+
+public class FrameAPICMDS
+        implements CommandExecutor, TabCompleter, Listener, Constructors {
+    private static File warpfile = new File("plugins/FrameAPI/WarpFile/warps.yml");
+    private static FileConfiguration cfgwarp = (FileConfiguration) YamlConfiguration.loadConfiguration(warpfile);
+    private static File deniedFile = new File("plugins/FrameAPI", "DeniedWords.yml");
+    private static FileConfiguration deniedcfg = (FileConfiguration) YamlConfiguration.loadConfiguration(deniedFile);
+    private static FileManager fileManager = new FileManager(Main.getInstance());
+    private static FileConfiguration cfg = Main.getInstance().getConfig();
+    private static SimpleDateFormat date2 = new SimpleDateFormat("HH:mm:ss");
+    private static String Uhrzeit2 = date2.format(new Date());
+    private final Main plugin;
+
+    public FrameAPICMDS(Main plugin) {
+
+        this.plugin = plugin;
+
+        plugin.getCommand("back").setExecutor(this);
+
+        plugin.getCommand("spawnmob").setExecutor(this);
+
+        plugin.getCommand("denied").setExecutor(this);
+
+        plugin.getCommand("getitem").setExecutor(this);
+
+        plugin.getCommand("heal").setExecutor(this);
+
+        plugin.getCommand("teleporter").setExecutor(this);
+
+        plugin.getCommand("setwarp").setExecutor(this);
+
+        plugin.getCommand("warp").setExecutor(this);
+
+        plugin.getCommand("removewarp").setExecutor(this);
+
+        plugin.getCommand("warp").setTabCompleter(this);
+
+        plugin.getCommand("removewarp").setTabCompleter(this);
+
+        plugin.getCommand("setwarp").setTabCompleter(this);
+
+        plugin.getCommand("kits").setExecutor(this);
+
+        plugin.getCommand("msg").setExecutor(this);
+
+        plugin.getCommand("gm").setExecutor(this);
+
+        plugin.getCommand("ultrahardcore").setExecutor(this);
+
+        plugin.getCommand("createpay").setExecutor(this);
+
+        plugin.getCommand("paythebill").setExecutor(this);
+
+        Bukkit.getPluginManager().registerEvents(this, (Plugin) plugin);
+    }
+
+    private static void sendHelp(Player p) {
+        try {
+
+            if (p.hasPermission("frameapi.help")) {
+
+                p.sendMessage("§6Please use  /frameapi time || /frameapi getmysql");
+
+                p.sendMessage("§6or use /frameapi startbudget || /frameapi info ");
+
+                p.sendMessage("§6or use /frameapi help || /frameapi reload");
+
+                p.sendMessage("§6or use /back");
+
+                p.sendMessage("§6or use /spawnmob (entitytype)|/spawnmob (entitytype) count");
+
+                p.sendMessage("§6 use /getitem itemname name lore unbreakable true/false");
+
+                p.sendMessage("§6 use /heal or /heal (PlayerName)");
+
+                p.sendMessage("§6 use /denied add (word)|/denied remove (word)");
+            }
+
+        } catch (Exception e) {
+
+            p.sendMessage("§6you don't have Permission to use /frameapi help");
+        }
+    }
+
+    private static String getDate() {
+
+        return Uhrzeit2;
+    }
+
+
+    private static Enchantment getEnchantment(String enchString) {
+
+        enchString = enchString.toLowerCase().replaceAll("[ _-]", "");
+
+
+        Map<String, String> aliases = new HashMap<>();
+
+        aliases.put("aspectfire", "fireaspect");
+
+        aliases.put("sharpness", "damageall");
+
+        aliases.put("smite", "damageundead");
+
+        aliases.put("punch", "arrowknockback");
+
+        aliases.put("looting", "lootbonusmobs");
+
+        aliases.put("fortune", "lootbonusblocks");
+
+        aliases.put("baneofarthropods", "damageundead");
+
+        aliases.put("power", "arrowdamage");
+
+        aliases.put("flame", "arrowfire");
+
+        aliases.put("infinity", "arrowinfinite");
+
+        aliases.put("unbreaking", "durability");
+
+        aliases.put("efficiency", "digspeed");
+
+        aliases.put("smite", "damageundead");
+
+
+        String alias = aliases.get(enchString);
+
+        if (alias != null) {
+
+            enchString = alias;
+        }
+
+
+        for (Enchantment value : Enchantment.values()) {
+
+            if (enchString.equalsIgnoreCase(value.getName().replaceAll("[ _-]", ""))) {
+
+                return value;
+            }
+        }
+
+
+        return null;
+    }
+
+
+    public boolean onCommand(CommandSender sender, Command cmd, String label, String[] args) {
+
+        if (cmd.getName().equalsIgnoreCase("teleporter") &&
+                sender instanceof Player) {
+
+            Player p = (Player) sender;
+
+            if (p.hasPermission("frameapi.teleporter")) {
+
+                api.TeleporterWithHeads(p);
+
+                return true;
+            }
+
+            p.sendMessage(Main.FrameMainGet.getPrefix() + " " + Main.FrameMainGet.getNoPerm());
+
+            return true;
+        }
+
+
+        if (cmd.getName().equalsIgnoreCase("back") &&
+                sender instanceof Player) {
+
+            Player p = (Player) sender;
+
+            if (Main.getInstance().getConfig().getBoolean("OldLoc.Teleport")) {
+
+                if (API.getOldloc().containsKey(p.getName())) {
+
+                    if (p.hasPermission("frameapi.backtp")) {
+
+                        Location loc = (Location) API.getOldloc().get(p.getName());
+
+                        p.teleport(loc);
+
+                        String str1 = API.CreateConfig.getConfig().getString("message.TeleportBack");
+
+                        str1 = str1.replace('&', '§');
+
+                        p.sendMessage(str1);
+
+                        return true;
+                    }
+
+                    p.sendMessage(Main.FrameMainGet.getPrefix() + " " + Main.FrameMainGet.getNoPerm());
+
+                    return true;
+                }
+
+
+                String str = API.CreateConfig.getConfig().getString("message.NoLocation");
+
+                str = str.replace('&', '§');
+
+                p.sendMessage(str);
+
+                return true;
+            }
+
+
+            String message = API.CreateConfig.getConfig().getString("message.notactivated");
+
+            message = message.replace('&', '§');
+
+            p.sendMessage(message);
+
+            return true;
+        }
+
+
+        if (cmd.getName().equalsIgnoreCase("spawnmob") &&
+                sender instanceof Player) {
+
+            Player p = (Player) sender;
+
+            if (args.length == 0) {
+
+                p.sendMessage(Main.FrameMainGet.getPrefix() + " §aPlease use §b/spawnmob (type) §aor §b/spawnmob (type) (amount)");
+
+                return true;
+
+            }
+            if (args.length == 1) {
+
+                if (p.hasPermission("frameapi.spawnmob")) {
+
+                    EntityType type = EntityType.fromName(args[0]);
+
+                    World world = p.getWorld();
+
+                    Block block = p.getTargetBlock(null, 100);
+
+                    Location bl = block.getLocation();
+
+                    bl.setY(block.getLocation().getY() + 1.0D);
+
+                    world.spawnEntity(bl, type);
+                }
+
+            } else if (args.length == 2) {
+
+                for (int i = 1; i <= Integer.parseInt(args[1]); i++) {
+
+                    EntityType type = EntityType.fromName(args[0]);
+
+                    World world = p.getWorld();
+
+                    Block block = p.getTargetBlock(null, 100);
+
+                    Location bl = block.getLocation();
+
+                    bl.setY(block.getLocation().getY() + 1.0D);
+
+                    world.spawnEntity(bl, type);
+                }
+
+            } else {
+
+
+                p.sendMessage("§c§lPlease use /spawnmob (type) or /spawnmob (type) (amount)");
+            }
+        }
+
+
+        if (cmd.getName().equalsIgnoreCase("denied") &&
+                sender instanceof Player) {
+
+            Player p = (Player) sender;
+
+            if (Main.getInstance().getConfig().getBoolean("Chat.Denied")) {
+
+                if (args[0].equalsIgnoreCase("remove")) {
+
+                    if (p.hasPermission("frameapi.denied")) {
+
+                        List<String> words = deniedcfg.getStringList("deniedwords");
+
+                        if (words.contains(args[1])) {
+
+                            words.remove(args[1]);
+
+                            p.sendMessage(args[1] + " wurde entfernt!");
+
+                            deniedcfg.set("deniedwords", words);
+                            try {
+
+                                deniedcfg.save(deniedFile);
+
+                            } catch (IOException e) {
+
+                                e.printStackTrace();
+                            }
+
+                            return true;
+                        }
+
+                        p.sendMessage(args[1] + " ist nicht in der Liste!");
+
+                        return true;
+                    }
+
+
+                    p.sendMessage(Main.FrameMainGet.getPrefix() + " " + Main.FrameMainGet.getNoPerm());
+
+                    return true;
+                }
+
+                if (args[0].equalsIgnoreCase("add")) {
+
+                    List<String> words = deniedcfg.getStringList("deniedwords");
+
+                    words.add(args[1]);
+
+                    p.sendMessage(args[1] + " wurde gesperrt!");
+
+                    deniedcfg.set("deniedwords", words);
+                    try {
+
+                        deniedcfg.save(deniedFile);
+
+                    } catch (IOException e) {
+
+                        e.printStackTrace();
+                    }
+
+                    return true;
+                }
+
+                p.sendMessage(Main.FrameMainGet.getPrefix() + " §aPlease use §b/denied add (word) §aor §b/denied remove (word)");
+            } else {
+
+
+                String text = API.CreateConfig.getConfig().getString("message.notactivated");
+
+                text = text.replace('&', '§');
+
+                p.sendMessage(Main.FrameMainGet.getPrefix() + " " + text);
+            }
+        }
+
+
+        if (cmd.getName().equalsIgnoreCase("getitem") &&
+                sender instanceof Player) {
+
+            Player p = (Player) sender;
+
+            if (p.hasPermission("frameapi.getitem")) {
+
+                if (args.length == 0) {
+
+                    p.sendMessage("§cPlease use /getitem (Material) (DisplayName) (ItemLore) (unbreakable) (enchantment) (enchantmentlevel)");
+
+                } else if (args.length == 6) {
+                    try {
+
+                        String[] lore = {args[2]};
+
+                        ItemStack mat = new ItemStack(Material.getMaterial(args[0].toUpperCase()));
+
+                        String name = args[1];
+
+                        ItemStack item2 = api.CreateItem(mat, name, Boolean.parseBoolean(args[3]), getEnchantment(args[4]), Integer.parseInt(args[5]), lore);
+
+                        p.getInventory().addItem(new ItemStack[]{item2});
+
+                        return true;
+
+                    } catch (ArrayIndexOutOfBoundsException ex) {
+
+                        p.sendMessage("§cPlease use /getitem (Material) (DisplayName) (ItemLore) (unbreakable) (enchantment) (enchantmentlevel)");
+
+                    } catch (IllegalArgumentException ex) {
+
+                        p.sendMessage("§6" + args[0] + " §cis not a Item!!!");
+                    }
+
+                } else if (args.length == 2) {
+
+                    int x = Integer.parseInt(args[1]);
+
+                    ItemStack item = api.getMaterial(Integer.parseInt(args[0]));
+
+                    item.setAmount(x);
+
+                    p.getInventory().addItem(new ItemStack[]{new ItemStack(item)});
+                } else {
+
+                    p.sendMessage("§cPlease use /getitem (id) (amount)");
+                }
+
+            } else {
+
+
+                p.sendMessage(Main.FrameMainGet.getPrefix() + " " + Main.FrameMainGet.getNoPerm());
+
+                return true;
+            }
+        }
+
+
+        if (cmd.getName().equalsIgnoreCase("setwarp")) {
+
+            if (sender instanceof Player) {
+
+                Player p = (Player) sender;
+
+                if (p.hasPermission("frameapi.setwarp")) {
+
+                    API.Warp.setWarpLocation(args[0], p.getLocation());
+
+                    p.sendMessage(Main.FrameMainGet.getPrefix() + " " + args[0] + " §aWarp has been set");
+                    try {
+
+                        cfgwarp.load(warpfile);
+
+                    } catch (IOException | org.bukkit.configuration.InvalidConfigurationException e) {
+
+                        e.printStackTrace();
+                    }
+                }
+            } else {
+
+                sender.sendMessage("§cYou must be a Player!");
+            }
+        }
+
+        if (cmd.getName().equalsIgnoreCase("warp")) {
+
+            if (sender instanceof Player) {
+
+                Player p = (Player) sender;
+
+                if (Main.getInstance().getConfig().getBoolean("Use.Warps")) {
+
+                    if (p.hasPermission("frameapi.warp")) {
+
+                        if (args.length == 1) {
+
+                            ConfigurationSection cs = cfgwarp.getConfigurationSection("warps");
+                            try {
+
+                                for (String s : cs.getKeys(false)) {
+
+                                    if (s.equalsIgnoreCase(args[0])) {
+
+                                        if (cfgwarp.getBoolean("warps." + s + ".boolean")) {
+                                            try {
+
+                                                Location loc = API.Warp.getWarpLocation(args[0]);
+
+                                                String name = API.CreateConfig.getConfig().getString("Warp.Warp");
+
+                                                name = name.replace("[warp]", args[0]);
+
+                                                name = name.replace('&', '§');
+
+                                                p.teleport(loc);
+
+                                                p.sendMessage(name);
+
+                                            } catch (NullPointerException e) {
+
+                                                String str = API.CreateConfig.getConfig().getString("Warp.warpdoesntexist");
+
+                                                str = str.replace('&', '§');
+
+                                                p.sendMessage(str);
+                                            }
+                                            continue;
+                                        }
+
+                                        String message = API.CreateConfig.getConfig().getString("Warp.warpdoesntexist");
+
+                                        message = message.replace('&', '§');
+
+                                        p.sendMessage(message);
+                                    }
+
+                                }
+
+                            } catch (NullPointerException e) {
+
+                                p.sendMessage("§cNo Warps Found!");
+                            }
+                        } else {
+
+                            p.sendMessage("§cPlease use §a/warp (warpname)");
+                        }
+                    } else {
+
+                        p.sendMessage(Main.FrameMainGet.getPrefix() + " " + Main.FrameMainGet.getNoPerm());
+
+                        return true;
+                    }
+                } else {
+
+                    String text = API.CreateConfig.getConfig().getString("message.notactivated");
+
+                    text = text.replace('&', '§');
+
+                    p.sendMessage(Main.FrameMainGet.getPrefix() + " " + text);
+                }
+            } else {
+
+                sender.sendMessage("§cThis Command is only for Players");
+            }
+        }
+
+        if (cmd.getName().equalsIgnoreCase("ultrahardcore") &&
+                sender instanceof Player) {
+
+            Player player = (Player) sender;
+
+            if (player.hasPermission("frameapi.ultrahardcore")) {
+
+                if (!((Boolean) player.getWorld().getGameRuleValue(GameRule.NATURAL_REGENERATION)).booleanValue()) {
+
+                    Bukkit.dispatchCommand((CommandSender) player, "gamerule naturalRegeneration true");
+
+                    player.sendMessage(Main.FrameMainGet.getPrefix() + " §bUltrahardcore disabled");
+                } else {
+
+                    Bukkit.dispatchCommand((CommandSender) player, "gamerule naturalRegeneration false");
+
+                    player.sendMessage(Main.FrameMainGet.getPrefix() + " §bUltrahardcore enabled");
+                }
+            } else {
+
+
+                player.sendMessage(Main.FrameMainGet.getPrefix() + " " + Main.FrameMainGet.getNoPerm());
+
+                return true;
+            }
+        }
+
+
+        if (cmd.getName().equalsIgnoreCase("removewarp")) {
+
+            if (sender.hasPermission("frameapi.warpremove")) {
+
+                ConfigurationSection cs = cfgwarp.getConfigurationSection("warps");
+
+                for (String s : cs.getKeys(false)) {
+
+                    if (s.equalsIgnoreCase(args[0])) {
+
+                        cfgwarp.set("warps." + s + ".boolean", Boolean.valueOf(false));
+
+                        String message = API.CreateConfig.getConfig().getString("Warp.warpremoved");
+
+                        message = message.replace("[Prefix]", Main.FrameMainGet.getPrefix());
+
+                        message = message.replace("[Warpname]", args[0]);
+
+                        message = message.replace('&', '§');
+
+                        sender.sendMessage(message);
+                        try {
+
+                            cfgwarp.save(warpfile);
+
+                        } catch (IOException e) {
+
+                            e.printStackTrace();
+                        }
+                        continue;
+                    }
+                    try {
+
+                        if (s.equalsIgnoreCase(args[0])) ;
+
+                    } catch (IllegalArgumentException e) {
+
+                        sender.sendMessage("§c" + args[0] + " §ais not in warps.yml");
+                    }
+                }
+            } else {
+
+
+                sender.sendMessage(Main.FrameMainGet.getPrefix() + " " + Main.FrameMainGet.getNoPerm());
+
+                return true;
+            }
+        }
+
+        if (cmd.getName().equalsIgnoreCase("heal")) {
+
+            if (sender instanceof Player) {
+
+                Player p = (Player) sender;
+
+                if (p.hasPermission("frameapi.heal")) {
+
+                    if (args.length == 0) {
+
+                        api.HealPlayer(p, 20);
+
+                        String text1 = API.CreateConfig.getConfig().getString("message.heal");
+
+                        text1 = text1.replace('&', '§');
+
+                        p.sendMessage(text1);
+                    } else if (args.length == 1) {
+                        try {
+
+                            Player target = Bukkit.getPlayer(args[0]);
+
+                            api.HealPlayer(target, 20);
+
+                            String text1 = API.CreateConfig.getConfig().getString("message.targetheal");
+
+                            text1 = text1.replace('&', '§');
+
+                            text1 = text1.replace("[player]", p.getDisplayName());
+
+                            String text2 = API.CreateConfig.getConfig().getString("message.targethealplayer");
+
+                            text2 = text2.replace('&', '§');
+
+                            text2 = text2.replace("[target]", target.getDisplayName());
+
+                            target.sendMessage(text1);
+
+                            p.sendMessage(text2);
+
+                        } catch (ArrayIndexOutOfBoundsException e) {
+
+                            p.sendMessage(args[0] + " §cis not a Player");
+                        }
+                    } else {
+
+                        p.sendMessage("§aPlease use §b/heal §aor §b/heal (player)");
+
+                        return true;
+                    }
+                } else {
+
+                    p.sendMessage(Main.FrameMainGet.getPrefix() + " " + Main.FrameMainGet.getNoPerm());
+
+                    return true;
+                }
+            } else {
+
+                sender.sendMessage("§cYou must be a Player");
+            }
+        }
+
+        if (cmd.getName().equalsIgnoreCase("kits") &&
+                sender instanceof Player) {
+
+            Player p = (Player) sender;
+
+            if (args.length != 0) {
+
+                String name = args[0];
+
+                if (p.hasPermission("frameapi." + name)) {
+
+                    if (args.length == 1) {
+
+                        KitManager kit1 = new KitManager();
+
+                        kit1.loadKits(name, p);
+                    } else {
+
+                        p.sendMessage("§aPlease use §b/kits (kitname)");
+                    }
+                } else {
+
+                    p.sendMessage(Main.FrameMainGet.getPrefix() + " " + Main.FrameMainGet.getNoPerm());
+                }
+            } else {
+
+                p.sendMessage("§aPlease use §b/kits (kitname)");
+            }
+        }
+        if (cmd.getName().equalsIgnoreCase("msg")) {
+            if (sender instanceof Player) {
+                Player p = (Player) sender;
+                String message = "";
+                if (p.hasPermission("frameapi.msg")) {
+                    if (args.length >= 2) {
+                        Player target = Bukkit.getPlayer(args[0]);
+                        if (target != null) {
+                            for (int i = 1; i < args.length; i++) {
+                                message = message + args[i] + " ";
+                            }
+                            p.sendMessage("§cme §r-> §a " + target.getName() + " §f-> " + message);
+                            target.sendMessage("§a" + p.getName() + " §r-> §cme  §f-> " + message);
+                            message = "";
+                        }
+                    } else {
+                        p.sendMessage("§c§lPlease use /msg (player) (message)");
+                    }
+                } else {
+
+                    p.sendMessage(Main.FrameMainGet.getPrefix() + " " + Main.FrameMainGet.getNoPerm());
+                }
+            } else {
+
+                sender.sendMessage("§cYou must be a Player");
+            }
+        }
+
+        if (cmd.getName().equalsIgnoreCase("createpay") &&
+                cfg.getBoolean("MYSQL.Boolean")) {
+
+            if (args.length == 2) {
+
+                if (sender instanceof Player) {
+
+                    Player p = (Player) sender;
+
+                    Player target = Bukkit.getPlayer(args[0]);
+
+                    if (target != null) {
+
+                        int amount = Integer.parseInt(args[1]);
+
+                        api.createPay((OfflinePlayer) target, amount, p);
+
+                        String message = api.getCustomConfig().getString("Bill.Create");
+
+                        message = message.replace("[Target]", target.getName());
+
+                        message = message.replace('&', '§');
+
+                        p.sendMessage(message);
+
+                        if (api.getPays((OfflinePlayer) target) != null) {
+
+                            (Main.getInstance()).pays.add(target.getName());
+
+                            String message2 = api.getCustomConfig().getString("Bill.Get");
+
+                            message2 = message2.replace("[Target]", p.getName());
+
+                            message2 = message2.replace("[Amount]", String.valueOf(amount));
+
+                            message2 = message2.replace('&', '§');
+
+                            target.sendMessage("§aYou get a Pay use /paythebill to sale it of §b" + amount);
+                        }
+                    } else {
+
+                        OfflinePlayer offline = Bukkit.getOfflinePlayer(args[0]);
+
+                        int amount = Integer.parseInt(args[1]);
+
+                        api.createPay(offline, amount, p);
+
+                        String message = api.getCustomConfig().getString("Bill.Create");
+
+                        message = message.replace("[Target]", args[0]);
+
+                        message = message.replace('&', '§');
+
+                        p.sendMessage(message);
+                    }
+
+                }
+
+            } else if (sender instanceof Player) {
+
+                Player player = (Player) sender;
+
+                player.sendMessage("§cPlease use §b/createpay (playername) (amount)");
+            }
+        }
+
+
+        if (cmd.getName().equalsIgnoreCase("paythebill") &&
+                cfg.getBoolean("MYSQL.Boolean") &&
+                sender instanceof Player) {
+
+            Player p = (Player) sender;
+
+            if ((Main.getInstance()).pays.contains(p.getName())) {
+
+                if (api.getPays(p) != null) {
+
+                    int amounts = api.getPays((OfflinePlayer) p).intValue();
+
+                    if (eco.getMoney((OfflinePlayer) p).doubleValue() < amounts) {
+
+                        double money = amounts - eco.getMoney((OfflinePlayer) p).doubleValue();
+
+                        p.sendMessage("§cNot enought Money. §aIf you have Money in your Bank please withdraw it and Pay it!");
+
+                        p.sendMessage("§cYou need = " + money);
+                    } else {
+                        for (Player from : Bukkit.getOnlinePlayers()) {
+
+                            if (from != null) {
+
+                                if (api.getPaysFrom(from).contains(p)) {
+                                    eco.addMoney((OfflinePlayer) from, amounts);
+
+                                    String message2 = api.getCustomConfig().getString("Bill.Pay");
+
+                                    message2 = message2.replace("[Target]", from.getName());
+
+                                    message2 = message2.replace("[Amount]", String.valueOf(amounts));
+
+                                    message2 = message2.replace('&', '§');
+
+                                    from.sendMessage("§aYou get the Pay from §b" + p.getName() + " §ain Amount of §b" + amounts);
+
+                                    p.sendMessage(message2);
+
+                                    api.getPaysDelete(p, from);
+
+                                    eco.removeMoney(p, amounts);
+                                } else {
+                                    for (OfflinePlayer offline : Main.getInstance().getPlayers()) {
+                                        if (api.getPaysFrom(offline).contains(p)) {
+                                            String message2 = api.getCustomConfig().getString("Bill.Pay");
+                                            message2 = message2.replace("[Target]", offline.getName());
+
+                                            message2 = message2.replace("[Amount]", String.valueOf(amounts));
+
+                                            message2 = message2.replace('&', '§');
+
+                                            eco.addMoney(offline, amounts);
+
+                                            p.sendMessage(message2);
+
+                                            api.getPaysDelete(p, offline);
+
+                                            eco.removeMoney(p, amounts);
+                                        }
+                                    }
+                                }
+                            } else {
+                                for (OfflinePlayer offline : Main.getInstance().getPlayers()) {
+                                    if (api.getPaysFrom(offline).contains(p)) {
+
+                                        String message2 = api.getCustomConfig().getString("Bill.Pay");
+
+                                        message2 = message2.replace("[Target]", offline.getName());
+
+                                        message2 = message2.replace("[Amount]", String.valueOf(amounts));
+
+                                        message2 = message2.replace('&', '§');
+
+                                        eco.addMoney(offline, amounts);
+
+                                        p.sendMessage(message2);
+
+                                        api.getPaysDelete(p, from);
+
+                                        eco.removeMoney(p, amounts);
+                                    }
+                                }
+                            }
+                        }
+                    }
+                } else {
+
+
+                    sender.sendMessage("§6You have no Bill!");
+                }
+            } else {
+
+
+                sender.sendMessage("§6You have no Bill!");
+            }
+        }
+
+        if (cmd.getName().equalsIgnoreCase("gm") &&
+                sender instanceof Player) {
+
+            Player player = (Player) sender;
+
+            if (args.length == 1) {
+
+                if (player.hasPermission("frameapi.gamemode")) {
+                    try {
+
+                        String message = api.getCustomConfig().getString("message.GamemodeChanged");
+
+                        if (message != null) {
+
+                            message = ReplaceCharConfig.replaceParagraph(message);
+
+                            message = ReplaceCharConfig.replaceObjectWithData(message, "[GameMode]", api.getGamemodeInInt(Integer.parseInt(args[0])).name());
+
+                            player.setGameMode(api.getGamemodeInInt(Integer.parseInt(args[0])));
+
+                            player.sendMessage(message);
+                        }
+
+                    } catch (IllegalArgumentException ex) {
+
+                        player.sendMessage("§6" + args[0] + " §cis not a number!");
+
+                    } catch (NullPointerException ex) {
+
+                        ex.printStackTrace();
+                    }
+                }
+
+            } else if (args.length == 2) {
+
+                if (player.hasPermission("frameapi.gamemode.other")) {
+
+                    Player target = Bukkit.getPlayer(args[1]);
+
+                    if (target != null) {
+                        try {
+
+                            target.setGameMode(api.getGamemodeInInt(Integer.parseInt(args[0])));
+
+                            String message = api.getCustomConfig().getString("message.GamemodeChanged");
+
+                            message = ReplaceCharConfig.replaceParagraph(message);
+
+                            message = ReplaceCharConfig.replaceObjectWithData(message, "[GameMode]", api.getGamemodeInInt(Integer.parseInt(args[0])).name());
+
+                            target.sendMessage(message);
+
+                        } catch (IllegalArgumentException ex) {
+
+                            sender.sendMessage("§6" + args[0] + " §cis not a number!");
+
+                        } catch (NullPointerException ex) {
+
+                            ex.printStackTrace();
+                        }
+                    }
+                } else {
+
+                    player.sendMessage(Main.FrameMainGet.getPrefix() + " " + Main.FrameMainGet.getNoPerm());
+                }
+            } else {
+
+                player.sendMessage("§cPlease use §l§b/gm (number) §cor §l§b/gm (number) (player)");
+            }
+        }
+        return false;
+
+    }
+
+    public List<String> onTabComplete(CommandSender sender, Command command, String alias, String[] args) {
+
+        if (command.getName().equalsIgnoreCase("frameapi")) {
+
+
+            if (args.length == 1) {
+
+                ArrayList<String> cmdframeapi = new ArrayList<>();
+
+                cmdframeapi.add("startbudget");
+
+                cmdframeapi.add("reload");
+
+                cmdframeapi.add("getmysql");
+
+                cmdframeapi.add("help");
+
+                cmdframeapi.add("info");
+
+                cmdframeapi.add("time");
+
+                if (!sender.hasPermission("frameapi.startbudget")) {
+
+                    cmdframeapi.remove("startbudget");
+                }
+
+                if (!sender.hasPermission("frameapi.reload")) {
+
+                    cmdframeapi.remove("reload");
+                }
+
+                if (!sender.hasPermission("frameapi.mysql")) {
+
+                    cmdframeapi.remove("getmysql");
+                }
+
+                if (!sender.hasPermission("frameapi.help")) {
+
+                    cmdframeapi.remove("help");
+                }
+
+                if (!sender.hasPermission("frameapi.info")) {
+
+                    cmdframeapi.remove("info");
+                }
+
+                if (!sender.hasPermission("frameapi.time")) {
+
+                    cmdframeapi.remove("time");
+                }
+
+
+                return cmdframeapi;
+
+            }
+            if (args[0].equalsIgnoreCase("startbudget")) {
+
+                ArrayList<String> money = new ArrayList<>();
+
+                money.add("on");
+
+                money.add("off");
+
+                money.add("set");
+
+                return money;
+            }
+
+        } else if (command.getName().equalsIgnoreCase("warp")) {
+
+            if (args.length == 1 &&
+                    sender.hasPermission("frameapi.warp")) {
+
+                ArrayList<String> warps = new ArrayList<>();
+
+                ConfigurationSection cs = cfgwarp.getConfigurationSection("warps");
+
+                if (!warpfile.exists()) {
+                    try {
+
+                        warpfile.mkdir();
+
+                        sender.sendMessage("§4No Warps found");
+
+                        return warps;
+
+                    } catch (NullPointerException e) {
+
+                        sender.sendMessage("§4No Warps found");
+                    }
+                } else {
+
+                    for (String s : cs.getKeys(false)) {
+
+                        if (cfgwarp.getBoolean("warps." + s + ".boolean")) {
+                            try {
+
+                                if (cfgwarp.getBoolean("warps." + s + ".boolean")) {
+
+                                    warps.add(s);
+                                }
+
+                            } catch (NullPointerException e) {
+
+                                String message = API.CreateConfig.getConfig().getString("Warp.warpdoesntexist");
+
+                                message = message.replace('&', '§');
+
+                                sender.sendMessage(message);
+                            }
+                        }
+                    }
+
+                    return warps;
+                }
+
+            }
+
+        } else if (command.getName().equalsIgnoreCase("removewarp")) {
+
+            if (args.length == 1 &&
+                    sender.hasPermission("frameapi.warpremove")) {
+
+                ArrayList<String> warps = new ArrayList<>();
+
+                ConfigurationSection cs = cfgwarp.getConfigurationSection("warps");
+
+                for (String s : cs.getKeys(false)) {
+
+                    if (cfgwarp.getBoolean("warps." + s + ".boolean")) {
+                        try {
+
+                            if (cfgwarp.getBoolean("warps." + s + ".boolean")) {
+
+                                warps.add(s);
+                            }
+
+                        } catch (NullPointerException e) {
+
+                            String message = API.CreateConfig.getConfig().getString("Warp.warpdoesntexist");
+
+                            message = message.replace('&', '§');
+
+                            sender.sendMessage(message);
+                        }
+                    }
+                }
+
+                return warps;
+            }
+
+
+        } else if (command.getName().equalsIgnoreCase("kits") &&
+                args.length == 1) {
+
+            ArrayList<String> list = new ArrayList<>();
+
+            ConfigurationSection cs = KitManager.getCustomConfig().getConfigurationSection("Items");
+
+            for (String s : cs.getKeys(false)) {
+
+                if (sender.hasPermission("frameapi." + s)) {
+
+                    list.add(s);
+                }
+            }
+
+            return list;
+        }
+
+
+        return null;
+    }
+
+}
Index: target/classes/plugin.yml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- target/classes/plugin.yml	(date 1592260211340)
+++ target/classes/plugin.yml	(date 1592260211340)
@@ -0,0 +1,284 @@
+name: FrameAPI
+author: FrameDev
+version: 4.4.6
+api-version: 1.13
+description: FrameAPI this API add much things to your Minecraft!
+main: de.framedev.frameapi.main.Main
+load: STARTUP
+loadbefore:
+  - MDBConnection
+commands:
+  setwheat:
+  getwheat:
+  setcarrot:
+  getcarrot:
+  setpotato:
+  getpotato:
+  setsugarcane:
+  getsugarcane:
+  openinv:
+  openinvnumber:
+  unmute:
+  chatmute:
+  enderchest:
+    aliases:
+      - ec
+  invsee:
+  vanish:
+    aliases:
+      - v
+  frameapi:
+    description: each Commands
+  lootchest:
+  trash:
+    description: Open an Trash Inventory
+  health:
+  gm:
+  spawnentity:
+  sets:
+  loader:
+  fly:
+  back:
+    description: Teleport to the DeathLocation when enabled
+  spawnmob:
+    description: Spawns a Mob
+  denied:
+    description: Set a Denied word in Config if this word was writing the Player will bi kicked
+  getitem:
+    description: Gives you an Item with ItemLore and displayname and Unbreakable
+  heal:
+    description: heal player
+  getenergy:
+  getmysql:
+  pos:
+  cleartps:
+  teleporter:
+    description: Open the Teleporter Inventory
+  addentity:
+  set:
+    description: set the Money from the Player
+    usage:
+      /set [player] [amount]
+  balance:
+    aliases: [bal]
+    description: shows your money
+  pay:
+    description: use to give a Player Money
+  setwarp:
+    description: set a Warp point
+  removewarp:
+    description: remove a Warp point
+  warp:
+    description: teleport to an Warp point
+  playerlistadd:
+  mute:
+  kits:
+  tps:
+    description: Show you the TPS
+  deposit:
+    description: Deposit Money in your Bank Account
+  withdraw:
+    description: getMoney from Bank
+  transfer:
+    description: Transfer Money to Player
+  bankbalance:
+    description: Show Bank Money
+  setbank:
+    description: setbank Money
+  msg:
+    description: write a message to Player
+  createpay:
+    description: Create a Bill
+  paythebill:
+    description: Pay the Bill
+  sethealth:
+  ultrahardcore:
+  adminenergy:
+  addenergy:
+  item:
+    aliases:
+      - i
+  balancetop:
+    aliases:
+      - baltop
+  backpack:
+  afk:
+    description: Provides AFK message when player types /afk.
+    usage: /<command>
+    aliases: [awayfromkeyboard, away, aafk]
+permissions:
+  frameapi.*:
+    description: Gives access to all FrameAPI commands
+    children:
+      frameapi.invsee: true
+      frameapi.config: true
+      frameapi.startbudget: true
+      frameapi.teleporter: true
+      frameapi.backtp: true
+      frameapi.spawnmob: true
+      frameapi.denied: true
+      frameapi.getitem: true
+      frameapi.mysql: true
+      frameapi.setwarp: true
+      frameapi.warp: true
+      frameapi.removewarp: true
+      frameapi.balance: true
+      frameapi.set: true
+      frameapi.signs: true
+      frameapi.heal: true
+      frameapi.bankbalance: true
+      frameapi.balance.other: true
+      frameapi.setbank.other: true
+      frameapi.set.other: true
+      frameapi.setbank: true
+      frameapi.transfer: true
+      frameapi.withdraw: true
+      frameapi.deposit: true
+      frameapi.tps: true
+      frameapi.msg: true
+      frameapi.help: true
+      frameapi.update: true
+      frameapi.energy: true
+      frameapi.chunkloader: true
+      frameapi.fly: true
+      frameapi.afk: true
+      frameapi.vanish: true
+      frameapi.saveinventory: true
+      frameapi.saveinventorynumber.multiple: true
+      frameapi.gamemode: true
+      frameapi.godmode: true
+      frameapi.trash: true
+      frameapi.balancetop: true
+      frameapi.enderchest: true
+      frameapi.enderchest.other: true
+      frameapi.backpack: true
+      frameapi.backpack.other: true
+  frameapi.backpack:
+    default: op
+  frameapi.backpack.other:
+    default: op
+    children:
+      frameapi.backpack: true
+  frameapi.balancetop:
+    default: op
+  frameapi.invsee:
+    default: op
+  frameapi.startbudget:
+    description: Allows you to use StartBudget Command
+    default: op
+  frameapi.teleporter:
+    description: Allows you to use Teleporter Inventory
+    default: op
+  frameapi.backtp:
+    description: Allows you to use back teleport
+    default: op
+  frameapi.spawnmob:
+    description: Allows you to use Spawn Mob
+    default: op
+  frameapi.denied:
+    description: Allows you to use Denied Cmd
+    default: op
+  frameapi.getitem:
+    description: Allows you to use GetItem CMD
+    default: op
+  frameapi.heal:
+    description: Allows you to use Heal CMD
+    default: op
+  frameapi.mysql:
+    description: Allow you to use Mysql Help CMD
+  frameapi.setwarp:
+    default: op
+    description: Allow you to set a Warp Point
+  frameapi.warp:
+    default: op
+    description: allow you to Teleport ya
+  frameapi.balance:
+    default: op
+    description: allow you to show our Money
+  frameapi.balance.other:
+    default: op
+    description: allow you to show another Players Money
+    children:
+      frameapi.balance: true
+  frameapi.enderchest:
+    default: op
+  frameapi.enderchest.other:
+    default: op
+    children:
+      frameapi.enderchest: true
+  frameapi.set:
+    default: op
+    description: allow you to set the Money from a Player
+  frameapi.set.other:
+    default: op
+    children:
+      frameapi.set: true
+  frameapi.signs:
+    default: op
+  frameapi.signs.use:
+    default: op
+    children:
+      frameapi.signs: true
+  frameapi.signs.create:
+    default: op
+    children:
+      frameapi.signs: true
+  frameapi.config:
+    default: op
+  frameapi.help:
+    default: op
+  frameapi.removewarp:
+    default: op
+  frameapi.bankbalance:
+    default: op
+  frameapi.bankbalance.other:
+    default: op
+    children:
+      frameapi.bankbalance: true
+  frameapi.setbank:
+    default: op
+  frameapi.setbank.other:
+    default: op
+    children:
+      frameapi.setbank: true
+  frameapi.transfer:
+    default: op
+  frameapi.withdraw:
+    default: op
+  frameapi.deposit:
+    default: op
+  frameapi.tps:
+    default: op
+  frameapi.update:
+    default: op
+  frameapi.msg:
+    default: op
+  frameapi.energy:
+    default: op
+  frameapi.chunkloader:
+    default: op
+  frameapi.fly:
+    default: op
+  frameapi.fly.other:
+    default: op
+    children:
+      frameapi.fly: true
+  frameapi.afk:
+    default: op
+  frameapi.vanish:
+    default: op
+  frameapi.saveinventory:
+    default: op
+  frameapi.saveinventorynumber.multiple:
+    default: op
+  frameapi.gamemode:
+    default: op
+  frameapi.gamemode.other:
+    default: op
+    children:
+      frameapi.gamemode: true
+  frameapi.godmode:
+    default: op
+  frameapi.trash:
+    default: op
+
Index: src/main/java/de/framedev/frameapi/cmds/PositionCMD.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/de/framedev/frameapi/cmds/PositionCMD.java	(date 1591733994780)
+++ src/main/java/de/framedev/frameapi/cmds/PositionCMD.java	(date 1591733994780)
@@ -0,0 +1,76 @@
+package de.framedev.frameapi.cmds;
+
+import de.framedev.frameapi.api.API;
+import de.framedev.frameapi.main.Main;
+import org.bukkit.Bukkit;
+import org.bukkit.Location;
+import org.bukkit.command.Command;
+import org.bukkit.command.CommandExecutor;
+import org.bukkit.command.CommandSender;
+import org.bukkit.configuration.InvalidConfigurationException;
+import org.bukkit.entity.Player;
+
+import java.io.IOException;
+import java.util.ArrayList;
+import java.util.HashMap;
+
+public class PositionCMD
+        implements CommandExecutor {
+    private final Main plugin;
+
+    HashMap<String, Location> locations = new HashMap<>();
+
+    public PositionCMD(Main plugin) {
+        this.plugin = plugin;
+        plugin.getCommand("pos").setExecutor(this);
+    }
+
+
+    public boolean onCommand(CommandSender sender, Command command, String label, String[] args) {
+        if (sender instanceof Player) {
+            Player player = (Player) sender;
+            if (args.length == 1) {
+                String name = args[0];
+                if (!locations.containsValue(API.Locations.getLocation(name))) {
+                    if (API.Locations.cfg.get(name) != null) {
+                        Location loc = API.Locations.getLocation(name);
+                        try {
+                            API.Locations.cfg.load(API.Locations.file);
+                        } catch (IOException | InvalidConfigurationException e) {
+                            e.printStackTrace();
+                        }
+                        int x = loc.getBlockX();
+                        int y = loc.getBlockY();
+                        int z = loc.getBlockZ();
+                        player.sendMessage("§aLocation = §b[" + name + "] §aLocation Koordinaten §c= §a[x§b" + x + "§a]§a[y§b" + y + "§a]§a[z§b" + z + "§a]");
+                    }
+                } else if (locations.containsValue(API.Locations.getLocation(name))) {
+                    int x = locations.get(name).getBlockX();
+                    int y = locations.get(name).getBlockY();
+                    int z = locations.get(name).getBlockZ();
+                    player.sendMessage("§aLocation = §b[" + name + "] §aLocation Koordinaten §c= §a[x§b" + x + "§a]§a[y§b" + y + "§a]§a[z§b" + z + "§a]");
+                } else {
+                    for (Player all : Bukkit.getOnlinePlayers()) {
+                        API.Locations.setLocation(name, player.getLocation());
+                        int x = player.getLocation().getBlockX();
+                        int y = player.getLocation().getBlockY();
+                        int z = player.getLocation().getBlockZ();
+
+                        if (locations.containsKey(name)) {
+                            player.sendMessage("§cThis Location is Already exists!");
+                        } else {
+                            locations.put(name, player.getLocation());
+                            all.sendMessage("§a" + player.getName() + " §bhat eine Location gespeichert = §a[" + name + "] §bLocation §c= §a[x§b" + x + "§a]§a[y§b" + y + "§a]§a[z§b" + z + "§a]");
+                            Bukkit.getServer().reload();
+                        }
+                    }
+                }
+            } else {
+                player.sendMessage("§cPlease use §b/pos <location name>");
+            }
+        }
+        return false;
+    }
+}
+
+
Index: src/main/java/de/framedev/frameapi/cmds/FrameCMDS.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/de/framedev/frameapi/cmds/FrameCMDS.java	(date 1583422650034)
+++ src/main/java/de/framedev/frameapi/cmds/FrameCMDS.java	(date 1583422650034)
@@ -0,0 +1,210 @@
+ package de.framedev.frameapi.cmds;
+ import de.framedev.frameapi.api.API;
+ import de.framedev.frameapi.interfaces.Constructors;
+ import de.framedev.frameapi.main.Main;
+ import de.framedev.frameapi.utils.Config;
+ import java.text.SimpleDateFormat;
+ import java.util.ArrayList;
+ import java.util.Date;
+ import java.util.List;
+ import org.bukkit.Bukkit;
+ import org.bukkit.ChatColor;
+ import org.bukkit.command.Command;
+ import org.bukkit.command.CommandExecutor;
+ import org.bukkit.command.CommandSender;
+ import org.bukkit.command.TabCompleter;
+ import org.bukkit.configuration.file.FileConfiguration;
+ import org.bukkit.entity.Player;
+ import org.bukkit.event.Event;
+ import org.bukkit.inventory.ItemStack;
+ import org.bukkit.plugin.Plugin;
+ 
+ public class FrameCMDS implements CommandExecutor, TabCompleter, Constructors {
+   private static FileConfiguration cfg = Main.getInstance().getConfig();
+   private static SimpleDateFormat date2 = new SimpleDateFormat("HH.mm.ss");
+   private static String Uhrzeit2 = date2.format(new Date());
+   private final Main plugin;
+   
+   public FrameCMDS(Main plugin) {
+     this.plugin = plugin;
+     plugin.getCommand("frameapi").setTabCompleter(this);
+     plugin.getCommand("frameapi").setExecutor(this);
+   }
+   
+   private static String getDate() {
+     return Uhrzeit2;
+   }
+ 
+ 
+   
+   public boolean onCommand(CommandSender sender, Command cmd, String label, String[] args) {
+     if (cmd.getName().equalsIgnoreCase("frameapi")) {
+       try {
+         if (args[0].equalsIgnoreCase("getmysql") && 
+           sender instanceof Player) {
+           Player p = (Player)sender;
+           if (p.hasPermission("frameapi.mysql")) {
+             api.getInformationMYSQL(p);
+             API.SendMessageEvent sendMessageEvent = new API.SendMessageEvent(p, "§bhi Dude");
+             Bukkit.getPluginManager().callEvent((Event)sendMessageEvent);
+             return true;
+           } 
+           p.sendMessage(Main.FrameMainGet.getPrefix() + " " + Main.FrameMainGet.getNoPerm());
+           return true;
+         } 
+ 
+         
+         if (args[0].equalsIgnoreCase("info") && 
+           sender instanceof Player) {
+           Player p = (Player)sender;
+           api.getInformation(p);
+           api.donationLink(p);
+           p.getInventory().addItem(new ItemStack[] { api.getWrittenBook(p) });
+           return true;
+         } 
+         
+         if (args[0].equalsIgnoreCase("load")) {
+           API.CreateConfig.onloadedfalse();
+         }
+         if (args[0].equalsIgnoreCase("reload") && 
+           sender instanceof Player) {
+           Player p = (Player)sender;
+           if (p.hasPermission("frameapi.config")) {
+             Main.getInstance().reloadConfig();
+             Config.loadConfig();
+             Bukkit.getPluginManager().disablePlugin((Plugin)Main.getInstance());
+             Bukkit.getPluginManager().enablePlugin((Plugin)Main.getInstance());
+             p.sendMessage("§a[§aFrameAPI]§b Reload Config successfully!");
+             return true;
+           } 
+           p.sendMessage(Main.FrameMainGet.getPrefix() + " " + Main.FrameMainGet.getNoPerm());
+           return true;
+         } 
+ 
+         
+         if (args[0].equalsIgnoreCase("updates") && 
+           sender instanceof Player) {
+           Player player = (Player)sender;
+           if (player.hasPermission("frameapi.update"))
+           {
+             Main.updateCheckerPlayer(player);
+             return true;
+           }
+         } 
+         
+         if (args[0].equalsIgnoreCase("help") && 
+           sender instanceof Player) {
+           Player p = (Player)sender;
+           api.sendHelp(p);
+           api.donationLink(p);
+           return true;
+         } 
+         
+         if (args[0].equalsIgnoreCase("donation") && 
+           sender instanceof Player) {
+           Player p = (Player)sender;
+           api.donationLink(p);
+           return true;
+         } 
+         
+         if (args[0].equalsIgnoreCase("startbudget") && 
+           sender instanceof Player) {
+           Player p = (Player)sender;
+           if (p.hasPermission("frameapi.startbudget")) {
+             try {
+               if (args[1].equalsIgnoreCase("on")) {
+                 Main.getInstance().getConfig().set("StartMoney", Boolean.valueOf(true));
+                 Main.getInstance().saveConfig();
+                 p.sendMessage(Main.FrameMainGet.getPrefix() + " §bStartBudget Enabled");
+                 return true;
+               }  if (args[1].equalsIgnoreCase("off")) {
+                 Main.getInstance().getConfig().set("StartMoney", Boolean.valueOf(false));
+                 Main.getInstance().saveConfig();
+                 p.sendMessage(Main.FrameMainGet.getPrefix() + " §bStartBudget Disabled");
+                 return true;
+               }  if (args[1].equalsIgnoreCase("set")) {
+ 
+                 
+                 double money = Double.parseDouble(args[2]);
+                 Main.getInstance().getConfig().set("StartBudget", Double.valueOf(money));
+                 Main.getInstance().saveConfig();
+                 String text = API.CreateConfig.getConfig().getString("Startbudget.Text.Set");
+                 String money1 = String.valueOf(money);
+                 text = text.replace("[Money]", money1);
+                 text = text.replace('&', '§');
+                 p.sendMessage(Main.FrameMainGet.getPrefix() + " " + text);
+                 return true;
+               } 
+             } catch (ArrayIndexOutOfBoundsException e) {
+               p.sendMessage("§cuse /frameapi startbudget (on/off) or (amount)");
+               return true;
+             } 
+           } else {
+             p.sendMessage(Main.FrameMainGet.getPrefix() + " " + Main.FrameMainGet.getNoPerm());
+             return true;
+           } 
+         } 
+ 
+         
+         if (args[0].equalsIgnoreCase("time")) {
+           if (sender instanceof Player) {
+             Player p = (Player)sender;
+             if (p.hasPermission("frameapi.time")) {
+               int time = (int)p.getWorld().getTime();
+               p.sendMessage("§aTicks = §b" + time);
+               p.sendMessage("§a13000 = §bNight");
+               p.sendMessage("§a0 = §bDay");
+               p.sendMessage(ChatColor.GOLD + " " + getDate());
+               return true;
+             }
+           
+           } else if (sender instanceof Player) {
+             Player p = (Player)sender;
+             p.sendMessage(Main.FrameMainGet.getPrefix() + " " + Main.FrameMainGet.getNoPerm());
+             return true;
+           }
+         
+         }
+         else if (sender instanceof Player) {
+           Player p = (Player)sender;
+           api.sendHelp(p);
+         }
+       
+       } catch (ArrayIndexOutOfBoundsException e) {
+         if (sender instanceof Player) {
+           Player p = (Player)sender;
+           api.sendHelp(p);
+           return true;
+         } 
+       } 
+     }
+     return false;
+   }
+ 
+   
+   public List<String> onTabComplete(CommandSender sender, Command command, String alias, String[] args) {
+     ArrayList<String> cmdframeapi = new ArrayList<>();
+     cmdframeapi.add("info");
+     cmdframeapi.add("time");
+     cmdframeapi.add("getmysql");
+     cmdframeapi.add("reload");
+     cmdframeapi.add("startbudget");
+     cmdframeapi.add("spawnmob");
+     cmdframeapi.add("help");
+     cmdframeapi.add("updates");
+     cmdframeapi.add("donation");
+     if (command.getName().equalsIgnoreCase("frameapi")) {
+       if (args.length == 1)
+         return cmdframeapi; 
+       if (args[0].equalsIgnoreCase("startbudget")) {
+         ArrayList<String> money = new ArrayList<>();
+         money.add("on");
+         money.add("off");
+         return money;
+       } 
+     } 
+     return null;
+   }
+ }
+
+
Index: src/main/java/de/framedev/frameapi/cmds/VanishCMD.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/de/framedev/frameapi/cmds/VanishCMD.java	(date 1583416260007)
+++ src/main/java/de/framedev/frameapi/cmds/VanishCMD.java	(date 1583416260007)
@@ -0,0 +1,58 @@
+ package de.framedev.frameapi.cmds;
+ 
+ import de.framedev.frameapi.main.Main;
+ import java.util.ArrayList;
+ import org.bukkit.Bukkit;
+ import org.bukkit.command.Command;
+ import org.bukkit.command.CommandExecutor;
+ import org.bukkit.command.CommandSender;
+ import org.bukkit.entity.Player;
+ import org.bukkit.plugin.Plugin;
+ 
+ public class VanishCMD
+   implements CommandExecutor {
+   private final Main plugin;
+   public ArrayList<String> hided = new ArrayList<>();
+   
+   public VanishCMD(Main plugin) {
+     this.plugin = plugin;
+     plugin.getCommand("vanish").setExecutor(this);
+   }
+ 
+   
+   public boolean onCommand(CommandSender sender, Command command, String label, String[] args) {
+     if (command.getName().equalsIgnoreCase("vanish")) {
+       if (sender.hasPermission("frameapi.vanish")) {
+         if (args.length == 0) {
+           if (sender instanceof Player) {
+             Player player = (Player)sender;
+             if (this.hided.contains(player.getName())) {
+               Bukkit.getOnlinePlayers().forEach(o -> {
+                     o.showPlayer((Plugin)this.plugin, player);
+                     this.hided.remove(player.getName());
+                     player.sendMessage("§aYou are no longer in Vanish!");
+                   });
+               return true;
+             } 
+             Bukkit.getOnlinePlayers().forEach(o -> {
+                   o.hidePlayer((Plugin)this.plugin, player);
+                   this.hided.add(player.getName());
+                   player.sendMessage("§aYou are now in Vanish!");
+                 });
+             return true;
+           } 
+           
+           sender.sendMessage("§cOnly Players can use this Command!");
+         } else {
+           
+           sender.sendMessage("§cPlease use §b/v §cor §b/vanish");
+         } 
+       } else {
+         sender.sendMessage(Main.FrameMainGet.getPrefix() + " " + Main.FrameMainGet.getNoPerm());
+       } 
+     }
+     return false;
+   }
+ }
+
+
Index: src/main/java/de/framedev/frameapi/cmds/TrashCMD.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/de/framedev/frameapi/cmds/TrashCMD.java	(date 1583360504078)
+++ src/main/java/de/framedev/frameapi/cmds/TrashCMD.java	(date 1583360504078)
@@ -0,0 +1,40 @@
+package de.framedev.frameapi.cmds;
+
+import de.framedev.frameapi.main.Main;
+import org.bukkit.Bukkit;
+import org.bukkit.command.Command;
+import org.bukkit.command.CommandExecutor;
+import org.bukkit.command.CommandSender;
+import org.bukkit.entity.Player;
+import org.bukkit.inventory.Inventory;
+
+public class TrashCMD implements CommandExecutor {
+
+    private final Main plugin;
+
+    public TrashCMD(Main plugin) {
+        this.plugin = plugin;
+        plugin.getCommand("trash").setExecutor(this::onCommand);
+    }
+
+    @Override
+    public boolean onCommand(CommandSender sender, Command command, String label, String[] args) {
+        if(sender instanceof Player) {
+            Player player = (Player) sender;
+            if(player.hasPermission("frameapi.trash")) {
+                //Create Trash Inventory
+                Inventory inventory = Bukkit.createInventory(null,5*9,"§cTrash");
+
+                //Open the Trash Inventory
+                player.openInventory(inventory);
+                return true;
+            } else {
+                player.sendMessage(Main.FrameMainGet.getPrefix() + " " + Main.FrameMainGet.getNoPerm());
+                return true;
+            }
+        } else {
+            Bukkit.getConsoleSender().sendMessage(Main.FrameMainGet.getPrefix() + " §cYou need to be a Player!");
+            return true;
+        }
+    }
+}
Index: src/main/java/de/framedev/frameapi/cmds/ChatCommand.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/de/framedev/frameapi/cmds/ChatCommand.java	(date 1591733994844)
+++ src/main/java/de/framedev/frameapi/cmds/ChatCommand.java	(date 1591733994844)
@@ -0,0 +1,74 @@
+package de.framedev.frameapi.cmds;
+
+import de.framedev.frameapi.managers.ChatManager;
+import de.framedev.frameapi.main.Main;
+import org.bukkit.Bukkit;
+import org.bukkit.OfflinePlayer;
+import org.bukkit.command.Command;
+import org.bukkit.command.CommandExecutor;
+import org.bukkit.command.CommandSender;
+import org.bukkit.entity.Player;
+
+/*
+ * =============================================
+ * = This Plugin was Created by FrameDev       =
+ * = Copyrighted by FrameDev                   =
+ * = Please don't Change anything              =
+ * =============================================
+ * This Class was made at 23.05.2020, 21:37
+ */
+public class ChatCommand implements CommandExecutor {
+
+    private final Main plugin;
+
+    public ChatCommand(Main plugin) {
+        this.plugin = plugin;
+        plugin.getCommand("unmute").setExecutor(this);
+        plugin.getCommand("chatmute").setExecutor(this);
+    }
+
+    @SuppressWarnings("deprecation")
+    @Override
+    public boolean onCommand(CommandSender sender, Command command, String label, String[] args) {
+        if (command.getName().equalsIgnoreCase("unmute")) {
+            Player target = Bukkit.getPlayer(args[0]);
+            if (target != null) {
+                ChatManager chatManager = new ChatManager(target.getName());
+                if (chatManager.isMuted()) {
+                    chatManager.setMuted(false,0);
+                    sender.sendMessage("§aDu hast erfolgreich §b" + target.getName() + " §aentmuted!");
+                    target.sendMessage("§aDu wurdest entmuted!");
+                }
+            } else {
+                OfflinePlayer offlinePlayer = Bukkit.getOfflinePlayer(args[0]);
+                ChatManager chatManager = new ChatManager(offlinePlayer.getName());
+                if (chatManager.isMuted()) {
+                    chatManager.setMuted(false,0);
+                    sender.sendMessage("§aDu hast erfolgreich §b" + offlinePlayer.getName() + " §aentmuted!");
+                }
+            }
+        }
+        if(command.getName().equalsIgnoreCase("chatmute")) {
+            Player target = Bukkit.getPlayer(args[0]);
+            if (target != null) {
+                ChatManager chatManager = new ChatManager(target.getName());
+                if (chatManager.isMuted()) {
+                    sender.sendMessage("§cDieser Spieler hat schon einen ChatMute!");
+                } else {
+                    chatManager.setMuted(true,Integer.parseInt(args[1]));
+                }
+            } else {
+                OfflinePlayer offlinePlayer = Bukkit.getOfflinePlayer(args[0]);
+                ChatManager chatManager = new ChatManager(offlinePlayer.getName());
+                if (chatManager.isMuted()) {
+                    chatManager.setMuted(false,0);
+                    sender.sendMessage("§cDieser Spieler hat schon einen ChatMute!");
+                } else {
+                    chatManager.setMuted(true,Integer.parseInt(args[1]));
+                }
+            }
+        }
+        return false;
+    }
+
+}
Index: src/main/java/de/framedev/frameapi/kits/KitManager.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/de/framedev/frameapi/kits/KitManager.java	(date 1591738414303)
+++ src/main/java/de/framedev/frameapi/kits/KitManager.java	(date 1591738414303)
@@ -0,0 +1,69 @@
+package de.framedev.frameapi.kits;
+
+import de.framedev.frameapi.main.Main;
+import org.bukkit.Bukkit;
+import org.bukkit.Material;
+import org.bukkit.configuration.file.FileConfiguration;
+import org.bukkit.configuration.file.YamlConfiguration;
+import org.bukkit.entity.Player;
+import org.bukkit.inventory.Inventory;
+import org.bukkit.inventory.ItemStack;
+
+import java.io.File;
+import java.io.IOException;
+
+
+public class KitManager {
+    private static File customConfigFile;
+    private static FileConfiguration customConfig;
+    public Inventory kitname = Bukkit.createInventory(null, 36);
+
+
+    public static FileConfiguration getCustomConfig() {
+        return customConfig;
+    }
+
+
+    public void createCustomConfig() {
+        customConfigFile = new File(Main.getInstance().getDataFolder(), "kits.yml");
+        if (!customConfigFile.exists()) {
+            customConfigFile.getParentFile().mkdirs();
+            Main.getInstance().saveResource("kits.yml", false);
+        }
+
+        customConfig = (FileConfiguration) new YamlConfiguration();
+        try {
+            customConfig.load(customConfigFile);
+        } catch (IOException | org.bukkit.configuration.InvalidConfigurationException e) {
+            e.printStackTrace();
+        }
+    }
+
+
+    public void loadKits(String name, Player player) {
+        try {
+            for (String s : getCustomConfig().getStringList("Items." + name)) {
+                String[] x = s.split(",");
+                ItemStack item = new ItemStack(Material.getMaterial(x[0]), Integer.valueOf(x[1]));
+                this.kitname.addItem(item);
+            }
+            for (ItemStack items : this.kitname.getContents()) {
+                if (items != null) {
+                    player.getInventory().addItem(items);
+                    clearKitInventory();
+                } else {
+                    return;
+                }
+            }
+        } catch (Exception ex) {
+            Bukkit.getConsoleSender().sendMessage("§cNo Kit Found §f" + ex.getMessage());
+        }
+    }
+
+
+    private void clearKitInventory() {
+        this.kitname.clear();
+    }
+}
+
+
Index: src/main/java/de/framedev/frameapi/cmds/EnergyCMD.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/de/framedev/frameapi/cmds/EnergyCMD.java	(date 1591733379769)
+++ src/main/java/de/framedev/frameapi/cmds/EnergyCMD.java	(date 1591733379769)
@@ -0,0 +1,70 @@
+package de.framedev.frameapi.cmds;
+
+import de.framedev.frameapi.api.energy.Energy;
+import de.framedev.frameapi.main.Main;
+import org.bukkit.Bukkit;
+import org.bukkit.OfflinePlayer;
+import org.bukkit.command.Command;
+import org.bukkit.command.CommandExecutor;
+import org.bukkit.command.CommandSender;
+import org.bukkit.entity.Player;
+
+
+public class EnergyCMD
+        implements CommandExecutor {
+    private final Main plugin;
+
+    public EnergyCMD(Main plugin) {
+        this.plugin = plugin;
+        plugin.getCommand("getenergy").setExecutor(this);
+        plugin.getCommand("adminenergy").setExecutor(this);
+        plugin.getCommand("addenergy").setExecutor(this);
+    }
+
+
+    public boolean onCommand(CommandSender sender, Command command, String label, String[] args) {
+        if (sender instanceof Player) {
+            Player player = (Player) sender;
+            if (player.hasPermission("frameapi.energy")) {
+                if (command.getName().equalsIgnoreCase("getenergy")) {
+                    if (args.length == 0) {
+                        int energy = (new Energy()).getEnergy((OfflinePlayer) player);
+                        player.sendMessage("§aYour Energy = §b" + energy);
+                    } else if (args.length == 1) {
+                        Player target = Bukkit.getPlayer(args[0]);
+                        if (target != null) {
+                            int energy = (new Energy()).getEnergy((OfflinePlayer) target);
+                            player.sendMessage("§aThe Energy of §b" + target.getName() + " §ais §b" + energy);
+                        } else {
+                            OfflinePlayer offline = Bukkit.getOfflinePlayer(args[0]);
+                            int energy = (new Energy()).getEnergy(offline);
+                            player.sendMessage("§aThe Energy of §b" + offline.getName() + " §ais §b" + energy);
+                        }
+                    }
+                }
+                if (command.getName().equalsIgnoreCase("adminenergy")) {
+                    (new Energy()).adminEnergy(player);
+                }
+                if (command.getName().equalsIgnoreCase("addenergy")) {
+                    if (args.length == 1) {
+                        int i = Integer.parseInt(args[0]);
+                        (new Energy()).addEnergy((OfflinePlayer) player, i);
+                    } else if (args.length == 2) {
+                        int i = Integer.parseInt(args[1]);
+                        Player target = Bukkit.getPlayer(args[0]);
+                        if (target != null) {
+                            (new Energy()).addEnergy((OfflinePlayer) target, i);
+                        } else {
+                            OfflinePlayer offline = Bukkit.getOfflinePlayer(args[0]);
+                            (new Energy()).addEnergy(offline, i);
+                        }
+                    }
+                }
+            }
+        }
+
+        return false;
+    }
+}
+
+
Index: src/main/java/de/framedev/frameapi/pets/Pets.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/de/framedev/frameapi/pets/Pets.java	(date 1592260172945)
+++ src/main/java/de/framedev/frameapi/pets/Pets.java	(date 1592260172945)
@@ -0,0 +1,111 @@
+package de.framedev.frameapi.pets;
+
+import java.util.HashMap;
+import java.util.Random;
+
+import org.bukkit.Location;
+import org.bukkit.World;
+import org.bukkit.craftbukkit.v1_15_R1.entity.CraftCreature;
+import org.bukkit.entity.Creature;
+import org.bukkit.entity.Entity;
+import org.bukkit.entity.EntityType;
+import org.bukkit.entity.Player;
+import org.bukkit.event.EventHandler;
+import org.bukkit.event.Listener;
+import org.bukkit.event.entity.EntityDamageByEntityEvent;
+import org.bukkit.event.player.PlayerMoveEvent;
+import org.bukkit.event.player.PlayerQuitEvent;
+import org.bukkit.plugin.Plugin;
+import org.bukkit.scheduler.BukkitRunnable;
+
+import de.framedev.frameapi.main.Main;
+
+public class Pets implements Listener {
+	public static HashMap<String, Entity> Pet = new HashMap<>();
+
+	private static double speed;
+
+	public void removePet(Player player) {
+		if (Pet.containsKey(player.getName())) {
+			((Entity) Pet.get(player.getName())).remove();
+		}
+	}
+
+	public void createPet(Player player, EntityType type, String name, double speed, boolean cangetBabies) {
+		Entity entity = player.getWorld().spawnEntity(player.getLocation(), type);
+		entity.setCustomName(name);
+		entity.setCustomNameVisible(true);
+		Pet.put(player.getName(), entity);
+		Pets.speed = speed;
+		getBabies(player, cangetBabies);
+	}
+
+	public void walktoLocation(Creature creature, Player player, double speed) {
+		Location location = player.getLocation();
+		Pets.speed = speed;
+		Random rnd = new Random();
+		int zufall = rnd.nextInt(5);
+		switch (zufall) {
+		case 0:
+			location.add(1.0D, 0.0D, 1.0D);
+			break;
+		case 1:
+			location.add(0.0D, 0.0D, 1.0D);
+			break;
+		case 2:
+			location.add(1.0D, 0.0D, 0.0D);
+			break;
+		case 3:
+			location.subtract(1.0D, 0.0D, 1.0D);
+			break;
+		case 4:
+			location.subtract(0.0D, 0.0D, 1.0D);
+			break;
+		}
+		if (location.distanceSquared(creature.getLocation()) > 100.0D) {
+			if (!player.isOnGround()) {
+				return;
+			}
+			creature.teleport(location);
+		} else {
+			((CraftCreature) creature).getHandle().getNavigation().a(location.getX(), location.getY(), location.getZ(),
+					speed);
+		}
+	}
+
+	@EventHandler
+	public void onQuit(PlayerQuitEvent e) {
+		Player player = e.getPlayer();
+		if (Pet.containsKey(player.getName())) {
+			((Entity) Pet.get(player.getName())).remove();
+		}
+	}
+
+	@EventHandler
+	public void onMove(PlayerMoveEvent e) {
+		if (Pet.containsKey(e.getPlayer().getName())) {
+
+			double speed = Pets.speed;
+			walktoLocation((Creature) Pet.get(e.getPlayer().getName()), e.getPlayer(), speed);
+		}
+	}
+
+	@EventHandler
+	public void EntityDamageEvent(EntityDamageByEntityEvent e) {
+		Entity entity = e.getEntity();
+		if (Pet.containsValue(entity)) {
+			e.setCancelled(true);
+		}
+	}
+
+	public void getBabies(final Player player, Boolean baby) {
+		if (baby)
+			(new BukkitRunnable() {
+				public void run() {
+					World world = player.getWorld();
+					world.spawnEntity(player.getLocation(), ((Entity) Pets.Pet.get(player.getName())).getType());
+					player.sendMessage("§aYou get a Baby");
+				}
+			}).runTaskTimer((Plugin) Main.getInstance(), 0L, 1200L);
+	}
+}
Index: src/main/java/de/framedev/frameapi/main/Main.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/de/framedev/frameapi/main/Main.java	(date 1592810542517)
+++ src/main/java/de/framedev/frameapi/main/Main.java	(date 1592810542517)
@@ -0,0 +1,608 @@
+package de.framedev.frameapi.main;
+
+import de.framedev.frameapi.api.API;
+import de.framedev.frameapi.api.SavePlayersInventory;
+import de.framedev.frameapi.glass.Cocktail;
+import de.framedev.frameapi.kits.KitManager;
+
+import de.framedev.frameapi.listeners.money.GetMoneyInTime;
+import de.framedev.frameapi.managers.*;
+import de.framedev.frameapi.mongodb.BackendManager;
+import de.framedev.frameapi.mongodb.MongoManager;
+import de.framedev.frameapi.mysql.MYSQL;
+import de.framedev.frameapi.mysql.SQL;
+import de.framedev.frameapi.pets.Pets;
+import de.framedev.frameapi.utils.Config;
+import de.framedev.frameapi.utils.Init;
+import de.framedev.frameapi.utils.Lags;
+import de.framedev.frameapi.utils.ReplaceCharConfig;
+import de.framedev.frameapi.warps.WarpSigns;
+import java.io.BufferedReader;
+import java.io.File;
+import java.io.IOException;
+import java.io.InputStreamReader;
+import java.net.MalformedURLException;
+import java.net.URL;
+import java.net.URLConnection;
+import java.sql.ResultSet;
+import java.sql.SQLException;
+import java.sql.Statement;
+import java.text.DecimalFormat;
+import java.util.ArrayList;
+import java.util.List;
+import java.util.concurrent.Callable;
+import java.util.concurrent.ExecutionException;
+
+import net.md_5.bungee.api.chat.ClickEvent;
+import net.md_5.bungee.api.chat.ComponentBuilder;
+import net.md_5.bungee.api.chat.HoverEvent;
+import net.md_5.bungee.api.chat.TextComponent;
+import org.bukkit.Bukkit;
+import org.bukkit.ChatColor;
+import org.bukkit.Chunk;
+import org.bukkit.OfflinePlayer;
+import org.bukkit.World;
+import org.bukkit.block.Block;
+import org.bukkit.command.BlockCommandSender;
+import org.bukkit.command.Command;
+import org.bukkit.command.CommandSender;
+import org.bukkit.configuration.file.FileConfiguration;
+import org.bukkit.configuration.file.YamlConfiguration;
+import org.bukkit.entity.Entity;
+import org.bukkit.entity.EntityType;
+import org.bukkit.entity.Player;
+import org.bukkit.event.EventHandler;
+import org.bukkit.event.Listener;
+import org.bukkit.event.player.AsyncPlayerChatEvent;
+import org.bukkit.inventory.ItemStack;
+import org.bukkit.plugin.Plugin;
+import org.bukkit.plugin.java.JavaPlugin;
+import org.bukkit.scheduler.BukkitRunnable;
+
+@SuppressWarnings( "deprecation" )
+public final class Main extends JavaPlugin implements Listener {
+
+    private static int resource = 68558;
+    static File file = new File("plugins/FrameAPI/entitys.yml");
+    private static Main mi;
+    private static API api = new API();
+    private static KitManager kit = new KitManager();
+    private static Pets pet = new Pets();
+    private static String noperm;
+    private static String prefix;
+    public ArrayList<String> pays = new ArrayList<>();
+    public int j = 0;
+    public Integer animationCount;
+    FileConfiguration cfg = (FileConfiguration) YamlConfiguration.loadConfiguration(file);
+    ArrayList<String> entitys = new ArrayList<>();
+    private MongoManager mongoManager;
+    private BackendManager backendManager;
+    private String namethis = "";
+    public static File filem = new File("plugins/MDBConnection/config.yml");
+    public static FileConfiguration cfgm = (FileConfiguration) YamlConfiguration.loadConfiguration(filem);
+
+
+    public void onEnable() {
+        mi = this;
+        kit.createCustomConfig();
+        api.createCustomConfig();
+        getConfig().options().copyDefaults(true);
+        saveDefaultConfig();
+        Config.loadConfig();
+        Config.updateConfig();
+        new MultiWorldManager().createWorldifNotExists();
+        if (getConfig().getBoolean("MYSQL.Boolean")) {
+            try {
+                MYSQL.connect();
+                SQL.createTable("money", "PlayerName TEXT(64)", "balance_money DOUBLE", "bankmoney DOUBLE","Registered TEXT");
+            } catch (NullPointerException ex) {
+                Bukkit.getConsoleSender().sendMessage("§cPlease edit Config.yml :: MySQL Section!!!");
+            }
+        }
+        if(getConfig().getBoolean("BungeeCord")) {
+            this.getServer().getMessenger().registerOutgoingPluginChannel(this, "BungeeCord");
+            this.getServer().getMessenger().registerIncomingPluginChannel(this, "BungeeCord", new ServerManager());
+        }
+        if (Bukkit.getPluginManager().getPlugin("MDBConnection") != null) {
+            if (cfgm.getBoolean("MongoDB.LocalHost")) {
+                this.mongoManager = new MongoManager();
+                this.mongoManager.connectLocalHost();
+            }
+            if (cfgm.getBoolean("MongoDB.Boolean")) {
+                this.mongoManager = new MongoManager();
+                this.mongoManager.connect();
+            }
+            if (cfgm.getBoolean("MongoDB.LocalHost")) {
+                this.backendManager = new BackendManager(this);
+            }
+            if (cfgm.getBoolean("MongoDB.Boolean")) {
+                this.backendManager = new BackendManager(this);
+            }
+        }
+        if (getConfig().getString("language").equalsIgnoreCase("en_EN")) {
+            pet.getClass();
+            if (getInstance().getConfig().getBoolean("NoNight")) {
+                api.NoNight();
+            } else {
+                Bukkit.getConsoleSender().sendMessage(FrameMainGet.getPrefix() + " §cNo Night Disabled!!");
+            }
+            if (getConfig().getBoolean("MessageOfReload.Boolean")) {
+                api.sendMessageofReload();
+            }
+            if (getConfig().getBoolean("MYSQL.Boolean")) {
+                SQL.createTable("pays", "PlayerTo TEXT(11)", "payAmount INT", " PlayerFrom TEXT");
+                SQL.createTable("offline", "PlayerName TEXT(11)", "boolean TEXT");
+            } else {
+                Bukkit.getConsoleSender().sendMessage(FrameMainGet.getPrefix() + " §cNo MySQL not Activated, §aFuctions §care Disabled");
+            }
+            api.onUpdate();
+        } else if (getConfig().getString("language").equalsIgnoreCase("de_DE")) {
+            pet.getClass();
+            if (getInstance().getConfig().getBoolean("NoNight")) {
+                api.NoNight();
+            } else {
+                Bukkit.getConsoleSender().sendMessage(FrameMainGet.getPrefix() + " §cNo Night ausgeschaltet!");
+            }
+            if (getConfig().getBoolean("MessageOfReload.Boolean")) {
+                api.sendMessageofReload();
+            }
+            if (getConfig().getBoolean("MYSQL.Boolean")) {
+                if (WarpSigns.UtilinConfigList("Bank")) {
+
+                }
+                SQL.createTable("pays", "PlayerTo TEXT(11)", "payAmount INT", " PlayerFrom TEXT");
+                SQL.createTable("offline", "PlayerName TEXT(11)", "boolean TEXT");
+            } else {
+                Bukkit.getConsoleSender().sendMessage(FrameMainGet.getPrefix() + " §cMYSQL ist nicht aktiviert");
+            }
+            api.onUpdate();
+        } else {
+            Bukkit.getConsoleSender().sendMessage(FrameMainGet.getPrefix() + " §4Please use en_EN or de_DE!!!");
+        }
+        Bukkit.getConsoleSender().sendMessage(FrameMainGet.getPrefix() + " §c§lEnergy is Work in Progress!");
+        Thread thread = new Thread(new SchedulerManager());
+        new BukkitRunnable() {
+            @Override
+            public void run() {
+                thread.start();
+            }
+        }.runTaskLater(this,320);
+        api.init();
+        new Init(this);
+        Bukkit.getConsoleSender().sendMessage(FrameMainGet.getPrefix() + " §6Successfully Loaded!!!");
+    }
+
+    public void onDisable() {
+        for (String name : Pets.Pet.keySet()) {
+            Pets.Pet.get(name).remove();
+        }
+        Bukkit.getConsoleSender().sendMessage(FrameMainGet.getPrefix() + " §aDeactivated!");
+        api.onUpdate();
+        if (getConfig().getBoolean("MYSQL.Boolean") &&
+                MYSQL.con != null) {
+            MYSQL.close();
+            Bukkit.getConsoleSender().sendMessage(FrameMainGet.getPrefix() + " " + MYSQL.MySQLPrefix + " §bMYSQL Closed!");
+            return;
+        }
+    }
+
+    public String[] animation = new String[]{ "§b§l" +
+            getNameThis() + "", "§3§l" +
+            getNameThis() + "", "§9§l" +
+            getNameThis() + "", "§6§l" +
+            getNameThis() + "", "§7§l" +
+            getNameThis() + "", "§1§l" +
+            getNameThis() + "", "§f§l" +
+            getNameThis() + "", "§e§l" +
+            getNameThis() + "", "§d§l" +
+            getNameThis() + "" };
+
+    public static Main getInstance() {
+        return mi;
+    }
+
+    public static void updateCheckerPlayer(Player player) {
+        player.sendMessage(FrameMainGet.getPrefix() + " Checking for updates...");
+        try {
+            URLConnection conn = new URL("https://api.spigotmc.org/legacy/update.php?resource=" + resource).openConnection();
+            BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));
+            String oldVersion = Main.getInstance().getDescription().getVersion();
+            String newVersion = br.readLine();
+            if (!newVersion.equalsIgnoreCase(oldVersion)) {
+                    player.sendMessage(FrameMainGet.getPrefix() + " A new update is available: version " + newVersion);
+                    TextComponent tc = new TextComponent();
+                    tc.setText(FrameMainGet.getPrefix() + " §6[§bKlick Hier für die Seite zu öffnen§6]");
+                    tc.setHoverEvent(new HoverEvent(HoverEvent.Action.SHOW_TEXT, new ComponentBuilder(" öffne Download Seite").create()));
+                    tc.setClickEvent(new ClickEvent(ClickEvent.Action.OPEN_URL, "https://www.spigotmc.org/resources/frameapi.68558/"));
+                    player.spigot().sendMessage(tc);
+            } else {
+                player.sendMessage(FrameMainGet.getPrefix() + " You're running the newest plugin version!");
+            }
+        } catch (IOException e) {
+            player.sendMessage(FrameMainGet.getPrefix() + " Failed to check for updates on spigotmc.org");
+        }
+    }
+        public static void dispatch(final CommandSender sender, final String command) {
+        try {
+            boolean bool = (Boolean) Bukkit.getScheduler().callSyncMethod((Plugin) getInstance(), new Callable<Boolean>() {
+                public Boolean call() {
+                    return Bukkit.dispatchCommand(sender, command);
+                }
+            }).get();
+        } catch (InterruptedException | ExecutionException e) {
+            e.printStackTrace();
+        }
+        }
+
+    public MongoManager getMongoManager() {
+        return this.mongoManager;
+    }
+
+    public BackendManager getBackendManager() {
+        return this.backendManager;
+    }
+
+
+    public Runnable savePlayersInventory() {
+        return new Runnable() {
+            @Override
+            public void run() {
+                new BukkitRunnable() {
+                    @Override
+                    public void run() {
+                        Bukkit.getOnlinePlayers().forEach(o -> {
+                            new SavePlayersInventory().savePlayerInventory(o);
+                        });
+                    }
+                }.runTaskTimer(Main.getInstance(),0,1200);
+            }
+        };
+    }
+    public String getNameThis() {
+        this.namethis = getConfig().getString("Tablist.Header");
+        return this.namethis;
+    }
+
+    public void setname(String namethis) {
+        namethis = getConfig().getString("Tablist.Header");
+        this.namethis = namethis;
+    }
+
+    public ArrayList<OfflinePlayer> getPlayers() {
+        ArrayList<OfflinePlayer> playertop = new ArrayList<>();
+        if (getConfig().getBoolean("MYSQL.Boolean")) {
+            try {
+                Statement statement = MYSQL.getConnection().createStatement();
+                ResultSet res = statement.executeQuery("SELECT * FROM offline WHERE boolean = 'yes';");
+                int spalten = res.getMetaData().getColumnCount();
+                while (res.next()) {
+                    String[] str = new String[8];
+                    for (int k = 1; k <= spalten; k++) {
+                        str[k - 1] = res.getString(k);
+                        OfflinePlayer p = Bukkit.getOfflinePlayer(res.getString(k));
+                        if (!playertop.contains(p)) {
+                            playertop.add(p);
+                        }
+                    }
+                }
+            } catch (SQLException e) {
+                e.printStackTrace();
+            }
+        }
+        return playertop;
+    }
+
+    @EventHandler
+    public void onColorChatMessage(AsyncPlayerChatEvent e) {
+        String msg = e.getMessage();
+        msg = msg.replace('&', '§');
+        e.setMessage(msg);
+    }
+
+    public boolean onCommand(CommandSender sender, Command command, String label, String[] args) {
+        if (command.getName().equalsIgnoreCase("getcocktail")) {
+            Cocktail cocktail = new Cocktail(100, 100, true);
+            if (sender instanceof Player) {
+                Player player = (Player) sender;
+                player.getInventory().addItem(cocktail.build());
+            }
+        }
+        if (command.getName().equalsIgnoreCase("getwheat")) {
+            if (sender instanceof BlockCommandSender) {
+                Block player = ((BlockCommandSender)sender).getBlock();
+                new CropsManager().getWheat(player.getWorld(), player.getLocation().getBlockX() + 10, player.getLocation().getBlockX() - 10, player.getLocation().getBlockY() + 10, player.getLocation().getBlockY() - 10, player.getLocation().getBlockZ() + 10, player.getLocation().getBlockZ() - 10);
+            }
+        }
+        if (command.getName().equalsIgnoreCase("setwheat")) {
+            if (sender instanceof BlockCommandSender) {
+                Block player = ((BlockCommandSender)sender).getBlock();
+                new CropsManager().setWheat(player.getWorld(),player.getLocation().getBlockX() + 10, player.getLocation().getBlockX() - 10, player.getLocation().getBlockY() + 10, player.getLocation().getBlockY() - 10, player.getLocation().getBlockZ() + 10, player.getLocation().getBlockZ() - 10);
+            }
+        }
+        if (command.getName().equalsIgnoreCase("getcarrot")) {
+            if (sender instanceof BlockCommandSender) {
+                Block player = ((BlockCommandSender)sender).getBlock();
+                new CropsManager().getCarrot(player.getWorld(), player.getLocation().getBlockX() + 10, player.getLocation().getBlockX() - 10, player.getLocation().getBlockY() + 10, player.getLocation().getBlockY() - 10, player.getLocation().getBlockZ() + 10, player.getLocation().getBlockZ() - 10);
+            }
+        }
+        if (command.getName().equalsIgnoreCase("setcarrot")) {
+            if (sender instanceof BlockCommandSender) {
+                Block player = ((BlockCommandSender)sender).getBlock();
+                new CropsManager().setCarrot(player.getWorld(), player.getLocation().getBlockX() + 10, player.getLocation().getBlockX() - 10, player.getLocation().getBlockY() + 10, player.getLocation().getBlockY() - 10, player.getLocation().getBlockZ() + 10, player.getLocation().getBlockZ() - 10);
+            }
+        }
+        if (command.getName().equalsIgnoreCase("getpotato")) {
+            if (sender instanceof BlockCommandSender) {
+                Block player = ((BlockCommandSender)sender).getBlock();
+                new CropsManager().getPotato(player.getWorld(), player.getLocation().getBlockX() + 10, player.getLocation().getBlockX() - 10, player.getLocation().getBlockY() + 10, player.getLocation().getBlockY() - 10, player.getLocation().getBlockZ() + 10, player.getLocation().getBlockZ() - 10);
+            }
+        }
+        if (command.getName().equalsIgnoreCase("setpotato")) {
+            if (sender instanceof BlockCommandSender) {
+                Block player = ((BlockCommandSender)sender).getBlock();
+                new CropsManager().setPotato(player.getWorld(), player.getLocation().getBlockX() + 10, player.getLocation().getBlockX() - 10, player.getLocation().getBlockY() + 10, player.getLocation().getBlockY() - 10, player.getLocation().getBlockZ() + 10, player.getLocation().getBlockZ() - 10);
+            }
+        }
+        if (command.getName().equalsIgnoreCase("setsugarcane")) {
+            if (sender instanceof BlockCommandSender) {
+                Block player = ((BlockCommandSender)sender).getBlock();
+                new CropsManager().setSugarCane(player.getWorld(), player.getLocation().getBlockX() + 10, player.getLocation().getBlockX() - 10, player.getLocation().getBlockY() + 10, player.getLocation().getBlockY() - 10, player.getLocation().getBlockZ() + 10, player.getLocation().getBlockZ() - 10);
+            }
+        }
+        if (command.getName().equalsIgnoreCase("getsugarcane")) {
+            if (sender instanceof BlockCommandSender) {
+                Block player = ((BlockCommandSender)sender).getBlock();
+                new CropsManager().getSugarCane(player.getWorld(), player.getLocation().getBlockX() + 10, player.getLocation().getBlockX() - 10, player.getLocation().getBlockY() + 10, player.getLocation().getBlockY() - 10, player.getLocation().getBlockZ() + 10, player.getLocation().getBlockZ() - 10);
+            }
+        }
+        if (command.getName().equalsIgnoreCase("tps")) {
+            if (sender.hasPermission("frameapi.tps")) {
+                double TPS = Lags.getTPS();
+                DecimalFormat TpsFormat = new DecimalFormat("#.##");
+                if (TPS > 20.0D) {
+                    sender.sendMessage(ChatColor.DARK_GREEN + "TPS : " + TpsFormat.format(TPS));
+                    return true;
+                }
+                if (TPS > 19.0D) {
+                    sender.sendMessage(ChatColor.GREEN + "TPS : " + TpsFormat.format(TPS));
+                    return true;
+                }
+                if (TPS > 14.0D) {
+                    sender.sendMessage(ChatColor.YELLOW + "TPS : " + TpsFormat.format(TPS));
+                    return true;
+                }
+                if (TPS > 9.0D) {
+                    sender.sendMessage(ChatColor.RED + "TPS : " + TpsFormat.format(TPS));
+                    return true;
+                }
+                if (TPS < 9.0D) {
+                    sender.sendMessage(ChatColor.DARK_RED + "TPS : " + TpsFormat.format(TPS));
+                    return true;
+                }
+            }
+        } else if (command.getName().equalsIgnoreCase("cleartps") && sender.hasPermission("frameapi.cleartps")) {
+            Bukkit.getScheduler().scheduleSyncDelayedTask((Plugin) this, new Runnable() {
+                public void run() {
+                    for (World world : Bukkit.getWorlds()) {
+                        for (Chunk chunk : world.getLoadedChunks()) {
+                            for (Entity ent : chunk.getEntities()) {
+                                if (!(ent instanceof Player)) {
+                                    Main.this.entitys = (ArrayList<String>) Main.this.cfg.getStringList("Entitys");
+                                    if (!Main.this.entitys.contains(ent.getType().name())) {
+                                        ent.remove();
+                                    }
+                                }
+                            }
+                        }
+                    }
+                    Bukkit.broadcastMessage(FrameMainGet.getPrefix() + " §cAll Entitys Deleted!");
+                }
+            }, 60L);
+        }
+
+        if (command.getName().equalsIgnoreCase("addentity")) {
+            if (sender.hasPermission("frameapi.addentity")) {
+                if (args.length == 1) {
+                    String ent = args[0];
+                    this.entitys = (ArrayList<String>) this.cfg.getStringList("Entitys");
+                    if (this.entitys.contains(EntityType.fromName(ent).name())) {
+                        this.entitys.remove(EntityType.fromName(ent).name());
+                        this.cfg.set("Entitys", this.entitys);
+                        try {
+                            this.cfg.save(file);
+                        } catch (IOException e) {
+                            e.printStackTrace();
+                        }
+                        sender.sendMessage("§a" + EntityType.fromName(ent).name() + " §bremoved");
+                    } else {
+                        this.entitys.add(EntityType.fromName(ent).name());
+                        this.cfg.set("Entitys", this.entitys);
+                        try {
+                            this.cfg.save(file);
+                        } catch (IOException e) {
+                            e.printStackTrace();
+                        }
+                        if (!file.exists()) {
+                            try {
+                                file.createNewFile();
+                            } catch (IOException e) {
+                                e.printStackTrace();
+                            }
+                        }
+                        sender.sendMessage("§a" + EntityType.fromName(ent).name() + " §bAdded");
+                    }
+                } else {
+                    sender.sendMessage("§cPlease use §b/addentity (entitytype)");
+                }
+            } else {
+                sender.sendMessage(FrameMainGet.getPrefix() + " " + FrameMainGet.getNoPerm());
+            }
+        }
+        if (command.getName().equalsIgnoreCase("health") && sender instanceof Player) {
+            GetMoneyInTime timeMoney = new GetMoneyInTime(getInstance());
+            Player p = (Player) sender;
+            if (p.getHealth() <= 6.0D) {
+                p.setMaxHealth(20.0D);
+                p.sendTitle("§aAlle Herzen erstellt", "");
+                Bukkit.getScheduler().cancelTasks((Plugin) this);
+                api.onUpdate();
+                timeMoney.getMoneyinTime();
+            } else {
+                runTask(p);
+                p.setMaxHealth(6.0D);
+                p.sendTitle("§aDrei Herzen erstellt", "");
+            }
+        }
+
+        if (command.getName().equalsIgnoreCase("sethealth") && sender instanceof Player) {
+            Player p = (Player) sender;
+            if (args.length == 1) {
+                double x = Double.parseDouble(args[0]);
+                p.setMaxHealth(x * 2.0D);
+                return true;
+            }
+            if (args.length == 2) {
+                Player target = Bukkit.getPlayer(args[0]);
+                double x = Double.parseDouble(args[1]);
+                if (target != null) {
+                    target.setMaxHealth(x * 2.0D);
+                    p.sendMessage(args[0] + " §a sind seine herzen nun auf " + x);
+                } else {
+                    p.sendMessage(args[0] + " §aist nicht Online");
+                }
+            }
+        }
+        return super.onCommand(sender, command, label, args);
+    }
+
+    public void runTask(final Player p) {
+        Bukkit.getScheduler().runTaskTimer((Plugin) this, new Runnable() {
+            public void run() {
+                if (p.getLevel() == 3) {
+                    p.setMaxHealth(7.0D);
+                } else if (p.getLevel() == 6) {
+                    p.setMaxHealth(8.0D);
+                } else if (p.getLevel() == 8) {
+                    p.setMaxHealth(10.0D);
+                } else if (p.getLevel() == 10) {
+                    p.setMaxHealth(12.0D);
+                } else if (p.getLevel() == 12) {
+                    p.setMaxHealth(14.0D);
+                } else if (p.getLevel() == 14) {
+                    p.setMaxHealth(16.0D);
+                } else if (p.getLevel() == 16) {
+                    p.setMaxHealth(18.0D);
+                } else if (p.getLevel() == 18) {
+                    p.setMaxHealth(20.0D);
+                } else if (p.getLevel() == 20) {
+                    p.setMaxHealth(22.0D);
+                } else if (p.getLevel() == 22) {
+                    p.setMaxHealth(24.0D);
+                }
+            }
+        }, 0L, 20L);
+    }
+
+    public void checkUpdate() {
+        Bukkit.getConsoleSender().sendMessage(FrameMainGet.getPrefix() + " Checking for updates...");
+        try {
+            URLConnection conn = new URL("https://api.spigotmc.org/legacy/update.php?resource=" + resource).openConnection();
+            BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));
+            String oldVersion = Main.getInstance().getDescription().getVersion();
+            String newVersion = br.readLine();
+            if (!newVersion.equalsIgnoreCase(oldVersion)) {
+                    Bukkit.getConsoleSender().sendMessage(FrameMainGet.getPrefix() + " A new update is available: version " + newVersion);
+            } else {
+                Bukkit.getConsoleSender().sendMessage(FrameMainGet.getPrefix() + " You're running the newest plugin version!");
+            }
+        } catch (MalformedURLException e) {
+            Bukkit.getConsoleSender().sendMessage(FrameMainGet.getPrefix() + " Failed to check for updates on spigotmc.org");
+        } catch (IOException e) {
+            Bukkit.getConsoleSender().sendMessage(FrameMainGet.getPrefix() + " Failed to check for updates on spigotmc.org");
+        }
+    }
+
+    public boolean deleteWorld(File path) {
+
+        if (path.exists()) {
+            File[] files = path.listFiles();
+            for (int i = 0; i < files.length; i++) {
+                if (files[i].isDirectory()) {
+                    deleteWorld(files[i]);
+                } else {
+                    files[i].delete();
+                }
+            }
+        }
+        return path.delete();
+    }
+
+    public List<String> onTabComplete(CommandSender sender, Command command, String alias, String[] args) {
+        if (command.getName().equalsIgnoreCase("addentity")) {
+            ArrayList<String> type = new ArrayList<>();
+            for (EntityType types : EntityType.values()) {
+                type.add(types.name());
+            }
+            return type;
+        }
+        return super.onTabComplete(sender, command, alias, args);
+    }
+
+    public static class FrameMainGet {
+        public static String getPrefix() {
+            Main.prefix = Main.getInstance().getConfig().getString("Prefix");
+            Main.prefix = Main.prefix.replace('&', '§');
+            return Main.prefix;
+        }
+
+        public static void setPrefix(String prefix) {
+            prefix = Main.getInstance().getConfig().getString("Prefix");
+            prefix = prefix.replace('&', '§');
+            Main.noperm = Main.noperm.replace('\"','\'');
+            Main.getInstance();
+            Main.prefix = prefix;
+
+        }
+
+        public static String getNoPerm() {
+            Main.noperm = Main.getInstance().getConfig().getString("NoPerm");
+            Main.noperm = ReplaceCharConfig.replaceParagraph(Main.noperm);
+            Main.noperm = Main.noperm.replace('\"','\'');
+            return Main.noperm;
+        }
+
+        public static void setNoPerm(String noperm) {
+            noperm = Main.getInstance().getConfig().getString("NoPerm");
+            noperm = ReplaceCharConfig.replaceParagraph(noperm);
+            Main.noperm = noperm;
+        }
+    }
+
+    public static String getPrefix() {
+        Main.prefix = Main.getInstance().getConfig().getString("Prefix");
+        Main.prefix = Main.prefix.replace('&', '§');
+        return Main.prefix;
+    }
+
+    public static void setPrefix(String prefix) {
+        prefix = Main.getInstance().getConfig().getString("Prefix");
+        prefix = prefix.replace('&', '§');
+        Main.noperm = Main.noperm.replace('\"','\'');
+        Main.getInstance();
+        Main.prefix = prefix;
+
+    }
+
+    public static String getNoPerm() {
+        Main.noperm = Main.getInstance().getConfig().getString("NoPerm");
+        Main.noperm = ReplaceCharConfig.replaceParagraph(Main.noperm);
+        Main.noperm = Main.noperm.replace('\"','\'');
+        return Main.noperm;
+    }
+
+    public static void setNoPerm(String noperm) {
+        noperm = Main.getInstance().getConfig().getString("NoPerm");
+        noperm = ReplaceCharConfig.replaceParagraph(noperm);
+        Main.noperm = noperm;
+    }
+}
\ No newline at end of file
Index: src/main/java/de/framedev/frameapi/enums/MaterialInID.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/de/framedev/frameapi/enums/MaterialInID.java	(date 1590188194802)
+++ src/main/java/de/framedev/frameapi/enums/MaterialInID.java	(date 1590188194802)
@@ -0,0 +1,2576 @@
+package de.framedev.frameapi.enums;
+
+import org.bukkit.Material;
+import org.bukkit.inventory.ItemStack;
+
+
+public enum MaterialInID {
+    AIR("AIR", Material.AIR, 0, 0),
+    STONE("STONE", Material.STONE, 1, 0),
+    GRASS("GRASS", Material.GRASS_BLOCK, 2, 0),
+    DIRT("DIRT", Material.DIRT, 3, 0),
+    COBBLESTONE("COBBLESTONE", Material.COBBLESTONE, 4, 0),
+    OAK_WOOD_PLANKS("OAK_PLANKS", Material.OAK_PLANKS, 5, 0),
+    OAK_SAPLING("OAK_SAPLING", Material.OAK_SAPLING, 6, 0),
+    BEDROCK("BEDROCK", Material.BEDROCK, 7, 0),
+    FLOWING_WATER("FLOWING_WATER", Material.WATER, 8, 0),
+    WATER("WATER", Material.WATER, 9, 0),
+    FLOWING_LAVA("FLOWING_LAVA", Material.LAVA, 10, 0),
+    LAVA("LAVA", Material.LAVA, 11, 0),
+    SAND("SAND", Material.SAND, 12, 0),
+    GRAVEL("GRAVEL", Material.GRAVEL, 13, 0),
+    GOLD_ORE("GOLD_ORE", Material.GOLD_ORE, 14, 0),
+    IRON_ORE("IRON_ORE", Material.IRON_ORE, 15, 0),
+    COAL_ORE("COAL_ORE", Material.COAL_ORE, 16, 0),
+    OAK_WOOD("OAK_WOOD", Material.OAK_WOOD, 17, 0),
+    OAK_LEAVES("OAK_LEAVES", Material.OAK_LEAVES, 18, 0),
+    SPONGE("SPONGE", Material.SPONGE, 19, 0),
+    GLASS("GLASS", Material.GLASS, 20, 0),
+    LAPIS_ORE("LAPIS_ORE", Material.LAPIS_ORE, 21, 0),
+    LAPIS_BLOCK("LAPIS_BLOCK", Material.LAPIS_BLOCK, 22, 0),
+    DISPENSER("DISPENSER", Material.DISPENSER, 23, 0),
+    SANDSTONE("SANDSTONE", Material.SANDSTONE, 24, 0),
+    NOTE_BLOCK("NOTE_BLOCK", Material.NOTE_BLOCK, 25, 0),
+    BED("BED", Material.WHITE_BED, 26, 0),
+    POWERED_RAIL("POWERED_RAIL", Material.POWERED_RAIL, 27, 0),
+    DETECTOR_RAIL("DETECTOR_RAIL", Material.DETECTOR_RAIL, 28, 0),
+    STICKY_PISTON("STICKY_PISTON", Material.STICKY_PISTON, 29, 0),
+    COBWEB("COBWEB", Material.COBWEB, 30, 0),
+    DEAD_SHRUB("DEAD_SHRUB", Material.DEAD_BUSH, 31, 0),
+    PISTON("PISTON", Material.PISTON, 33, 0),
+    PISTON_HEAD("PISTON_HEAD", Material.PISTON_HEAD, 34, 0),
+    WHITE_WOOL("WHITE_WOOL", Material.WHITE_WOOL, 35, 0),
+    DANDELION("DANDELION", Material.DANDELION, 37, 0),
+    POPPY("POPPY", Material.POPPY, 38, 0),
+    BROWN_MUSHROOM("BROWN_MUSHROOM", Material.BROWN_MUSHROOM, 39, 0),
+    RED_MUSHROOM("RED_MUSHROOM", Material.RED_MUSHROOM, 40, 0),
+    GOLD_BLOCK("GOLD_BLOCK", Material.GOLD_BLOCK, 41, 0),
+    IRON_BLOCK("IRON_BLOCK", Material.IRON_BLOCK, 42, 0),
+    BRICKS("BRICKS", Material.BRICKS, 45, 0),
+    TNT("TNT", Material.TNT, 46, 0),
+    BOOKSHELF("BOOKSHELF", Material.BOOKSHELF, 47, 0),
+    MOSS_STONE("MOSS_STONE", Material.MOSSY_COBBLESTONE, 48, 0),
+    OBSIDIAN("OBSIDIAN", Material.OBSIDIAN, 49, 0),
+    TORCH("TORCH", Material.TORCH, 50, 0),
+    FIRE("FIRE", Material.FIRE, 51, 0),
+    MOB_SPAWNER("MOB_SPAWNER", Material.SPAWNER, 52, 0),
+    OAK_WOOD_STAIRS("OAK_WOOD_STAIRS", Material.OAK_STAIRS, 53, 0),
+    CHEST("CHEST", Material.CHEST, 54, 0),
+    REDSTONE_WIRE("REDSTONE_WIRE", Material.REDSTONE_WIRE, 55, 0),
+    DIAMOND_ORE("DIAMOND_ORE", Material.DIAMOND_ORE, 56, 0),
+    DIAMOND_BLOCK("DIAMOND_BLOCK", Material.DIAMOND_BLOCK, 57, 0),
+    CRAFTING_TABLE("CRAFTING_TABLE", Material.CRAFTING_TABLE, 58, 0),
+    WHEAT_CROPS("WHEAT_CROPS", Material.WHEAT, 59, 0),
+    FARMLAND("FARMLAND", Material.FARMLAND, 60, 0),
+    FURNACE("FURNACE", Material.FURNACE, 61, 0),
+    BURNING_FURNACE("BURNING_FURNACE", Material.LEGACY_BURNING_FURNACE, 62, 0),
+
+    STANDING_SIGN("STANDING_SIGN", Material.OAK_SIGN, 63, 0),
+    OAK_DOOR("OAK_DOOR", Material.OAK_DOOR, 64, 0),
+    LADDER("LADDER", Material.LADDER, 65, 0),
+    RAIL("RAIL", Material.RAIL, 66, 0),
+    COBBLESTONE_STAIRS("COBBLESTONE_STAIRS", Material.COBBLESTONE_STAIRS, 67, 0),
+    WALL_SIGN("WALL_SIGN", Material.OAK_WALL_SIGN, 68, 0),
+    LEVER("LEVER", Material.LEVER, 69, 0),
+    STONE_PRESSURE_PLATE("STONE_PRESSURE_PLATE", Material.STONE_PRESSURE_PLATE, 70, 0),
+    IRON_DOOR("IRON_DOOR", Material.IRON_DOOR, 71, 0),
+    OAK_PRESSURE_PLATE("OAK_PRESSURE_PLATE", Material.OAK_PRESSURE_PLATE, 72, 0),
+    REDSTONE_ORE("REDSTONE_ORE", Material.REDSTONE_ORE, 73, 0),
+    GLOWING_REDSTONE_ORE("GLOWING_REDSTONE_ORE", Material.LEGACY_GLOWING_REDSTONE_ORE, 74, 0),
+
+    REDSTONE_TORCH_OFF("REDSTONE_TORCH_OFF", Material.LEGACY_REDSTONE_TORCH_OFF, 75, 0),
+
+    REDSTONE_TORCH("REDSTONE_TORCH", Material.REDSTONE_TORCH, 76, 0),
+    STONE_BUTTON("STONE_BUTTON", Material.STONE_BUTTON, 77, 0),
+    SNOW_LAYER("SNOW_LAYER", Material.SNOW, 78, 0),
+    ICE("ICE", Material.ICE, 79, 0),
+    SNOW_BLOCK("SNOW_BLOCK", Material.SNOW_BLOCK, 80, 0),
+    CACTUS("CACTUS", Material.CACTUS, 81, 0),
+    CLAY("CLAY", Material.CLAY, 82, 0),
+    SUGAR_CANES("SUGAR_CANES", Material.SUGAR_CANE, 83, 0),
+    JUKEBOX("JUKEBOX", Material.JUKEBOX, 84, 0),
+    OAK_FENCE("OAK_FENCE", Material.OAK_FENCE, 85, 0),
+    PUMPKIN("PUMPKIN", Material.PUMPKIN, 86, 0),
+    NETHERRACK("NETHERRACK", Material.NETHERRACK, 87, 0),
+    SOUL_SAND("SOUL_SAND", Material.SOUL_SAND, 88, 0),
+    GLOWSTONE("GLOWSTONE", Material.GLOWSTONE, 89, 0),
+    NETHER_PORTAL("NETHER_PORTAL", Material.NETHER_PORTAL, 90, 0),
+    JACK_O_LANTERN("JACK_O_LANTERN", Material.JACK_O_LANTERN, 91, 0),
+    CAKE_BLOCK("CAKE_BLOCK", Material.CAKE, 92, 0),
+    WHITE_STAINED_GLASS("WHITE_STAINED_GLASS", Material.WHITE_STAINED_GLASS, 93, 0),
+    OAK_TRAPDOOR("OAK_TRAPDOOR", Material.OAK_TRAPDOOR, 96, 0),
+    STONE_MONSTER_EGG("STONE_MONSTER_EGG", Material.LEGACY_MONSTER_EGG, 97, 0),
+
+    STONEBRICK("STONEBRICK", Material.STONE_BRICKS, 98, 0),
+    BROWN_MUSHROOM_BLOCK("BROWN_MUSHROOM_BLOCK", Material.BROWN_MUSHROOM_BLOCK, 99, 0),
+    RED_MUSHROOM_BLOCK("RED_MUSHROOM_BLOCK", Material.RED_MUSHROOM_BLOCK, 100, 0),
+    IRON_BARS("IRON_BARS", Material.IRON_BARS, 101, 0),
+    GLASS_PANE("GLASS_PANE", Material.GLASS_PANE, 102, 0),
+    MELON_BLOCK("MELON_BLOCK", Material.LEGACY_MELON_BLOCK, 103, 0),
+
+    PUMPKIN_STEM("PUMPKIN_STEM", Material.PUMPKIN_STEM, 104, 0),
+    MELON_STEM("MELON_STEM", Material.MELON_STEM, 105, 0),
+    VINES("MELON_STEM", Material.VINE, 106, 0),
+    OAK_FENCE_GATE("OAK_FENCE_GATE", Material.OAK_FENCE_GATE, 107, 0),
+    BRICK_STAIRS("BRICK_STAIRS", Material.BRICK_STAIRS, 108, 0),
+    STONE_BRICK_STAIRS("STONE_BRICK_STAIRS", Material.STONE_BRICK_STAIRS, 109, 0),
+    MYCELIUM("MYCELIUM", Material.MYCELIUM, 110, 0),
+    LILY_PAD("LILYPAD", Material.LILY_PAD, 111, 0),
+    NETHER_BRICK("NETHER_BRICK", Material.NETHER_BRICK, 112, 0),
+    NETHER_BRICK_FENCE("NETHER_BRICK_FENCE", Material.NETHER_BRICK_FENCE, 113, 0),
+    NETHER_BRICK_STAIRS("NETHER_BRICK_STAIRS", Material.NETHER_BRICK_STAIRS, 114, 0),
+    NETHER_WART("NETHER_WART", Material.NETHER_WART, 115, 0),
+    ENCHANTING_TABLE("ENCHANTMENT_TABLE", Material.ENCHANTING_TABLE, 116, 0),
+    BREWING_STAND("BREWING_STAND", Material.BREWING_STAND, 117, 0),
+    CAULDRON("CAULDRON", Material.CAULDRON, 118, 0),
+    END_PORTAL("END_PORTAL", Material.END_PORTAL, 119, 0),
+    END_PORTAL_FRAME("END_PORTAL_FRAME", Material.END_PORTAL_FRAME, 120, 0),
+    END_STONE("END_STONE", Material.END_STONE, 121, 0),
+    DRAGON_EGG("DRAGON_EGG", Material.DRAGON_EGG, 122, 0),
+    REDSTONE_LAMP("REDSTONE_LAMP", Material.REDSTONE_LAMP, 123, 0),
+    REDSTONE_LAMP_ON("REDSTONE_LAMP_ON", Material.LEGACY_REDSTONE_LAMP_ON, 124, 0),
+
+    DOUBLE_OAK_WOOD_SLAB("DOUBLE_OAK_WOOD_SLAB", Material.OAK_SLAB, 125, 0),
+    OAK_WOOD_SLAB("OAK_WOOD_SLAB", Material.OAK_SLAB, 126, 0),
+    COCOA("COCOA", Material.COCOA, 127, 0),
+    SANDSTONE_STAIRS("SANDSTONE_STAIRS", Material.SANDSTONE_STAIRS, 128, 0),
+    EMERALD_ORE("EMERALD_ORE", Material.EMERALD_ORE, 129, 0),
+    ENDER_CHEST("ENDER_CHEST", Material.ENDER_CHEST, 130, 0),
+    TRIPWIRE_HOOK("TRIPWIRE_HOOK", Material.TRIPWIRE_HOOK, 131, 0),
+    TRIPWIRE("TRIPWIRE", Material.TRIPWIRE, 132, 0),
+    EMERALD_BLOCK("EMERALD_BLOCK", Material.EMERALD_BLOCK, 133, 0),
+    SPRUCE_WOOD_STAIRS("SPRUCE_WOOD_STAIRS", Material.LEGACY_SPRUCE_WOOD_STAIRS, 134, 0),
+
+    BIRCH_WOOD_STAIRS("BIRCH_WOOD_STAIRS", Material.LEGACY_BIRCH_WOOD_STAIRS, 135, 0),
+
+    JUNGLE_WOOD_STAIRS("JUNGLE_WOOD_STAIRS", Material.LEGACY_JUNGLE_WOOD_STAIRS, 136, 0),
+
+    COMMAND_BLOCK("COMMAND_BLOCK", Material.COMMAND_BLOCK, 137, 0),
+    BEACON("BEACON", Material.BEACON, 138, 0),
+    COBBLESTONE_WALL("COBBLESTONE_WALL", Material.COBBLESTONE_WALL, 139, 0),
+    FLOWER_POT("FLOWER_POT", Material.FLOWER_POT, 140, 0),
+    CARROTS("CARROTS", Material.CARROTS, 141, 0),
+    POTATOES("POTATOES", Material.POTATOES, 142, 0),
+    WOODEN_BUTTON("WOODEN_BUTTON", Material.OAK_BUTTON, 143, 0),
+    MOB_HEAD("MOB_HEAD", Material.LEGACY_SKULL_ITEM, 144, 0),
+
+    ANVIL("ANVIL", Material.ANVIL, 145, 0),
+    TRAPPED_CHEST("TRAPPED_CHEST", Material.TRAPPED_CHEST, 146, 0),
+    LIGHT_WEIGHTED_PRESSURE_PLATE("LIGHT_WEIGHTED_PRESSURE_PLATE", Material.LIGHT_WEIGHTED_PRESSURE_PLATE, 147, 0),
+    HEAVY_WEIGHTED_PRESSURE_PLATE("HEAVY_WEIGHTED_PRESSURE_PLATE", Material.HEAVY_WEIGHTED_PRESSURE_PLATE, 148, 0),
+    UNPOWERED_COMPARATOR("UNPOWERED_COMPARATOR", Material.COMPARATOR, 149, 0),
+    COMPARATOR("UNPOWERED_COMPARATOR", Material.COMPARATOR, 150, 0),
+    DAYLIGHT_DETECTOR("DAYLIGHT_SENSOR", Material.DAYLIGHT_DETECTOR, 151, 0),
+    REDSTONE_BLOCK("REDSTONE_BLOCK", Material.REDSTONE_BLOCK, 152, 0),
+    NETHER_QUARTZ_ORE("NETHER_QUARTZ_ORE", Material.NETHER_QUARTZ_ORE, 153, 0),
+    HOPPER("HOPPER", Material.HOPPER, 154, 0),
+    QUARTZ_BLOCK("QUARTZ_BLOCK", Material.QUARTZ_BLOCK, 155, 0),
+    QUARTZ_STAIRS("QUARTZ_STAIRS", Material.QUARTZ_STAIRS, 156, 0),
+    ACTIVATOR_RAIL("ACTIVATOR_RAIL", Material.ACTIVATOR_RAIL, 157, 0),
+    DROPPER("DROPPER", Material.DROPPER, 158, 0),
+    WHITE_HARDENED_CLAY("WHITE_HARDENED_CLAY", Material.LEGACY_HARD_CLAY, 159, 0),
+
+    WHITE_STAINED_GLASS_PANE("WHITE_STAINED_GLASS_PANE", Material.WHITE_STAINED_GLASS_PANE, 160, 0),
+    ACACIA_WOOD("ACACIA_WOOD", Material.ACACIA_WOOD, 162, 0),
+    ACACIA_LEAVES("ACACIA_LEAVES", Material.ACACIA_LEAVES, 161, 0),
+    ACACIA_STAIRS("ACACIA_STAIRS", Material.ACACIA_STAIRS, 163, 0),
+    DARK_OAK_STAIRS("DARK_OAK_STAIRS", Material.DARK_OAK_STAIRS, 164, 0),
+    SLIME_BLOCK("SLIME_BLOCK", Material.SLIME_BLOCK, 165, 0),
+    BARRIER("BARRIER", Material.BARRIER, 166, 0),
+    IRON_TRAPDOOR("IRON_TRAPDOOR", Material.IRON_TRAPDOOR, 167, 0),
+    PRISMARINE("PRISMARINE", Material.PRISMARINE, 168, 0),
+    SEA_LANTERN("SEA_LANTERN", Material.SEA_LANTERN, 169, 0),
+    HAY_BLOCK("HAY_BLOCK", Material.HAY_BLOCK, 170, 0),
+    WHITE_CARPET("WHITE_CARPET", Material.WHITE_CARPET, 171, 0),
+    HARDENED_CLAY("HARDENED_CLAY", Material.LEGACY_HARD_CLAY, 172, 0),
+
+    COAL_BLOCK("COAL_BLOCK", Material.COAL_BLOCK, 173, 0),
+    PACKED_ICE("PACKED_ICE", Material.PACKED_ICE, 174, 0),
+    SUNFLOWER("SUNFLOWER", Material.SUNFLOWER, 175, 0),
+    STANDING_BANNER("STANDING_BANNER", Material.LEGACY_STANDING_BANNER, 176, 0),
+
+    WALL_BANNER("WALL_BANNER", Material.LEGACY_WALL_BANNER, 177, 0),
+
+    INVERTED_DAYLIGHT_SENSOR("INVERTED_DAYLIGHT_SENSOR", Material.DAYLIGHT_DETECTOR, 178, 0),
+    RED_SANDSTONE("RED_SANDSTONE", Material.RED_SANDSTONE, 179, 0),
+    RED_SANDSTONE_STAIRS("RED_SANDSTONE_STAIRS", Material.RED_SANDSTONE_STAIRS, 180, 0),
+    RED_SANDSTONE_SLAB("RED_SANDSTONE_SLAB", Material.RED_SANDSTONE_SLAB, 182, 0),
+    SPRUCE_FENCE_GATE("SPRUCE_FENCE_GATE", Material.SPRUCE_FENCE_GATE, 183, 0),
+    BIRCH_FENCE_GATE("BIRCH_FENCE_GATE", Material.BIRCH_FENCE_GATE, 184, 0),
+    JUNGLE_FENCE_GATE("JUNGLE_FENCE_GATE", Material.JUNGLE_FENCE_GATE, 185, 0),
+    DARK_OAK_FENCE_GATE("DARK_OAK_FENCE_GATE", Material.DARK_OAK_FENCE_GATE, 186, 0),
+    ACACIA_FENCE_GATE("ACACIA_FENCE_GATE", Material.ACACIA_FENCE_GATE, 187, 0),
+    SPRUCE_FENCE("SPRUCE_FENCE", Material.SPRUCE_FENCE, 188, 0),
+    BIRCH_FENCE("BIRCH_FENCE", Material.BIRCH_FENCE, 189, 0),
+    JUNGLE_FENCE("JUNGLE_FENCE", Material.JUNGLE_FENCE, 190, 0),
+    DARK_OAK_FENCE("DARK_OAK_FENCE", Material.DARK_OAK_FENCE, 191, 0),
+    ACACIA_FENCE("ACACIA_FENCE", Material.ACACIA_FENCE, 192, 0),
+    SPRUCE_DOOR("SPRUCE_DOOR", Material.SPRUCE_DOOR, 193, 0),
+    BIRCH_DOOR("BIRCH_DOOR", Material.BIRCH_DOOR, 194, 0),
+    JUNGLE_DOOR("JUNGLE_DOOR", Material.JUNGLE_DOOR, 195, 0),
+    ACACIA_DOOR("ACACIA_DOOR", Material.ACACIA_DOOR, 196, 0),
+    DARK_OAK_DOOR("DARK_OAK_DOOR", Material.DARK_OAK_DOOR, 197, 0),
+    END_ROD("END_ROD", Material.END_ROD, 198, 0),
+    CHORUS_PLANT("CHORUS_PLANT", Material.CHORUS_PLANT, 199, 0),
+    CHORUS_FLOWER("CHORUS_FLOWER", Material.CHORUS_FLOWER, 200, 0),
+    PURPUR_BLOCK("PURPUR_BLOCK", Material.PURPUR_BLOCK, 201, 0),
+    PURPUR_PILLAR("PURPUR_PILLAR", Material.PURPUR_PILLAR, 202, 0),
+    PURPUR_STAIRS("PURPUR_STAIRS", Material.PURPUR_STAIRS, 203, 0),
+    PURPUR_SLAB("PURPUR_SLAB", Material.PURPUR_SLAB, 205, 0),
+    END_STONE_BRICKS("END_BRICKS", Material.END_STONE_BRICKS, 206, 0),
+    BEETROOT("BEETROOT", Material.BEETROOT, 207, 0),
+    GRASS_PATH("GRASS_PATH", Material.GRASS_PATH, 208, 0),
+    END_GATEWAY("END_GATEWAY", Material.END_GATEWAY, 209, 0),
+    REPEATING_COMMAND_BLOCK("REPEATING_COMMAND_BLOCK", Material.REPEATING_COMMAND_BLOCK, 210, 0),
+    CHAIN_COMMAND_BLOCK("CHAIN_COMMAND_BLOCK", Material.CHAIN_COMMAND_BLOCK, 211, 0),
+    FROSTED_ICE("FROSTED_ICE", Material.FROSTED_ICE, 212, 0),
+    MAGMA_BLOCK("MAGMA_BLOCK", Material.MAGMA_BLOCK, 213, 0),
+    NETHER_WART_BLOCK("NETHER_WART_BLOCK", Material.NETHER_WART_BLOCK, 214, 0),
+    RED_NETHER_BRICK("RED_NETHER_BRICK", Material.RED_NETHER_BRICKS, 215, 0),
+    BONE_BLOCK("BONE_BLOCK", Material.BONE_BLOCK, 216, 0),
+    STRUCTURE_VOID("STRUCTURE_VOID", Material.STRUCTURE_VOID, 217, 0),
+    OBSERVER("OBSERVER", Material.OBSERVER, 218, 0),
+    WHITE_SHULKER_BOX("WHITE_SHULKER_BOX", Material.WHITE_SHULKER_BOX, 219, 0),
+    ORANGE_SHULKER_BOX("ORANGE_SHULKER_BOX", Material.ORANGE_SHULKER_BOX, 220, 0),
+    MAGENTA_SHULKER_BOX("MAGENTA_SHULKER_BOX", Material.MAGENTA_SHULKER_BOX, 221, 0),
+    LIGHT_BLUE_SHULKER_BOX("LIGHT_BLUE_SHULKER_BOX", Material.LIGHT_BLUE_SHULKER_BOX, 222, 0),
+    YELLOW_SHULKER_BOX("YELLOW_SHULKER_BOX", Material.YELLOW_SHULKER_BOX, 223, 0),
+    LIME_SHULKER_BOX("LIME_SHULKER_BOX", Material.LIME_SHULKER_BOX, 224, 0),
+    PINK_SHULKER_BOX("PINK_SHULKER_BOX", Material.PINK_SHULKER_BOX, 225, 0),
+    GRAY_SHULKER_BOX("GRAY_SHULKER_BOX", Material.GRAY_SHULKER_BOX, 226, 0),
+    LIGHT_GRAY_SHULKER_BOX("LIGHT_GRAY_SHULKER_BOX", Material.LIGHT_GRAY_SHULKER_BOX, 227, 0),
+    CYAN_SHULKER_BOX("CYAN_SHULKER_BOX", Material.CYAN_SHULKER_BOX, 228, 0),
+    PURPLE_SHULKER_BOX("PURPLE_SHULKER_BOX", Material.PURPLE_SHULKER_BOX, 229, 0),
+    BLUE_SHULKER_BOX("BLUE_SHULKER_BOX", Material.BLUE_SHULKER_BOX, 230, 0),
+    BROWN_SHULKER_BOX("BROWN_SHULKER_BOX", Material.BROWN_SHULKER_BOX, 231, 0),
+    GREEN_SHULKER_BOX("GREEN_SHULKER_BOX", Material.GREEN_SHULKER_BOX, 232, 0),
+    RED_SHULKER_BOX("RED_SHULKER_BOX", Material.RED_SHULKER_BOX, 233, 0),
+    BLACK_SHULKER_BOX("BLACK_SHULKER_BOX", Material.BLACK_SHULKER_BOX, 234, 0),
+    WHITE_GLAZED_TERRACOTTA("WHITE_GLAZED_TERRACOTTA", Material.WHITE_GLAZED_TERRACOTTA, 235, 0),
+    ORANGE_GLAZED_TERRACOTTA("ORANGE_GLAZED_TERRACOTTA", Material.ORANGE_GLAZED_TERRACOTTA, 236, 0),
+    MAGENTA_GLAZED_TERRACOTTA("MAGENTA_GLAZED_TERRACOTTA", Material.MAGENTA_GLAZED_TERRACOTTA, 237, 0),
+    LIGHT_BLUE_GLAZED_TERRACOTTA("LIGHT_BLUE_GLAZED_TERRACOTTA", Material.LIGHT_BLUE_GLAZED_TERRACOTTA, 238, 0),
+    YELLOW_GLAZED_TERRACOTTA("YELLOW_BLUE_GLAZED_TERRACOTTA", Material.YELLOW_GLAZED_TERRACOTTA, 239, 0),
+    LIME_GLAZED_TERRACOTTA("LIME_BLUE_GLAZED_TERRACOTTA", Material.LIME_GLAZED_TERRACOTTA, 240, 0),
+    PINK_GLAZED_TERRACOTTA("PINK_GLAZED_TERRACOTTA", Material.PINK_GLAZED_TERRACOTTA, 241, 0),
+    GRAY_GLAZED_TERRACOTTA("GRAY_GLAZED_TERRACOTTA", Material.GRAY_GLAZED_TERRACOTTA, 242, 0),
+    LIGHT_GRAY_GLAZED_TERRACOTTA("LIGHT_GRAY_GLAZED_TERRACOTTA", Material.LIGHT_GRAY_GLAZED_TERRACOTTA, 243, 0),
+    CYAN_GLAZED_TERRACOTTA("CYAN_GLAZED_TERRACOTTA", Material.CYAN_GLAZED_TERRACOTTA, 244, 0),
+    PURPLE_GLAZED_TERRACOTTA("PURPLE_GLAZED_TERRACOTTA", Material.PURPLE_GLAZED_TERRACOTTA, 245, 0),
+    BLUE_GLAZED_TERRACOTTA("BLUE_GLAZED_TERRACOTTA", Material.BLUE_GLAZED_TERRACOTTA, 246, 0),
+    BROWN_GLAZED_TERRACOTTA("BROWN_GLAZED_TERRACOTTA", Material.BROWN_GLAZED_TERRACOTTA, 247, 0),
+    GREEN_GLAZED_TERRACOTTA("GREEN_GLAZED_TERRACOTTA", Material.GREEN_GLAZED_TERRACOTTA, 248, 0),
+    RED_GLAZED_TERRACOTTA("RED_GLAZED_TERRACOTTA", Material.RED_GLAZED_TERRACOTTA, 249, 0),
+    BLACK_GLAZED_TERRACOTTA("BLACK_GLAZED_TERRACOTTA", Material.BLACK_GLAZED_TERRACOTTA, 250, 0);
+
+    String name;
+
+    int subid;
+    Material item;
+    int id;
+
+    MaterialInID(String name, Material item, int id, int subid) {
+        this.id = id;
+        this.name = name;
+        this.item = item;
+        this.subid = subid;
+    }
+
+    public static ItemStack ItemsinID(int id) {
+        if (id == 0) {
+            Material x = AIR.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 1) {
+            Material x = STONE.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 2) {
+            Material x = GRASS.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 3) {
+            Material x = DIRT.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 4) {
+            Material x = COBBLESTONE.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 5) {
+            Material x = OAK_WOOD_PLANKS.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 6) {
+            Material x = OAK_SAPLING.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 7) {
+            Material x = BEDROCK.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 8) {
+            Material x = FLOWING_WATER.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 9) {
+            Material x = WATER.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 10) {
+            Material x = FLOWING_LAVA.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 11) {
+            Material x = LAVA.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 12) {
+            Material x = SAND.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 13) {
+            Material x = GRAVEL.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 14) {
+            Material x = GOLD_ORE.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 15) {
+            Material x = IRON_ORE.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 16) {
+            Material x = COAL_ORE.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 17) {
+            Material x = OAK_WOOD.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 18) {
+            Material x = OAK_LEAVES.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 19) {
+            Material x = SPONGE.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 20) {
+            Material x = GLASS.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 21) {
+            Material x = LAPIS_ORE.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 22) {
+            Material x = LAPIS_BLOCK.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 23) {
+            Material x = DISPENSER.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 24) {
+            Material x = SANDSTONE.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 25) {
+            Material x = NOTE_BLOCK.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 26) {
+            Material x = BED.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 27) {
+            Material x = POWERED_RAIL.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 28) {
+            Material x = DETECTOR_RAIL.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 29) {
+            Material x = STICKY_PISTON.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 30) {
+            Material x = COBWEB.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 31) {
+            Material x = DEAD_SHRUB.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 33) {
+            Material x = PISTON.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 34) {
+            Material x = PISTON_HEAD.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 35) {
+            Material x = WHITE_WOOL.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 37) {
+            Material x = DANDELION.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 38) {
+            Material x = POPPY.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 39) {
+            Material x = BROWN_MUSHROOM.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 40) {
+            Material x = RED_MUSHROOM.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 41) {
+            Material x = GOLD_BLOCK.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 42) {
+            Material x = IRON_BLOCK.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 45) {
+            Material x = BRICKS.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 46) {
+            Material x = TNT.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 47) {
+            Material x = BOOKSHELF.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 48) {
+            Material x = MOSS_STONE.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 49) {
+            Material x = OBSIDIAN.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 50) {
+            Material x = TORCH.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 51) {
+            Material x = FIRE.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 52) {
+            Material x = MOB_SPAWNER.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 53) {
+            Material x = OAK_WOOD_STAIRS.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 54) {
+            Material x = CHEST.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 55) {
+            Material x = REDSTONE_WIRE.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 56) {
+            Material x = DIAMOND_ORE.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 57) {
+            Material x = DIAMOND_BLOCK.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 58) {
+            Material x = CRAFTING_TABLE.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 59) {
+            Material x = WHEAT_CROPS.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 60) {
+            Material x = FARMLAND.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 61) {
+            Material x = FURNACE.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 62) {
+            Material x = BURNING_FURNACE.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 63) {
+            Material x = STANDING_SIGN.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 64) {
+            Material x = OAK_DOOR.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 65) {
+            Material x = LADDER.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 66) {
+            Material x = RAIL.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 67) {
+            Material x = COBBLESTONE_STAIRS.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 68) {
+            Material x = WALL_SIGN.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 69) {
+            Material x = LEVER.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 70) {
+            Material x = STONE_PRESSURE_PLATE.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 71) {
+            Material x = IRON_DOOR.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 72) {
+            Material x = OAK_PRESSURE_PLATE.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 73) {
+            Material x = REDSTONE_ORE.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 74) {
+            Material x = GLOWING_REDSTONE_ORE.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 75) {
+            Material x = REDSTONE_TORCH_OFF.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 76) {
+            Material x = REDSTONE_TORCH.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 77) {
+            Material x = STONE_BUTTON.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 78) {
+            Material x = SNOW_LAYER.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 79) {
+            Material x = ICE.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 80) {
+            Material x = SNOW_BLOCK.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 81) {
+            Material x = CACTUS.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 82) {
+            Material x = CLAY.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 83) {
+            Material x = SUGAR_CANES.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 84) {
+            Material x = JUKEBOX.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 85) {
+            Material x = OAK_FENCE.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 86) {
+            Material x = PUMPKIN.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 87) {
+            Material x = NETHERRACK.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 88) {
+            Material x = SOUL_SAND.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 89) {
+            Material x = GLOWSTONE.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 90) {
+            Material x = NETHER_PORTAL.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 91) {
+            Material x = JACK_O_LANTERN.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 92) {
+            Material x = CAKE_BLOCK.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 93) {
+            Material x = WHITE_STAINED_GLASS.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 96) {
+            Material x = OAK_TRAPDOOR.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 97) {
+            Material x = STONE_MONSTER_EGG.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 98) {
+            Material x = STONEBRICK.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 99) {
+            Material x = BROWN_MUSHROOM_BLOCK.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 100) {
+            Material x = RED_MUSHROOM_BLOCK.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 101) {
+            Material x = IRON_BARS.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 102) {
+            Material x = GLASS_PANE.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 103) {
+            Material x = MELON_BLOCK.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 104) {
+            Material x = PUMPKIN_STEM.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 105) {
+            Material x = MELON_STEM.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 106) {
+            Material x = VINES.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 107) {
+            Material x = OAK_FENCE_GATE.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 108) {
+            Material x = BRICK_STAIRS.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 109) {
+            Material x = STONE_BRICK_STAIRS.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 110) {
+            Material x = MYCELIUM.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 111) {
+            Material x = LILY_PAD.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 112) {
+            Material x = NETHER_BRICK.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 113) {
+            Material x = NETHER_BRICK_FENCE.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 114) {
+            Material x = NETHER_BRICK_STAIRS.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 115) {
+            Material x = NETHER_WART.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 116) {
+            Material x = ENCHANTING_TABLE.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 117) {
+            Material x = BREWING_STAND.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 118) {
+            Material x = CAULDRON.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 119) {
+            Material x = END_PORTAL.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 120) {
+            Material x = END_PORTAL_FRAME.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 121) {
+            Material x = END_STONE.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 122) {
+            Material x = DRAGON_EGG.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 123) {
+            Material x = REDSTONE_LAMP.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 124) {
+            Material x = REDSTONE_LAMP_ON.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 125) {
+            Material x = DOUBLE_OAK_WOOD_SLAB.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 126) {
+            Material x = OAK_WOOD_SLAB.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 127) {
+            Material x = COCOA.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 128) {
+            Material x = SANDSTONE_STAIRS.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 129) {
+            Material x = EMERALD_ORE.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 130) {
+            Material x = ENDER_CHEST.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 131) {
+            Material x = TRIPWIRE_HOOK.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 132) {
+            Material x = TRIPWIRE.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 133) {
+            Material x = EMERALD_BLOCK.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 134) {
+            Material x = SPRUCE_WOOD_STAIRS.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 135) {
+            Material x = BIRCH_WOOD_STAIRS.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 136) {
+            Material x = JUNGLE_WOOD_STAIRS.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 137) {
+            Material x = COMMAND_BLOCK.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 138) {
+            Material x = BEACON.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 139) {
+            Material x = COBBLESTONE_WALL.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 140) {
+            Material x = FLOWER_POT.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 141) {
+            Material x = CARROTS.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 142) {
+            Material x = POTATOES.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 143) {
+            Material x = WOODEN_BUTTON.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 144) {
+            Material x = MOB_HEAD.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 145) {
+            Material x = ANVIL.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 146) {
+            Material x = TRAPPED_CHEST.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 147) {
+            Material x = LIGHT_WEIGHTED_PRESSURE_PLATE.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 148) {
+            Material x = HEAVY_WEIGHTED_PRESSURE_PLATE.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 149) {
+            Material x = UNPOWERED_COMPARATOR.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 150) {
+            Material x = COMPARATOR.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 151) {
+            Material x = DAYLIGHT_DETECTOR.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 152) {
+            Material x = REDSTONE_BLOCK.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 153) {
+            Material x = NETHER_QUARTZ_ORE.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 154) {
+            Material x = HOPPER.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 155) {
+            Material x = QUARTZ_BLOCK.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 156) {
+            Material x = QUARTZ_STAIRS.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 157) {
+            Material x = ACTIVATOR_RAIL.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 158) {
+            Material x = DROPPER.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 159) {
+            Material x = WHITE_HARDENED_CLAY.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 160) {
+            Material x = WHITE_STAINED_GLASS_PANE.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 161) {
+            Material x = ACACIA_LEAVES.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 162) {
+            Material x = ACACIA_WOOD.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 163) {
+            Material x = ACACIA_STAIRS.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 164) {
+            Material x = DARK_OAK_STAIRS.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 165) {
+            Material x = SLIME_BLOCK.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 166) {
+            Material x = BARRIER.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 167) {
+            Material x = IRON_TRAPDOOR.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 168) {
+            Material x = PRISMARINE.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 169) {
+            Material x = SEA_LANTERN.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 170) {
+            Material x = HAY_BLOCK.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 171) {
+            Material x = WHITE_CARPET.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 172) {
+            Material x = HARDENED_CLAY.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 173) {
+            Material x = COAL_BLOCK.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 174) {
+            Material x = PACKED_ICE.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 175) {
+            Material x = SUNFLOWER.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 176) {
+            Material x = STANDING_BANNER.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 177) {
+            Material x = WALL_BANNER.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 178) {
+            Material x = INVERTED_DAYLIGHT_SENSOR.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 179) {
+            Material x = RED_SANDSTONE.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 180) {
+            Material x = RED_SANDSTONE_STAIRS.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 182) {
+            Material x = RED_SANDSTONE_SLAB.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 183) {
+            Material x = SPRUCE_FENCE_GATE.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 184) {
+            Material x = BIRCH_FENCE_GATE.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 185) {
+            Material x = JUNGLE_FENCE_GATE.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 186) {
+            Material x = DARK_OAK_FENCE_GATE.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 187) {
+            Material x = ACACIA_FENCE_GATE.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 188) {
+            Material x = SPRUCE_FENCE.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 189) {
+            Material x = BIRCH_FENCE.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 190) {
+            Material x = JUNGLE_FENCE.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 191) {
+            Material x = DARK_OAK_FENCE.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 192) {
+            Material x = ACACIA_FENCE.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 193) {
+            Material x = SPRUCE_DOOR.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 194) {
+            Material x = BIRCH_DOOR.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 195) {
+            Material x = JUNGLE_DOOR.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 196) {
+            Material x = ACACIA_DOOR.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 197) {
+            Material x = DARK_OAK_DOOR.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 198) {
+            Material x = END_ROD.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 199) {
+            Material x = CHORUS_PLANT.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 200) {
+            Material x = CHORUS_FLOWER.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 201) {
+            Material x = PURPUR_BLOCK.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 202) {
+            Material x = PURPUR_PILLAR.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 203) {
+            Material x = PURPUR_STAIRS.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 205) {
+            Material x = PURPUR_SLAB.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 206) {
+            Material x = END_STONE_BRICKS.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 207) {
+            Material x = BEETROOT.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 208) {
+            Material x = GRASS_PATH.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 209) {
+            Material x = END_GATEWAY.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 210) {
+            Material x = REPEATING_COMMAND_BLOCK.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 211) {
+            Material x = CHAIN_COMMAND_BLOCK.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 212) {
+            Material x = FROSTED_ICE.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 213) {
+            Material x = MAGMA_BLOCK.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 214) {
+            Material x = NETHER_WART_BLOCK.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 215) {
+            Material x = RED_NETHER_BRICK.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 216) {
+            Material x = BONE_BLOCK.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 217) {
+            Material x = STRUCTURE_VOID.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 218) {
+            Material x = OBSERVER.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 219) {
+            Material x = WHITE_SHULKER_BOX.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 220) {
+            Material x = ORANGE_SHULKER_BOX.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 221) {
+            Material x = MAGENTA_SHULKER_BOX.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 222) {
+            Material x = LIGHT_BLUE_SHULKER_BOX.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 223) {
+            Material x = YELLOW_SHULKER_BOX.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 224) {
+            Material x = LIME_SHULKER_BOX.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 225) {
+            Material x = PINK_SHULKER_BOX.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 226) {
+            Material x = GRAY_SHULKER_BOX.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 227) {
+            Material x = LIGHT_GRAY_SHULKER_BOX.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 228) {
+            Material x = CYAN_SHULKER_BOX.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 229) {
+            Material x = PURPLE_SHULKER_BOX.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 230) {
+            Material x = BLUE_SHULKER_BOX.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 231) {
+            Material x = BROWN_SHULKER_BOX.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 232) {
+            Material x = GREEN_SHULKER_BOX.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 233) {
+            Material x = RED_SHULKER_BOX.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 234) {
+            Material x = BLACK_SHULKER_BOX.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 235) {
+            Material x = WHITE_GLAZED_TERRACOTTA.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 236) {
+            Material x = ORANGE_GLAZED_TERRACOTTA.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 237) {
+            Material x = MAGENTA_GLAZED_TERRACOTTA.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 238) {
+            Material x = LIGHT_BLUE_GLAZED_TERRACOTTA.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 239) {
+            Material x = YELLOW_GLAZED_TERRACOTTA.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 240) {
+            Material x = LIME_GLAZED_TERRACOTTA.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 241) {
+            Material x = PINK_GLAZED_TERRACOTTA.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 242) {
+            Material x = GRAY_GLAZED_TERRACOTTA.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 243) {
+            Material x = LIGHT_GRAY_GLAZED_TERRACOTTA.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 244) {
+            Material x = CYAN_GLAZED_TERRACOTTA.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 245) {
+            Material x = PURPLE_GLAZED_TERRACOTTA.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 246) {
+            Material x = BLUE_GLAZED_TERRACOTTA.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 247) {
+            Material x = BROWN_GLAZED_TERRACOTTA.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 248) {
+            Material x = GREEN_GLAZED_TERRACOTTA.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 249) {
+            Material x = RED_GLAZED_TERRACOTTA.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 250) {
+            Material x = BLACK_GLAZED_TERRACOTTA.getItem();
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 251) {
+            Material x = Material.WHITE_CONCRETE;
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 252) {
+            Material x = Material.WHITE_CONCRETE_POWDER;
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 255) {
+            Material x = Material.STRUCTURE_BLOCK;
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 256) {
+            Material x = Material.IRON_SHOVEL;
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 257) {
+            Material x = Material.IRON_PICKAXE;
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 258) {
+            Material x = Material.IRON_AXE;
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 259) {
+            Material x = Material.FLINT_AND_STEEL;
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 260) {
+            Material x = Material.APPLE;
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 261) {
+            Material x = Material.BOW;
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 262) {
+            Material x = Material.ARROW;
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 263) {
+            Material x = Material.COAL;
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 264) {
+            Material x = Material.DIAMOND;
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 265) {
+            Material x = Material.IRON_INGOT;
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 266) {
+            Material x = Material.GOLD_INGOT;
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 267) {
+            Material x = Material.IRON_SWORD;
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 268) {
+            Material x = Material.WOODEN_SWORD;
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 269) {
+            Material x = Material.WOODEN_SHOVEL;
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 270) {
+            Material x = Material.WOODEN_PICKAXE;
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 271) {
+            Material x = Material.WOODEN_AXE;
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 272) {
+            Material x = Material.STONE_SWORD;
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 273) {
+            Material x = Material.STONE_SHOVEL;
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 274) {
+            Material x = Material.STONE_PICKAXE;
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 275) {
+            Material x = Material.STONE_AXE;
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 276) {
+            Material x = Material.DIAMOND_SWORD;
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 277) {
+            Material x = Material.DIAMOND_SHOVEL;
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 278) {
+            Material x = Material.DIAMOND_PICKAXE;
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 279) {
+            Material x = Material.DIAMOND_AXE;
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 280) {
+            Material x = Material.STICK;
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 281) {
+            Material x = Material.BOWL;
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 282) {
+            Material x = Material.MUSHROOM_STEW;
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 283) {
+            Material x = Material.GOLDEN_SWORD;
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 284) {
+            Material x = Material.GOLDEN_SHOVEL;
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 285) {
+            Material x = Material.GOLDEN_PICKAXE;
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 286) {
+            Material x = Material.GOLDEN_AXE;
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 287) {
+            Material x = Material.STRING;
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 288) {
+            Material x = Material.FEATHER;
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 289) {
+            Material x = Material.GUNPOWDER;
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 290) {
+            Material x = Material.WOODEN_HOE;
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 291) {
+            Material x = Material.STONE_HOE;
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 292) {
+            Material x = Material.IRON_HOE;
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 293) {
+            Material x = Material.DIAMOND_HOE;
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 294) {
+            Material x = Material.GOLDEN_HOE;
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 295) {
+            Material x = Material.WHEAT_SEEDS;
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 296) {
+            Material x = Material.WHEAT;
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 297) {
+            Material x = Material.BREAD;
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 298) {
+            Material x = Material.LEATHER_HELMET;
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 299) {
+            Material x = Material.LEATHER_CHESTPLATE;
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 300) {
+            Material x = Material.LEATHER_LEGGINGS;
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 301) {
+            Material x = Material.LEATHER_BOOTS;
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 302) {
+            Material x = Material.CHAINMAIL_HELMET;
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 303) {
+            Material x = Material.CHAINMAIL_CHESTPLATE;
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 304) {
+            Material x = Material.CHAINMAIL_LEGGINGS;
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 305) {
+            Material x = Material.CHAINMAIL_BOOTS;
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 306) {
+            Material x = Material.IRON_HELMET;
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 307) {
+            Material x = Material.IRON_CHESTPLATE;
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 308) {
+            Material x = Material.IRON_LEGGINGS;
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 309) {
+            Material x = Material.IRON_BOOTS;
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 310) {
+            Material x = Material.DIAMOND_HELMET;
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 311) {
+            Material x = Material.DIAMOND_CHESTPLATE;
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 312) {
+            Material x = Material.DIAMOND_LEGGINGS;
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 313) {
+            Material x = Material.DIAMOND_BOOTS;
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 314) {
+            Material x = Material.GOLDEN_HELMET;
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 315) {
+            Material x = Material.GOLDEN_CHESTPLATE;
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 316) {
+            Material x = Material.GOLDEN_LEGGINGS;
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 317) {
+            Material x = Material.GOLDEN_BOOTS;
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 318) {
+            Material x = Material.FLINT;
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 319) {
+            Material x = Material.PORKCHOP;
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 320) {
+            Material x = Material.COOKED_PORKCHOP;
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 321) {
+            Material x = Material.PAINTING;
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 322) {
+            Material x = Material.GOLDEN_APPLE;
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 323) {
+            Material x = Material.OAK_SIGN;
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 324) {
+            Material x = Material.OAK_DOOR;
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 325) {
+            Material x = Material.BUCKET;
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 326) {
+            Material x = Material.WATER_BUCKET;
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 327) {
+            Material x = Material.LAVA_BUCKET;
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 328) {
+            Material x = Material.MINECART;
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 329) {
+            Material x = Material.SADDLE;
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 330) {
+            Material x = Material.IRON_DOOR;
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 331) {
+            Material x = Material.REDSTONE;
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 332) {
+            Material x = Material.SNOWBALL;
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 333) {
+            Material x = Material.OAK_BOAT;
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 334) {
+            Material x = Material.LEATHER;
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 335) {
+            Material x = Material.MILK_BUCKET;
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 336) {
+            Material x = Material.BRICK;
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 337) {
+            Material x = Material.CLAY_BALL;
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 338) {
+            Material x = Material.SUGAR_CANE;
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 339) {
+            Material x = Material.PAPER;
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 340) {
+            Material x = Material.BOOK;
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 341) {
+            Material x = Material.SLIME_BALL;
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 342) {
+            Material x = Material.CHEST_MINECART;
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 343) {
+            Material x = Material.FURNACE_MINECART;
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 344) {
+            Material x = Material.EGG;
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 345) {
+            Material x = Material.COMPASS;
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 346) {
+            Material x = Material.FISHING_ROD;
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 347) {
+            Material x = Material.CLOCK;
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 348) {
+            Material x = Material.GLOWSTONE_DUST;
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 349) {
+
+            Material x = Material.LEGACY_RAW_FISH;
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 350) {
+
+            Material x = Material.LEGACY_COOKED_FISH;
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 351) {
+            Material x = Material.INK_SAC;
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 352) {
+            Material x = Material.BONE;
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 353) {
+            Material x = Material.SUGAR;
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 354) {
+            Material x = Material.CAKE;
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 355) {
+            Material x = Material.RED_BED;
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 356) {
+            Material x = Material.REPEATER;
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 357) {
+            Material x = Material.COOKIE;
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 358) {
+            Material x = Material.FILLED_MAP;
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 359) {
+            Material x = Material.SHEARS;
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 360) {
+            Material x = Material.MELON;
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 361) {
+            Material x = Material.PUMPKIN_SEEDS;
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 362) {
+            Material x = Material.MELON_SEEDS;
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 363) {
+            Material x = Material.BEEF;
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 364) {
+
+            Material x = Material.LEGACY_COOKED_BEEF;
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 365) {
+            Material x = Material.CHICKEN;
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 366) {
+            Material x = Material.COOKED_CHICKEN;
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 367) {
+            Material x = Material.ROTTEN_FLESH;
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 368) {
+            Material x = Material.ENDER_PEARL;
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 369) {
+            Material x = Material.BLAZE_ROD;
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 370) {
+            Material x = Material.GHAST_TEAR;
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 371) {
+            Material x = Material.GOLD_NUGGET;
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 372) {
+            Material x = Material.NETHER_WART;
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 373) {
+            Material x = Material.POTION;
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 374) {
+            Material x = Material.GLASS_BOTTLE;
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 375) {
+            Material x = Material.SPIDER_EYE;
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 376) {
+            Material x = Material.FERMENTED_SPIDER_EYE;
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 377) {
+            Material x = Material.BLAZE_POWDER;
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 378) {
+            Material x = Material.MAGMA_CREAM;
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 379) {
+            Material x = Material.BREWING_STAND;
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 380) {
+            Material x = Material.CAULDRON;
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 381) {
+            Material x = Material.ENDER_EYE;
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 382) {
+
+            Material x = Material.LEGACY_SPECKLED_MELON;
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 384) {
+            Material x = Material.EXPERIENCE_BOTTLE;
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 385) {
+            Material x = Material.FIRE_CHARGE;
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 386) {
+            Material x = Material.WRITABLE_BOOK;
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 387) {
+            Material x = Material.WRITTEN_BOOK;
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 388) {
+            Material x = Material.EMERALD;
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 389) {
+            Material x = Material.ITEM_FRAME;
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 390) {
+            Material x = Material.FLOWER_POT;
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 391) {
+            Material x = Material.CARROT;
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 392) {
+            Material x = Material.POTATO;
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 393) {
+            Material x = Material.BAKED_POTATO;
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 394) {
+            Material x = Material.POISONOUS_POTATO;
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 395) {
+            Material x = Material.MAP;
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 396) {
+            Material x = Material.GOLDEN_CARROT;
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 397) {
+
+            Material x = Material.LEGACY_SKULL;
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 398) {
+            Material x = Material.CARROT_ON_A_STICK;
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 399) {
+            Material x = Material.NETHER_STAR;
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 400) {
+            Material x = Material.PUMPKIN_PIE;
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 401) {
+            Material x = Material.FIREWORK_ROCKET;
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 402) {
+            Material x = Material.FIREWORK_STAR;
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 403) {
+            Material x = Material.ENCHANTED_BOOK;
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 404) {
+            Material x = Material.COMPARATOR;
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 405) {
+            Material x = Material.NETHER_BRICK;
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 406) {
+            Material x = Material.QUARTZ;
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 407) {
+            Material x = Material.TNT_MINECART;
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 408) {
+            Material x = Material.HOPPER_MINECART;
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 409) {
+            Material x = Material.PRISMARINE_SHARD;
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 410) {
+            Material x = Material.PRISMARINE_CRYSTALS;
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 411) {
+            Material x = Material.RABBIT;
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 412) {
+            Material x = Material.COOKED_RABBIT;
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 413) {
+            Material x = Material.RABBIT_STEW;
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 414) {
+            Material x = Material.RABBIT_FOOT;
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 415) {
+            Material x = Material.RABBIT_HIDE;
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 416) {
+            Material x = Material.ARMOR_STAND;
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 417) {
+            Material x = Material.IRON_HORSE_ARMOR;
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 418) {
+            Material x = Material.GOLDEN_HORSE_ARMOR;
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 419) {
+            Material x = Material.DIAMOND_HORSE_ARMOR;
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 420) {
+            Material x = Material.LEAD;
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 421) {
+            Material x = Material.NAME_TAG;
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 422) {
+            Material x = Material.COMMAND_BLOCK_MINECART;
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 423) {
+            Material x = Material.MUTTON;
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 424) {
+            Material x = Material.COOKED_MUTTON;
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 425) {
+            Material x = Material.WHITE_BANNER;
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 426) {
+            Material x = Material.END_CRYSTAL;
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 427) {
+            Material x = Material.SPRUCE_DOOR;
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 428) {
+            Material x = Material.BIRCH_DOOR;
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 429) {
+            Material x = Material.JUNGLE_DOOR;
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 430) {
+            Material x = Material.ACACIA_DOOR;
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 431) {
+            Material x = Material.DARK_OAK_DOOR;
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 432) {
+            Material x = Material.CHORUS_FRUIT;
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 433) {
+            Material x = Material.POPPED_CHORUS_FRUIT;
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 434) {
+            Material x = Material.BEETROOT;
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 435) {
+            Material x = Material.BEETROOT_SEEDS;
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 436) {
+            Material x = Material.BEETROOT_SOUP;
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 437) {
+            Material x = Material.DRAGON_BREATH;
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 438) {
+            Material x = Material.SPLASH_POTION;
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 439) {
+            Material x = Material.SPECTRAL_ARROW;
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 440) {
+            Material x = Material.TIPPED_ARROW;
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 441) {
+            Material x = Material.LINGERING_POTION;
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 442) {
+            Material x = Material.SHIELD;
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 443) {
+            Material x = Material.ELYTRA;
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 444) {
+            Material x = Material.SPRUCE_BOAT;
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 445) {
+            Material x = Material.BIRCH_BOAT;
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 446) {
+            Material x = Material.JUNGLE_BOAT;
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 447) {
+            Material x = Material.ACACIA_BOAT;
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 448) {
+            Material x = Material.DARK_OAK_BOAT;
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 449) {
+            Material x = Material.TOTEM_OF_UNDYING;
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 450) {
+            Material x = Material.SHULKER_SHELL;
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 452) {
+            Material x = Material.IRON_NUGGET;
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        if (id == 453) {
+            Material x = Material.KNOWLEDGE_BOOK;
+            ItemStack item = new ItemStack(x);
+            return item;
+        }
+        return null;
+    }
+
+
+    public int getSubid() {
+        return this.subid;
+    }
+
+
+    public void setSubid(int subid) {
+        this.subid = subid;
+    }
+
+    public ItemStack build() {
+        ItemStack item = new ItemStack(ItemsinID(this.id));
+        if (this.subid == 0) ;
+
+
+        item.setDurability((short) this.subid);
+        return item;
+    }
+
+
+    public String getName() {
+        return this.name;
+    }
+
+
+    public void setName(String name) {
+        this.name = name;
+    }
+
+
+    public Material getItem() {
+        return this.item;
+    }
+
+    public ItemStack getItemStack() {
+        return new ItemStack(item);
+    }
+
+    public void setItem(Material item) {
+        this.item = item;
+    }
+
+
+    public int getId() {
+        return this.id;
+    }
+
+
+    public void setId(int id) {
+        this.id = id;
+    }
+
+
+    public ItemStack getItemStackSubID(int id, int subid) {
+        for (int i = 0; i <= id; i++) {
+            ItemStack item = new ItemStack(ItemsinID(id));
+            if (item != null) {
+                item.setDurability((short) subid);
+                return item;
+            }
+        }
+        return null;
+    }
+
+
+    public ItemStack getItemStackinID(int id) {
+        int i = 0;
+        if (i <= id) {
+            ItemStack item = new ItemStack(ItemsinID(id));
+            if (item != null) {
+                return item;
+            }
+            return item;
+        }
+        return null;
+    }
+}
+
+
Index: src/main/java/de/framedev/frameapi/enums/EnergyEinheiten.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/de/framedev/frameapi/enums/EnergyEinheiten.java	(date 1583416258726)
+++ src/main/java/de/framedev/frameapi/enums/EnergyEinheiten.java	(date 1583416258726)
@@ -0,0 +1,40 @@
+ package de.framedev.frameapi.enums;
+ 
+ 
+ 
+ 
+ 
+ public enum EnergyEinheiten
+ {
+   VOLT("Volt", 140),
+   AMPERE("Ampere", 540),
+   MILIAMPERE("Miliampere", 100),
+   WATT("Watt", 10),
+   OHM("Ohm", 120);
+   
+   String name;
+   int amount;
+   
+   EnergyEinheiten(String name, int amount) {
+     this.amount = amount;
+     this.name = name;
+   }
+   
+   public String getName() {
+     return this.name;
+   }
+   
+   public void setName(String name) {
+     this.name = name;
+   }
+   
+   public int getAmount() {
+     return this.amount;
+   }
+   
+   public void setAmount(int amount) {
+     this.amount = amount;
+   }
+ }
+
+
Index: src/main/java/de/framedev/frameapi/glass/Cocktail.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/de/framedev/frameapi/glass/Cocktail.java	(date 1591734576791)
+++ src/main/java/de/framedev/frameapi/glass/Cocktail.java	(date 1591734576791)
@@ -0,0 +1,145 @@
+package de.framedev.frameapi.glass;
+
+import de.framedev.frameapi.main.Main;
+import org.bukkit.Bukkit;
+import org.bukkit.Color;
+import org.bukkit.Effect;
+import org.bukkit.Material;
+import org.bukkit.Sound;
+import org.bukkit.event.EventHandler;
+import org.bukkit.event.Listener;
+import org.bukkit.event.player.PlayerItemConsumeEvent;
+import org.bukkit.inventory.ItemStack;
+import org.bukkit.inventory.meta.ItemMeta;
+import org.bukkit.inventory.meta.PotionMeta;
+import org.bukkit.plugin.Plugin;
+import org.bukkit.potion.PotionData;
+import org.bukkit.potion.PotionType;
+
+
+public class Cocktail
+        extends Glas {
+    private boolean empty;
+    private int filled;
+    private int size;
+
+    public Cocktail(int size, int filled, boolean limete) {
+        super(size, filled);
+        this.itemstack = new ItemStack(Material.POTION);
+        this.itemMeta = (PotionMeta) this.itemstack.getItemMeta();
+        PotionData data = new PotionData(PotionType.WATER);
+        this.itemMeta.setBasePotionData(data);
+        this.itemMeta.setUnbreakable(true);
+        this.itemMeta.setColor(Color.fromRGB(2, 208, 152));
+        this.filled = filled;
+        this.size = size;
+        this.empty = (filled == 0);
+        this.limete = limete;
+        this.drinked = false;
+    }
+
+    private ItemStack itemstack;
+    private boolean limete;
+    private PotionMeta itemMeta;
+    private boolean drinked;
+
+    public static void register() {
+        Bukkit.getPluginManager().registerEvents(new event(), (Plugin) Main.getInstance());
+    }
+
+    public boolean isDrinked() {
+        return this.drinked;
+    }
+
+    public void setDrinked(boolean drinked) {
+        this.drinked = drinked;
+    }
+
+    public boolean isLimete() {
+        return this.limete;
+    }
+
+    public void setLimete(boolean limete) {
+        this.limete = limete;
+    }
+
+    public boolean isEmpty() {
+        return this.empty;
+    }
+
+    public void setEmpty(boolean empty) {
+        this.empty = empty;
+    }
+
+    public void onDrink() {
+        this.filled = 0;
+        this.empty = true;
+        this.limete = false;
+        this.drinked = true;
+    }
+
+    public void fill() {
+        this.filled = this.size;
+        this.drinked = false;
+    }
+
+    public int getFilled() {
+        return this.filled;
+    }
+
+    public void setFilled(int filled) {
+        this.filled = filled;
+    }
+
+    public int getSize() {
+        return this.size;
+    }
+
+    public void setSize(int size) {
+        this.size = size;
+    }
+
+    public ItemStack getItemstack() {
+        return this.itemstack;
+    }
+
+    public void setItemstack(ItemStack itemstack) {
+        this.itemstack = itemstack;
+    }
+
+    public PotionMeta getItemMeta() {
+        return this.itemMeta;
+    }
+
+    public void setItemMeta(PotionMeta itemMeta) {
+        this.itemMeta = itemMeta;
+    }
+
+    public ItemStack build() {
+        if (this.itemMeta != null) {
+            this.itemMeta.setDisplayName("§aCocktail");
+            this.itemstack.setItemMeta((ItemMeta) this.itemMeta);
+        }
+        return this.itemstack;
+    }
+
+    public static class event
+            implements Listener {
+        @EventHandler
+        public void onInteractCocktail(PlayerItemConsumeEvent e) {
+            if (e.getItem().getType() == Material.POTION && e
+                    .getItem().getItemMeta().getDisplayName().equalsIgnoreCase("§aCocktail")) {
+                Cocktail tail = new Cocktail(100, 100, true);
+                tail.onDrink();
+                e.getPlayer().sendMessage("§a§lCocktail §r§bgetrunken");
+                if (tail.isEmpty()) {
+                    e.getPlayer().playSound(e.getPlayer().getLocation(), Sound.ENTITY_EXPERIENCE_ORB_PICKUP, 1.0F, 1.0F);
+                    e.getPlayer().playEffect(e.getPlayer().getLocation(), Effect.ENDER_SIGNAL, 1000);
+                    e.getPlayer().setFoodLevel(e.getPlayer().getFoodLevel() + 4);
+                }
+            }
+        }
+    }
+}
+
+
Index: src/main/java/de/framedev/frameapi/glass/Glas.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/de/framedev/frameapi/glass/Glas.java	(date 1591734576480)
+++ src/main/java/de/framedev/frameapi/glass/Glas.java	(date 1591734576480)
@@ -0,0 +1,46 @@
+package de.framedev.frameapi.glass;
+
+import org.bukkit.Material;
+import org.bukkit.inventory.ItemStack;
+import org.bukkit.inventory.meta.ItemMeta;
+
+
+public class Glas {
+    private int size;
+    private int filled;
+    private boolean empty;
+    private ItemStack itemStack;
+    private ItemMeta potionMeta;
+
+    public Glas(int size, int filled) {
+        this.itemStack = new ItemStack(Material.GLASS_BOTTLE);
+        this.potionMeta = this.itemStack.getItemMeta();
+        this.potionMeta.setDisplayName("§aGlas");
+        this.size = size;
+        this.filled = filled;
+        this.empty = (filled == 0);
+    }
+
+    public boolean isEmpty() {
+        return this.empty;
+    }
+
+    public void fill() {
+        this.filled = this.size;
+        this.empty = false;
+    }
+
+    public void onDrink() {
+        this.empty = true;
+        this.filled = 0;
+    }
+
+    public ItemStack build() {
+        if (this.potionMeta != null) {
+            this.itemStack.setItemMeta(this.potionMeta);
+        }
+        return this.itemStack;
+    }
+}
+
+
Index: src/main/java/de/framedev/frameapi/mysql/InventoryStringDeSerializer.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/de/framedev/frameapi/mysql/InventoryStringDeSerializer.java	(date 1586976797114)
+++ src/main/java/de/framedev/frameapi/mysql/InventoryStringDeSerializer.java	(date 1586976797114)
@@ -0,0 +1,113 @@
+package de.framedev.frameapi.mysql;
+
+import org.bukkit.Bukkit;
+import org.bukkit.inventory.Inventory;
+import org.bukkit.inventory.ItemStack;
+import org.bukkit.inventory.PlayerInventory;
+import org.bukkit.util.io.BukkitObjectInputStream;
+import org.bukkit.util.io.BukkitObjectOutputStream;
+import org.yaml.snakeyaml.external.biz.base64Coder.Base64Coder;
+
+import java.io.ByteArrayInputStream;
+import java.io.ByteArrayOutputStream;
+import java.io.IOException;
+
+
+public class InventoryStringDeSerializer {
+    public static String playerInventoryToBase64(PlayerInventory playerInventory) throws IllegalStateException {
+        String content = toBase64((Inventory) playerInventory);
+
+        return content;
+    }
+
+
+    public static String playerArmorToBase64(PlayerInventory playerInventory) throws IllegalStateException {
+        String armor = itemStackArrayToBase64(playerInventory.getArmorContents());
+
+        return armor;
+    }
+
+
+    public static String itemStackArrayToBase64(ItemStack[] items) throws IllegalStateException {
+        try {
+            ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
+            BukkitObjectOutputStream dataOutput = new BukkitObjectOutputStream(outputStream);
+
+
+            dataOutput.writeInt(items.length);
+
+
+            for (int i = 0; i < items.length; i++) {
+                dataOutput.writeObject(items[i]);
+            }
+
+
+            dataOutput.close();
+            return Base64Coder.encodeLines(outputStream.toByteArray());
+        } catch (Exception e) {
+            throw new IllegalStateException("Unable to save item stacks.", e);
+        }
+    }
+
+
+    public static String toBase64(Inventory inventory) throws IllegalStateException {
+        try {
+            ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
+            BukkitObjectOutputStream dataOutput = new BukkitObjectOutputStream(outputStream);
+
+
+            dataOutput.writeInt(inventory.getSize());
+
+
+            for (int i = 0; i < inventory.getSize(); i++) {
+                dataOutput.writeObject(inventory.getItem(i));
+            }
+
+
+            dataOutput.close();
+            return Base64Coder.encodeLines(outputStream.toByteArray());
+        } catch (Exception e) {
+            throw new IllegalStateException("Unable to save item stacks.", e);
+        }
+    }
+
+
+    public static Inventory fromBase64(String data) throws IOException {
+        try {
+            ByteArrayInputStream inputStream = new ByteArrayInputStream(Base64Coder.decodeLines(data));
+            BukkitObjectInputStream dataInput = new BukkitObjectInputStream(inputStream);
+            Inventory inventory = Bukkit.getServer().createInventory(null, dataInput.readInt());
+
+
+            for (int i = 0; i < inventory.getSize(); i++) {
+                inventory.setItem(i, (ItemStack) dataInput.readObject());
+            }
+
+            dataInput.close();
+            return inventory;
+        } catch (ClassNotFoundException e) {
+            throw new IOException("Unable to decode class type.", e);
+        }
+    }
+
+
+    public static ItemStack[] itemStackArrayFromBase64(String data) throws IOException {
+        try {
+            ByteArrayInputStream inputStream = new ByteArrayInputStream(Base64Coder.decodeLines(data));
+            BukkitObjectInputStream dataInput = new BukkitObjectInputStream(inputStream);
+            ItemStack[] items = new ItemStack[dataInput.readInt()];
+
+
+            for (int i = 0; i < items.length; i++) {
+                items[i] = (ItemStack) dataInput.readObject();
+            }
+            System.out.print(items);
+            dataInput.close();
+            return items;
+        } catch (ClassNotFoundException e) {
+            throw new IOException("Unable to decode class type.", e);
+        }
+    }
+}
+
+
Index: src/main/java/de/framedev/frameapi/mysql/MYSQL.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/de/framedev/frameapi/mysql/MYSQL.java	(date 1592260173129)
+++ src/main/java/de/framedev/frameapi/mysql/MYSQL.java	(date 1592260173129)
@@ -0,0 +1,77 @@
+package de.framedev.frameapi.mysql;
+
+import de.framedev.frameapi.main.Main;
+
+import java.sql.Connection;
+import java.sql.DriverManager;
+import java.sql.SQLException;
+import java.util.concurrent.Executors;
+
+import org.bukkit.Bukkit;
+import org.bukkit.command.ConsoleCommandSender;
+
+
+public class MYSQL {
+    public static String MySQLPrefix = "§a[§bMySQL§a]";
+    public static String host = Main.getInstance().getConfig().getString("MYSQL.Host");
+    public static String user = Main.getInstance().getConfig().getString("MYSQL.User");
+    public static String password = Main.getInstance().getConfig().getString("MYSQL.Password");
+    public static String database = Main.getInstance().getConfig().getString("MYSQL.Database");
+    public static String port = Main.getInstance().getConfig().getString("MYSQL.Port");
+    public static Connection con;
+    static ConsoleCommandSender console = Bukkit.getConsoleSender();
+    static String JdbcURL = "jdbc:mysql://" + host + ":" + port + "/" + database + "?autoReconnect=true&useSSL=false";
+
+
+    public MYSQL() {
+    }
+
+    public static Connection getConnection() {
+        if (con == null) {
+            close();
+            try {
+                con = DriverManager.getConnection(JdbcURL, user, password);
+                return con;
+            } catch (SQLException ex) {
+
+            }
+        } else {
+            close();
+            try {
+                con = DriverManager.getConnection(JdbcURL, user, password);
+                return con;
+            } catch (SQLException ex) {
+
+            }
+        }
+        return con;
+    }
+
+    // connect
+    public static void connect() {
+        if (con == null) {
+            try {
+                con = DriverManager.getConnection(JdbcURL, user, password);
+                con.setNetworkTimeout(Executors.newFixedThreadPool(100), 1000000);
+                con.createStatement().executeUpdate("SET GLOBAL max_connections=1000;");
+                Bukkit.getConsoleSender().sendMessage(MySQLPrefix + "-Verbindung wurde aufgebaut!");
+            } catch (SQLException e) {
+                Bukkit.getConsoleSender().sendMessage(MySQLPrefix + " §cEin Fehler ist aufgetreten: §a" + e.getMessage());
+            }
+        }
+    }
+
+    public static void close() {
+        if (con != null) {
+            try {
+                if (con != null) {
+                    con.close();
+                }
+                con.close();
+            } catch (SQLException e) {
+                e.printStackTrace();
+            }
+        }
+    }
+}
+
Index: src/main/java/de/framedev/frameapi/mysql/IsTableExist.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/de/framedev/frameapi/mysql/IsTableExist.java	(date 1583416258983)
+++ src/main/java/de/framedev/frameapi/mysql/IsTableExist.java	(date 1583416258983)
@@ -0,0 +1,35 @@
+ package de.framedev.frameapi.mysql;
+ 
+ import java.sql.ResultSet;
+ import java.sql.SQLException;
+ import java.sql.Statement;
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ public class IsTableExist
+ {
+   public static boolean isExist(String table) {
+     MYSQL.connect();
+     try {
+       Statement statement = MYSQL.getConnection().createStatement();
+       ResultSet rs = statement.executeQuery("SHOW TABLES LIKE '" + table + "'");
+       if (rs.next()) {
+         return true;
+       }
+       return false;
+     
+     }
+     catch (SQLException e) {
+       e.printStackTrace();
+       
+       return false;
+     } 
+   }
+ }
+
+
Index: src/main/java/de/framedev/frameapi/mysql/SQL.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/de/framedev/frameapi/mysql/SQL.java	(date 1592601413196)
+++ src/main/java/de/framedev/frameapi/mysql/SQL.java	(date 1592601413196)
@@ -0,0 +1,208 @@
+package de.framedev.frameapi.mysql;
+
+import de.framedev.frameapi.main.Main;
+import org.bukkit.Bukkit;
+
+import java.sql.PreparedStatement;
+import java.sql.ResultSet;
+import java.sql.SQLException;
+import java.sql.Statement;
+
+
+public class SQL {
+    public static void createTable(String tablename, String... columns) {
+        StringBuilder stringBuilder = new StringBuilder();
+        for (int i = 0; i < columns.length; i++) {
+            stringBuilder.append(columns[i]);
+            if (i < columns.length - 1) {
+                stringBuilder.append(",");
+            }
+        }
+        String builder = stringBuilder.toString();
+        try {
+            String sql = "CREATE TABLE IF NOT EXISTS " + tablename + " (" + builder + ",Numbers INT AUTO_INCREMENT KEY,created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP);";
+            PreparedStatement stmt = MYSQL.getConnection().prepareStatement(sql);
+            stmt.executeUpdate();
+        } catch (SQLException e) {
+            Bukkit.getConsoleSender().sendMessage(Main.FrameMainGet.getPrefix() + "An Issue Create Table §6: §f" + e.getMessage());
+            Bukkit.getConsoleSender().sendMessage(Main.FrameMainGet.getPrefix() + "§6: §f" + e.getSQLState());
+            Bukkit.getConsoleSender().sendMessage(Main.FrameMainGet.getPrefix() + "§6: §f" + e.getErrorCode());
+        } finally {
+            if (MYSQL.con != null) {
+                MYSQL.close();
+            }
+        }
+    }
+
+    public static void insertData(String table, String data, String... columns) {
+        StringBuilder newStringBuilder = new StringBuilder();
+        for (int i = 0; i < columns.length; i++) {
+            newStringBuilder.append(columns[i]);
+            if (i < columns.length - 1) {
+                newStringBuilder.append(",");
+            }
+        }
+        StringBuilder stringBuilder = new StringBuilder();
+        stringBuilder.append("INSERT INTO " + table);
+        stringBuilder.append(" (").append(newStringBuilder.toString()).append(")").append(" VALUES ").append("(").append(data).append(")");
+        String builder2 = stringBuilder.toString();
+        try {
+            Statement stmt = MYSQL.getConnection().createStatement();
+            stmt.executeUpdate(builder2);
+        } catch (SQLException e) {
+            Bukkit.getConsoleSender().sendMessage(Main.FrameMainGet.getPrefix() + "An Issue insertData §6: §f" + e.getMessage());
+            Bukkit.getConsoleSender().sendMessage(Main.FrameMainGet.getPrefix() + "§6: §f" + e.getSQLState());
+            Bukkit.getConsoleSender().sendMessage(Main.FrameMainGet.getPrefix() + "§6: §f" + e.getErrorCode());
+        } finally {
+            if (MYSQL.con != null) {
+                MYSQL.close();
+            }
+        }
+    }
+
+    public static void updateData(String table, String selected, String data, String where) {
+        StringBuilder stringBuilder = new StringBuilder();
+        stringBuilder.append("UPDATE " + table + " SET ").append(selected + " = " + data).append(" WHERE " + where);
+        String sql = stringBuilder.toString();
+        try {
+            Statement stmt = MYSQL.getConnection().createStatement();
+            stmt.executeUpdate(sql);
+        } catch (SQLException e) {
+            Bukkit.getConsoleSender().sendMessage(Main.FrameMainGet.getPrefix() + "An Issue if updateData §6: §f" + e.getMessage());
+            Bukkit.getConsoleSender().sendMessage(Main.FrameMainGet.getPrefix() + "§6: §f" + e.getSQLState());
+            Bukkit.getConsoleSender().sendMessage(Main.FrameMainGet.getPrefix() + "§6: §f" + e.getErrorCode());
+        } finally {
+            if (MYSQL.con != null) {
+                MYSQL.close();
+            }
+        }
+    }
+
+
+    public static void deleteDataInTable(String table, String where) {
+        StringBuilder sb = new StringBuilder();
+        sb.append("DELETE FROM " + table)
+                .append(" WHERE " + where);
+        String sql = sb.toString();
+        try {
+            Statement stmt = MYSQL.getConnection().createStatement();
+            stmt.executeUpdate(sql);
+        } catch (SQLException e) {
+            Bukkit.getConsoleSender().sendMessage(Main.FrameMainGet.getPrefix() + "An Issue deleteData §6: §f" + e.getMessage());
+            Bukkit.getConsoleSender().sendMessage(Main.FrameMainGet.getPrefix() + "§6: §f" + e.getSQLState());
+            Bukkit.getConsoleSender().sendMessage(Main.FrameMainGet.getPrefix() + "§6: §f" + e.getErrorCode());
+        } finally {
+            if (MYSQL.con != null) {
+                MYSQL.close();
+            }
+        }
+    }
+
+    public static boolean exists(String table, String column, String data) {
+        StringBuilder stringBuilder = new StringBuilder();
+        stringBuilder.append("SELECT * FROM ")
+                .append(table)
+                .append(" WHERE ")
+                .append(column)
+                .append(" = '" + data + "';");
+
+        try {
+            Statement statement = MYSQL.getConnection().createStatement();
+            String sql = stringBuilder.toString();
+            ResultSet res = statement.executeQuery(sql);
+            if (res.next()) {
+                if (res.getString(column) == null) {
+                    return false;
+                }
+                return true;
+            }
+
+            return false;
+        } catch (SQLException e) {
+            Bukkit.getConsoleSender().sendMessage(Main.FrameMainGet.getPrefix() + "An Issue if Exists Data §6: §f" + e.getMessage());
+            Bukkit.getConsoleSender().sendMessage(Main.FrameMainGet.getPrefix() + "§6: §f" + e.getSQLState());
+            Bukkit.getConsoleSender().sendMessage(Main.FrameMainGet.getPrefix() + "§6: §f" + e.getErrorCode());
+        } finally {
+            if (MYSQL.con != null) {
+                MYSQL.close();
+            }
+        }
+        return false;
+    }
+
+
+    public static Object get(String table, String selected, String column, String data) {
+        Object o = null;
+        StringBuilder stringBuilder = new StringBuilder();
+        stringBuilder.append("SELECT * FROM ")
+                .append(table)
+                .append(" WHERE " + column + " = '")
+                .append(data)
+                .append("'");
+        String sql = stringBuilder.toString();
+        try {
+            Statement statement = MYSQL.getConnection().createStatement();
+            ResultSet res = statement.executeQuery(sql);
+            if (res.next()) {
+                o = res.getObject(selected);
+                if (o != null) {
+                    return o;
+                }
+                return o;
+            }
+
+            return o;
+        } catch (SQLException e) {
+            Bukkit.getConsoleSender().sendMessage(Main.FrameMainGet.getPrefix() + "An Issue getObject §6: §f" + e.getMessage());
+            Bukkit.getConsoleSender().sendMessage(Main.FrameMainGet.getPrefix() + "§6: §f" + e.getSQLState());
+            Bukkit.getConsoleSender().sendMessage(Main.FrameMainGet.getPrefix() + "§6: §f" + e.getErrorCode());
+        } finally {
+            if (MYSQL.con != null) {
+                MYSQL.close();
+            }
+        }
+        return o;
+    }
+
+    public static void deleteTable(String table) {
+        StringBuilder stringBuilder = new StringBuilder();
+        stringBuilder.append("DROP TABLE " + table);
+        String sql = stringBuilder.toString();
+
+        try {
+            Statement stmt = MYSQL.getConnection().createStatement();
+            stmt.executeUpdate(sql);
+        } catch (SQLException e) {
+            Bukkit.getConsoleSender().sendMessage(Main.FrameMainGet.getPrefix() + "An Issue Delete Table §6: §f" + e.getMessage());
+            Bukkit.getConsoleSender().sendMessage(Main.FrameMainGet.getPrefix() + " §f" + e.getSQLState());
+            Bukkit.getConsoleSender().sendMessage(Main.FrameMainGet.getPrefix() + " §f" + e.getErrorCode());
+        } finally {
+            if (MYSQL.con != null) {
+                MYSQL.close();
+            }
+        }
+    }
+
+    public static boolean isTableExists(String table) {
+        try {
+            Statement statement = MYSQL.getConnection().createStatement();
+            ResultSet rs = statement.executeQuery("SHOW TABLES LIKE '" + table + "'");
+            if (rs.next()) {
+                return true;
+            }
+            return false;
+
+        } catch (SQLException e) {
+            Bukkit.getConsoleSender().sendMessage(Main.FrameMainGet.getPrefix() + "An Issue isTableExists Table §6: §f" + e.getMessage());
+            Bukkit.getConsoleSender().sendMessage(Main.FrameMainGet.getPrefix() + "§6: §f" + e.getSQLState());
+            Bukkit.getConsoleSender().sendMessage(Main.FrameMainGet.getPrefix() + "§6: §f" + e.getErrorCode());
+        } finally {
+            if (MYSQL.con != null) {
+                MYSQL.close();
+            }
+        }
+        return false;
+    }
+}
+
+
Index: .settings/org.eclipse.core.resources.prefs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .settings/org.eclipse.core.resources.prefs	(date 1590167440380)
+++ .settings/org.eclipse.core.resources.prefs	(date 1590167440380)
@@ -0,0 +1,5 @@
+eclipse.preferences.version=1
+encoding//src/main/java=UTF-8
+encoding//src/main/resources=UTF-8
+encoding//src/test/java=UTF-8
+encoding/<project>=UTF-8
Index: src/main/java/de/framedev/frameapi/utils/Config.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/de/framedev/frameapi/utils/Config.java	(date 1586295341708)
+++ src/main/java/de/framedev/frameapi/utils/Config.java	(date 1586295341708)
@@ -0,0 +1,45 @@
+package de.framedev.frameapi.utils;
+
+import de.framedev.frameapi.main.Main;
+import org.bukkit.configuration.file.YamlConfiguration;
+
+import java.io.File;
+import java.io.IOException;
+
+
+public class Config {
+    public static void loadConfig() {
+        Main.getInstance().getConfig().options().copyHeader(true);
+        Main.getInstance().getConfig().getDefaults().options().copyDefaults(true);
+        Main.getInstance().getConfig().options().copyDefaults(true);
+        Main.getInstance().saveDefaultConfig();
+    }
+
+
+    public static void updateConfig() {
+        try {
+            if ((new File(Main.getInstance().getDataFolder() + "/config.yml")).exists()) {
+                boolean changesMade = false;
+                YamlConfiguration tmp = new YamlConfiguration();
+                tmp.load(Main.getInstance().getDataFolder() + "/config.yml");
+                for (String str : Main.getInstance().getConfig().getKeys(true)) {
+                    if (!tmp.getKeys(true).contains(str)) {
+                        tmp.set(str, Main.getInstance().getConfig().get(str));
+                        changesMade = true;
+                        tmp.save(Main.getInstance().getDataFolder() + "/config.yml");
+                        tmp.load(Main.getInstance().getDataFolder() + "/config.yml");
+                    }
+                }
+                if (changesMade) {
+
+                    tmp.save(Main.getInstance().getDataFolder() + "/config.yml");
+                    tmp.load(Main.getInstance().getDataFolder() + "/config.yml");
+                }
+            }
+        } catch (IOException | org.bukkit.configuration.InvalidConfigurationException e) {
+            e.printStackTrace();
+        }
+    }
+}
+
+
Index: .settings/org.eclipse.jdt.core.prefs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .settings/org.eclipse.jdt.core.prefs	(date 1590167440529)
+++ .settings/org.eclipse.jdt.core.prefs	(date 1590167440529)
@@ -0,0 +1,8 @@
+eclipse.preferences.version=1
+org.eclipse.jdt.core.compiler.codegen.targetPlatform=1.8
+org.eclipse.jdt.core.compiler.compliance=1.8
+org.eclipse.jdt.core.compiler.problem.enablePreviewFeatures=disabled
+org.eclipse.jdt.core.compiler.problem.forbiddenReference=warning
+org.eclipse.jdt.core.compiler.problem.reportPreviewFeatures=ignore
+org.eclipse.jdt.core.compiler.release=disabled
+org.eclipse.jdt.core.compiler.source=1.8
Index: src/main/java/de/framedev/frameapi/utils/ReplaceCharConfig.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/de/framedev/frameapi/utils/ReplaceCharConfig.java	(date 1591738414339)
+++ src/main/java/de/framedev/frameapi/utils/ReplaceCharConfig.java	(date 1591738414339)
@@ -0,0 +1,52 @@
+package de.framedev.frameapi.utils;
+
+
+public class ReplaceCharConfig {
+    public static String replaceParagraph(String text) {
+        text = text.replace('&', '§');
+        return text;
+    }
+
+    public static Boolean convertStringToBoolean(String text) {
+        return Boolean.parseBoolean(text);
+    }
+
+    public static Double convertIntegerToDouble(int number) {
+        return (double) number;
+    }
+
+    public static Integer convertDoubleToInteger(double number) {
+        return (int) number;
+    }
+
+    public static Integer convertStringToInteger(String text) {
+        return Integer.parseInt(text);
+    }
+
+    public static Double convertStringToDouble(String text) {
+        return Double.parseDouble(text);
+    }
+
+    public static String replaceObjectWithData(String text, String object, String data) {
+        text = text.replace(object, data);
+        return text;
+    }
+
+    public static Integer convertObjectToInteger(Object object) {
+        return Integer.parseInt(object.toString());
+    }
+
+    public static String convertObjectToString(Object object) {
+        return String.valueOf(object.toString());
+    }
+
+    public static Double convertObjectToDouble(Object object) {
+        return Double.parseDouble(object.toString());
+    }
+
+    public static Float convertObjectToFloat(Object object) {
+        return Float.parseFloat(object.toString());
+    }
+}
+
+
Index: src/main/java/de/framedev/frameapi/utils/DateUnit.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/de/framedev/frameapi/utils/DateUnit.java	(date 1590259160167)
+++ src/main/java/de/framedev/frameapi/utils/DateUnit.java	(date 1590259160167)
@@ -0,0 +1,55 @@
+package de.framedev.frameapi.utils;
+
+/*
+ * =============================================
+ * = This Plugin was Created by FrameDev       =
+ * = Copyrighted by FrameDev                   =
+ * = Please don't Change anything              =
+ * =============================================
+ * This Class was made at 23.05.2020, 20:39
+ */
+public enum DateUnit {
+
+    SEC("Second(s)", 1),
+    MIN("Minute(s)", 60),
+    HOUR("Hour(s)",60*60),
+    DAY("Day(s)", 24*60*60),
+    WEEK("Week(s)", 7*24*60*60),
+    MON("Month(s)",30*24*60*60),
+    YEAR("Year(s)",365*24*60*60);
+
+    private String output;
+    private long toSec;
+    /**
+     * @return the output
+     */
+    public String getOutput() {
+        return output;
+    }
+    /**
+     * @param output the output to set
+     */
+    public void setOutput(String output) {
+        this.output = output;
+    }
+    /**
+     * @return the toSec
+     */
+    public long getToSec() {
+        return toSec;
+    }
+    /**
+     * @param toSec the toSec to set
+     */
+    public void setToSec(long toSec) {
+        this.toSec = toSec;
+    }
+    /**
+     *
+     */
+    private DateUnit(String output,long toSec) {
+        this.output = output;
+        this.toSec = toSec;
+    }
+
+}
Index: src/main/java/de/framedev/frameapi/utils/Lags.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/de/framedev/frameapi/utils/Lags.java	(date 1591738414158)
+++ src/main/java/de/framedev/frameapi/utils/Lags.java	(date 1591738414158)
@@ -0,0 +1,37 @@
+package de.framedev.frameapi.utils;
+
+
+public class Lags
+        implements Runnable {
+    public static int TICK_COUNT = 0;
+    public static long[] TICKS = new long[600];
+    public static long LAST_TICK = 0L;
+
+    public static double getTPS() {
+        return getTPS(100);
+    }
+
+    public static double getTPS(int ticks) {
+        if (TICK_COUNT < ticks) {
+            return 20.0D;
+        }
+        int target = (TICK_COUNT - 1 - ticks) % TICKS.length;
+        long elapsed = System.currentTimeMillis() - TICKS[target];
+        return ticks / elapsed / 1000.0D;
+    }
+
+    public static long getElapsed(int tickID) {
+        if (TICK_COUNT - tickID >= TICKS.length) ;
+
+        long time = TICKS[tickID % TICKS.length];
+        return System.currentTimeMillis() - time;
+    }
+
+    public void run() {
+        TICKS[TICK_COUNT % TICKS.length] = System.currentTimeMillis();
+
+        TICK_COUNT++;
+    }
+}
+
+
Index: src/main/java/de/framedev/frameapi/utils/UUIDManager.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/de/framedev/frameapi/utils/UUIDManager.java	(date 1592260173238)
+++ src/main/java/de/framedev/frameapi/utils/UUIDManager.java	(date 1592260173238)
@@ -0,0 +1,80 @@
+package de.framedev.frameapi.utils;
+
+import java.io.File;
+import java.io.IOException;
+import java.util.ArrayList;
+import java.util.List;
+import java.util.UUID;
+
+import de.framedev.frameapi.main.Main;
+import org.bukkit.configuration.InvalidConfigurationException;
+import org.bukkit.configuration.file.FileConfiguration;
+import org.bukkit.configuration.file.YamlConfiguration;
+
+public class UUIDManager {
+    List<UUID> uuids = new ArrayList<>();
+    private File file = new File(Main.getInstance().getDataFolder(), "uuids.yml");
+    private FileConfiguration cfg = YamlConfiguration.loadConfiguration(this.file);
+
+    UUID uuid;
+
+    public UUIDManager(UUID uuid) {
+        this.uuid = uuid;
+    }
+
+    public UUID generateRandomUUID() {
+        UUID uuid = UUID.randomUUID();
+        System.out.println("Random UUID was created!");
+        return uuid;
+    }
+
+    protected void saveCfg() {
+        try {
+            this.cfg.save(this.file);
+        } catch (IOException e) {
+            e.printStackTrace();
+        }
+    }
+
+    protected void loadCfg() {
+        try {
+            this.cfg.load(this.file);
+        } catch (IOException | InvalidConfigurationException e) {
+            e.printStackTrace();
+        }
+    }
+
+    protected void createFile() {
+        if (!this.file.exists()) {
+            try {
+                this.file.createNewFile();
+            } catch (IOException e) {
+                e.printStackTrace();
+            }
+        }
+    }
+
+    public UUID getUuid() {
+        return this.uuid;
+    }
+
+    public void setUuid(UUID uuid) {
+        this.uuid = uuid;
+    }
+
+    public void saveUUIDInFile(UUID uuid) {
+        this.uuids = (List<UUID>) this.cfg.getList("UUIDS");
+        if (!this.uuids.contains(uuid)) {
+            this.uuids.add(uuid);
+        }
+        this.cfg.set("UUIDS", this.uuids);
+        saveCfg();
+        createFile();
+        loadCfg();
+    }
+
+    public List<UUID> getUUIDS() throws NullPointerException {
+        return (List<UUID>) this.cfg.getList("UUIDS");
+    }
+}
+
Index: src/main/java/de/framedev/frameapi/utils/Init.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/de/framedev/frameapi/utils/Init.java	(date 1591734576509)
+++ src/main/java/de/framedev/frameapi/utils/Init.java	(date 1591734576509)
@@ -0,0 +1,121 @@
+package de.framedev.frameapi.utils;
+
+import de.framedev.frameapi.afk.AFK;
+import de.framedev.frameapi.api.*;
+import de.framedev.frameapi.api.energy.Energy;
+import de.framedev.frameapi.managers.ChatManager;
+import de.framedev.frameapi.api.money.Money;
+import de.framedev.frameapi.cmds.*;
+import de.framedev.frameapi.glass.Cocktail;
+import de.framedev.frameapi.interfaces.Constructors;
+import de.framedev.frameapi.listeners.*;
+import de.framedev.frameapi.listeners.energy.CapacitorListener;
+import de.framedev.frameapi.listeners.money.MoneyBankSigns;
+import de.framedev.frameapi.listeners.money.MoneySigns;
+import de.framedev.frameapi.main.Main;
+import de.framedev.frameapi.managers.FileManager;
+import de.framedev.frameapi.managers.ServerManager;
+import de.framedev.frameapi.mysql.MYSQL;
+import de.framedev.frameapi.warps.WarpSigns;
+import org.bukkit.Bukkit;
+import org.bukkit.event.Listener;
+import org.bukkit.plugin.Plugin;
+import org.bukkit.plugin.PluginManager;
+
+import java.io.IOException;
+import java.util.ArrayList;
+
+public class Init implements Constructors {
+
+    public Init(Main plugin) {
+        this.plugin = plugin;
+        PluginManager pm = Bukkit.getPluginManager();
+        new TrashCMD(plugin);
+        if (WarpSigns.UtilinConfigList("Energy")) {
+            if (plugin.getConfig().getBoolean("MYSQL.Boolean")) {
+                new Energy();
+                new EnergyCMD(plugin);
+                pm.registerEvents((Listener) new CapacitorListener(), (Plugin) plugin);
+                Bukkit.getConsoleSender().sendMessage(Main.FrameMainGet.getPrefix() + " §6successfully Energy Registered!");
+            }
+        }
+        if(plugin.getConfig().getBoolean("BungeeCord")) {
+            new ServerSwitcher(plugin);
+            ServerManager man = new ServerManager();
+            ArrayList<String> servers = new ArrayList<>();
+            ArrayList<String> cfgServers = (ArrayList<String>) man.getCfg().getStringList("servers");
+            if(cfgServers != null) {
+                for(String s : cfgServers) {
+                    servers.add(s);
+                    man.getCfg().set("servers", servers);
+                    try {
+                        man.getCfg().save(man.getFile());
+                    } catch (IOException e) {
+                        e.printStackTrace();
+                    }
+                }
+            } else {
+                servers.add("lobby");
+                servers.add("yourServer");
+                man.getCfg().set("servers", servers);
+                try {
+                    man.getCfg().save(man.getFile());
+                } catch (IOException e) {
+                    e.printStackTrace();
+                }
+            }
+        }
+        //Nick Sachen
+        new ChatCommand(plugin);
+        new ChatListener(plugin);
+        new FrameCMDS(plugin);
+        new FrameAPICMDS(plugin);
+        new FlyCMD(plugin);
+        new CommandBlocker(plugin);
+        new EnderChestCMD(plugin);
+        new InvSeeCMD(plugin);
+        new BackPackCMD(plugin);
+        if (WarpSigns.UtilinConfigList("Money")) {
+            new MoneyCMD(plugin);
+            new MoneySigns(plugin);
+        }
+        if (WarpSigns.UtilinConfigList("Bank")) {
+            new MoneyBankCMD(plugin);
+            new MoneyBankSigns(plugin);
+        }
+
+        new ChatManager().runable();
+        new PositionCMD(Main.getInstance());
+        new FileManager(Main.getInstance());
+        new ChunkloaderCMD(Main.getInstance());
+        new VanishCMD(plugin);
+        if (plugin.getConfig().getBoolean("AFK.Boolean")) {
+            new AFK(plugin);
+        }
+        Cocktail.register();
+        if (WarpSigns.UtilinConfigList("Money")) {
+            pm.registerEvents(new Money(), plugin); 
+        }
+        pm.registerEvents(new API(), plugin);
+        pm.registerEvents(new WarpSigns(), plugin);
+        new PlayerKillPlayer(plugin);
+        if (plugin.getConfig().getBoolean("MYSQL.Boolean")) {
+            new SaveEnderChest(plugin);
+            if (plugin.getConfig().getBoolean("SavePlayersInventory")) {
+                new SavePlayersInventory(plugin);
+            }
+            if (plugin.getConfig().getBoolean("SaveInventoryMYSQL")) {
+                new SaveInventory(plugin);
+                new OpenOtherInventory(plugin);
+            }
+        } else {
+            Bukkit.getConsoleSender().sendMessage(MYSQL.MySQLPrefix + " §cNot Found, Fuctions are Disabled");
+        }
+        pm.registerEvents((Listener) new LeaveListener(), (Plugin) plugin);
+        pm.registerEvents((Listener) new JoinListener(), (Plugin) plugin);
+        pm.registerEvents(new SleepListener(),plugin);
+        Bukkit.getConsoleSender().sendMessage(Main.FrameMainGet.getPrefix() + " §6successfully initialized");
+    }
+
+    private final Main plugin;
+}
\ No newline at end of file
Index: src/main/java/de/framedev/frameapi/utils/Information.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/de/framedev/frameapi/utils/Information.java	(date 1590194633984)
+++ src/main/java/de/framedev/frameapi/utils/Information.java	(date 1590194633984)
@@ -0,0 +1,115 @@
+package de.framedev.frameapi.utils;
+
+import de.framedev.frameapi.main.Main;
+import org.bukkit.configuration.InvalidConfigurationException;
+import org.bukkit.configuration.file.FileConfiguration;
+import org.bukkit.configuration.file.YamlConfiguration;
+
+import java.io.File;
+import java.io.IOException;
+import java.util.ArrayList;
+
+
+public class Information {
+    static File file = new File("plugins/FrameAPI/Permissions.yml");
+    static FileConfiguration cfg = YamlConfiguration.loadConfiguration(file);
+    private static String version = "4.4.6";
+    private static String Author = "FrameDev";
+    private static String name = "FrameAPI";
+    private static String apiversion = "1.13";
+
+
+    public static String getVersion() {
+        return version;
+    }
+
+    public static void setVersion(String version) {
+        version = Main.getInstance().getDescription().getVersion();
+        Information.version = version;
+    }
+
+
+    public static String getAuthor() {
+        return Author;
+    }
+
+
+    public static String getName() {
+        return name;
+    }
+
+
+    public static String getApiversion() {
+        return apiversion;
+    }
+
+    public static void setInformationInConfig() {
+        cfg.set("Name", name);
+        cfg.set("Author", Author);
+        cfg.set("Api-Version", apiversion);
+        cfg.set("Version", version);
+        ArrayList<String> perm = new ArrayList<>();
+        perm.add("frameapi.*");
+        perm.add("frameapi.startbudget");
+        perm.add("frameapi.teleporter");
+        perm.add("frameapi.backtp");
+        perm.add("frameapi.spawnmob");
+        perm.add("frameapi.denied");
+        perm.add("frameapi.getitem");
+        perm.add("frameapi.heal");
+        perm.add("frameapi.mysql");
+        perm.add("frameapi.set");
+        perm.add("frameapi.balance.other");
+        perm.add("frameapi.balance");
+        perm.add("frameapi.set.other");
+        perm.add("frameapi.signs.use");
+        perm.add("frameapi.signs.create");
+        perm.add("frameapi.bankbalance");
+        perm.add("frameapi.bankbalance.other");
+        perm.add("frameapi.setbank");
+        perm.add("frameapi.setbank.other");
+        perm.add("frameapi.transfer");
+        perm.add("frameapi.withdraw");
+        perm.add("frameapi.deposit");
+        perm.add("frameapi.(kitname)");
+        perm.add("frameapi.warp");
+        perm.add("frameapi.setwarp");
+        perm.add("frameapi.warpremove");
+        perm.add("frameapi.admin");
+        perm.add("frameapi.msg");
+        perm.add("frameapi.update");
+        perm.add("frameapi.fly");
+        perm.add("frameapi.fly.other");
+        perm.add("frameapi.afk");
+        perm.add("frameapi.vanish");
+        perm.add("frameapi.item");
+        perm.add("frameapi.saveinventory");
+        perm.add("frameapi.saveinventorynumber.multiple.(group)");
+        perm.add("frameapi.gamemode");
+        perm.add("frameapi.gamemode.other");
+        perm.add("frameapi.godmode");
+        perm.add("frameapi.addentity");
+        perm.add("frameapi.tps");
+        perm.add("frameapi.cleartps");
+        perm.add("frameapi.balancetop");
+        perm.add("frameapi.enderchest");
+        perm.add("frameapi.enderchest.other");
+        perm.add("frameapi.invsee");
+
+        cfg.set("Permissions", perm);
+        try {
+            cfg.save(file);
+        } catch (IOException e) {
+            e.printStackTrace();
+        }
+        try {
+            cfg.load(file);
+        } catch (IOException e) {
+            e.printStackTrace();
+        } catch (InvalidConfigurationException e) {
+            e.printStackTrace();
+        }
+    }
+}
+
+
Index: src/main/java/de/framedev/frameapi/warps/WarpSigns.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/de/framedev/frameapi/warps/WarpSigns.java	(date 1592260173100)
+++ src/main/java/de/framedev/frameapi/warps/WarpSigns.java	(date 1592260173100)
@@ -0,0 +1,69 @@
+package de.framedev.frameapi.warps;
+
+import de.framedev.frameapi.api.API;
+import de.framedev.frameapi.main.Main;
+
+import java.util.List;
+
+import org.bukkit.Location;
+import org.bukkit.block.Sign;
+import org.bukkit.event.EventHandler;
+import org.bukkit.event.Listener;
+import org.bukkit.event.block.Action;
+import org.bukkit.event.block.SignChangeEvent;
+import org.bukkit.event.player.PlayerInteractEvent;
+
+public class WarpSigns
+        implements Listener {
+    public static Boolean inConfigList(String name) {
+        List<String> signs = Main.getInstance().getConfig().getStringList("Signs");
+        if (signs.contains(name)) {
+            return true;
+        }
+        return false;
+    }
+
+
+    public static Boolean UtilinConfigList(String name) {
+        List<String> signs = Main.getInstance().getConfig().getStringList("Util");
+        return signs.contains(name);
+    }
+
+
+    @EventHandler
+    public void signChange(SignChangeEvent e) {
+        if (inConfigList("Warp") &&
+                e.getLine(0).equalsIgnoreCase("warp")) {
+            if (e.getPlayer().hasPermission("frameapi.signs.create")) {
+                String[] args = e.getLines();
+                String name = args[1];
+                e.setLine(0, "§1[Warp]");
+                e.setLine(1, name);
+            } else {
+                e.getPlayer().sendMessage(Main.FrameMainGet.getPrefix() + " " + Main.FrameMainGet.getNoPerm());
+            }
+        }
+    }
+
+
+    @EventHandler
+    public void onInteractFree(PlayerInteractEvent e) {
+        if (inConfigList("Warp").booleanValue() &&
+                e.getAction() == Action.RIGHT_CLICK_BLOCK &&
+                e.getClickedBlock().getState() instanceof Sign) {
+            Sign s = (Sign) e.getClickedBlock().getState();
+            if (s.getLine(0).equalsIgnoreCase("§1[Warp]"))
+                if (e.getPlayer().hasPermission("frameapi.signs.use")) {
+                    String[] args = s.getLines();
+                    String name = args[1];
+                    Location loc = API.Warp.getWarpLocation(name);
+                    if (s.getLine(1).equalsIgnoreCase(name)) {
+                        e.getPlayer().teleport(loc);
+                    }
+                } else {
+                    e.getPlayer().sendMessage(Main.FrameMainGet.getPrefix() + " " + Main.FrameMainGet.getNoPerm());
+                }
+        }
+    }
+}
+
Index: src/main/java/de/framedev/frameapi/utils/QueryUtils.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/de/framedev/frameapi/utils/QueryUtils.java	(date 1591738414015)
+++ src/main/java/de/framedev/frameapi/utils/QueryUtils.java	(date 1591738414015)
@@ -0,0 +1,19 @@
+package de.framedev.frameapi.utils;
+
+import java.util.Collection;
+
+
+public class QueryUtils {
+    public static String separate(Collection<String> collection, String separator) {
+        StringBuilder builder = new StringBuilder();
+        String sep = "";
+        for (String item : collection) {
+            builder.append(sep)
+                    .append(item);
+            sep = separator;
+        }
+        return builder.toString();
+    }
+}
+
+
Index: src/main/java/de/framedev/frameapi/queries/InsertQuery.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/de/framedev/frameapi/queries/InsertQuery.java	(date 1590168054116)
+++ src/main/java/de/framedev/frameapi/queries/InsertQuery.java	(date 1590168054116)
@@ -0,0 +1,116 @@
+package de.framedev.frameapi.queries;
+
+
+import java.util.LinkedHashMap;
+import java.util.Map;
+
+import de.framedev.frameapi.utils.QueryUtils;
+
+public class InsertQuery {
+
+    private String table;
+    private LinkedHashMap<String, String> values = new LinkedHashMap<String, String>();
+    private LinkedHashMap<String, String> duplicateValues = new LinkedHashMap<String, String>();
+    private boolean onDuplicateKey = false;
+
+    /**
+     * Create an insert query.
+     *
+     * @param table the table to be updated
+     */
+    public InsertQuery(String table) {
+        this.table = table;
+    }
+
+    /**
+     * Set a column to insert to and the value to be inserted.
+     *
+     * @param column the column to insert to
+     * @param value  the value to be inserted
+     * @return the InsertQuery object
+     */
+    public InsertQuery value(String column, String value) {
+        values.put(column, value);
+        return this;
+    }
+
+    /**
+     * Set a column to insert to. Automatically sets the value to ? to be used with prepared statements.
+     *
+     * @param column the column to insert to
+     * @return the InsertQuery object
+     */
+    public InsertQuery value(String column) {
+        value(column, "?");
+        return this;
+    }
+
+    /**
+     * Add on duplicate key update clause.
+     *
+     * @return the InsertQuery object
+     */
+    public InsertQuery onDuplicateKeyUpdate() {
+        onDuplicateKey = true;
+        return this;
+    }
+
+    /**
+     * Update a column to value in case of a duplicate key.
+     *
+     * @param column the column to update
+     * @param value  the new value
+     * @return the InsertQuery object
+     */
+    public InsertQuery set(String column, String value) {
+        duplicateValues.put(column, value);
+        return this;
+    }
+
+    /**
+     * Update a column to value in case of a duplicate key.
+     * <p>
+     * Automatically inserts values(column).
+     *
+     * @param column
+     * @return
+     */
+    public InsertQuery set(String column) {
+        set(column, "VALUES(" + column + ")");
+        return this;
+    }
+
+    /**
+     * Build the query as a String.
+     *
+     * @return the query as a String
+     */
+    public String build() {
+        StringBuilder builder = new StringBuilder();
+        builder.append("INSERT INTO ")
+                .append(table)
+                .append(" (")
+                .append(QueryUtils.separate(values.keySet(), ","))
+                .append(")")
+                .append(" VALUES (")
+                .append(QueryUtils.separate(values.values(), ","))
+                .append(")");
+
+        if (onDuplicateKey) {
+            builder.append(" ON DUPLICATE KEY UPDATE ");
+            String separator = "";
+            for (Map.Entry<String, String> entry : duplicateValues.entrySet()) {
+                String column = entry.getKey();
+                String value = entry.getValue();
+                builder.append(separator)
+                        .append(column)
+                        .append("=")
+                        .append(value);
+                separator = ",";
+            }
+        }
+
+        return builder.toString();
+    }
+
+}
Index: src/main/java/de/framedev/frameapi/queries/SelectQuery.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/de/framedev/frameapi/queries/SelectQuery.java	(date 1590168061870)
+++ src/main/java/de/framedev/frameapi/queries/SelectQuery.java	(date 1590168061870)
@@ -0,0 +1,130 @@
+package de.framedev.frameapi.queries;
+
+import java.util.ArrayList;
+import java.util.List;
+
+import de.framedev.frameapi.utils.QueryUtils;
+
+public class SelectQuery {
+
+    private String table;
+    private List<String> columns = new ArrayList<String>();
+    private List<String> wheres = new ArrayList<String>();
+    private String orderBy;
+    private boolean orderByAscending = false;
+    private int limitOffset = 0;
+    private int limitRowCount = 0;
+
+    /**
+     * Create a select query.
+     *
+     * @param table the table to be selected from
+     */
+    public SelectQuery(String table) {
+        this.table = table;
+    }
+
+    /**
+     * Add a column to be selected.
+     *
+     * @param column the column
+     * @return the SelectQuery object
+     */
+    public SelectQuery column(String column) {
+        columns.add(column);
+        return this;
+    }
+
+    /**
+     * Add a where clause.
+     *
+     * @param expression the expression
+     * @return the SelectQuery object
+     */
+    public SelectQuery where(String expression) {
+        wheres.add(expression);
+        return this;
+    }
+
+    /**
+     * Add a where clause.
+     *
+     * @param expression the expression
+     * @return the SelectQuery object
+     */
+    public SelectQuery and(String expression) {
+        where(expression);
+        return this;
+    }
+
+    /**
+     * Add a order by clause.
+     *
+     * @param column    the column to be ordered by
+     * @param ascending whether it should be ordered ascending or descending
+     * @return the SelectQuery object
+     */
+    public SelectQuery orderBy(String column, boolean ascending) {
+        this.orderBy = column;
+        this.orderByAscending = ascending;
+        return this;
+    }
+
+    /**
+     * Add a limit clause.
+     *
+     * @param offset   the offset, starting from 0.
+     * @param rowCount the number of rows
+     * @return the SelectQuery object
+     */
+    public SelectQuery limit(int offset, int rowCount) {
+        this.limitOffset = offset;
+        this.limitRowCount = rowCount;
+        return this;
+    }
+
+    /**
+     * Add a limit clause, with a offset of 0.
+     *
+     * @param rowCount the number of rows
+     * @return the SelectQuery object
+     */
+    public SelectQuery limit(int rowCount) {
+        this.limitOffset = 0;
+        this.limitRowCount = rowCount;
+        return this;
+    }
+
+    /**
+     * Build the query as a String.
+     *
+     * @return the query as a String
+     */
+    public String build() {
+        StringBuilder builder = new StringBuilder();
+        builder.append("SELECT ")
+                .append(QueryUtils.separate(columns, ","))
+                .append(" FROM ")
+                .append(table);
+
+        if (wheres.size() > 0) {
+            builder.append(" WHERE ")
+                    .append(QueryUtils.separate(wheres, " AND "));
+        }
+
+        if (orderBy != null) {
+            builder.append(" ORDER BY ")
+                    .append(orderBy)
+                    .append(orderByAscending ? " ASC" : " DESC");
+        }
+
+        if (limitRowCount > 0) {
+            builder.append(" LIMIT ")
+                    .append(limitOffset)
+                    .append(",").append(limitRowCount);
+        }
+
+        return builder.toString();
+    }
+
+}
Index: src/main/java/de/framedev/frameapi/queries/Callback.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/de/framedev/frameapi/queries/Callback.java	(date 1590168021209)
+++ src/main/java/de/framedev/frameapi/queries/Callback.java	(date 1590168021209)
@@ -0,0 +1,8 @@
+package de.framedev.frameapi.queries;
+
+
+public interface Callback<V extends Object, T extends Throwable> {
+
+    public void call(V result, T thrown);
+
+}
Index: src/main/java/de/framedev/frameapi/queries/CreateTableQuery.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/de/framedev/frameapi/queries/CreateTableQuery.java	(date 1590168030878)
+++ src/main/java/de/framedev/frameapi/queries/CreateTableQuery.java	(date 1590168030878)
@@ -0,0 +1,85 @@
+package de.framedev.frameapi.queries;
+
+import java.util.ArrayList;
+import java.util.List;
+
+import de.framedev.frameapi.utils.QueryUtils;
+
+public class CreateTableQuery {
+
+    private String table;
+    private boolean ifNotExists = false;
+    private List<String> columns = new ArrayList<String>();
+    private String primaryKey;
+
+    /**
+     * Create a create table query.
+     *
+     * @param table the table to be created
+     */
+    public CreateTableQuery(String table) {
+        this.table = table;
+    }
+
+    /**
+     * Add if not exists to the query.
+     *
+     * @return the CreateTableQuery object
+     */
+    public CreateTableQuery ifNotExists() {
+        this.ifNotExists = true;
+        return this;
+    }
+
+    /**
+     * Add a column with settings.
+     *
+     * @param column   the column
+     * @param settings the column settings
+     * @return the CreateTableQuery object
+     */
+    public CreateTableQuery column(String column, String settings) {
+        columns.add(column + " " + settings);
+        return this;
+    }
+
+    /**
+     * Set the primary key to column.
+     *
+     * @param column the column to be the primary key
+     * @return the CreateTableQuery object
+     */
+    public CreateTableQuery primaryKey(String column) {
+        this.primaryKey = column;
+        return this;
+    }
+
+    /**
+     * Build the query as a String.
+     *
+     * @return the query as a String
+     */
+    public String build() {
+        StringBuilder builder = new StringBuilder();
+        builder.append("CREATE TABLE ");
+
+        if (ifNotExists) {
+            builder.append("IF NOT EXISTS ");
+        }
+
+        builder.append(table)
+                .append(" (")
+                .append(QueryUtils.separate(columns, ","));
+
+        if (primaryKey != null) {
+            builder.append(",PRIMARY KEY(");
+            builder.append(primaryKey);
+            builder.append(")");
+        }
+
+        builder.append(")");
+
+        return builder.toString();
+    }
+
+}
Index: src/main/java/de/framedev/frameapi/queries/UpdateQuery.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/de/framedev/frameapi/queries/UpdateQuery.java	(date 1590168068217)
+++ src/main/java/de/framedev/frameapi/queries/UpdateQuery.java	(date 1590168068217)
@@ -0,0 +1,105 @@
+package de.framedev.frameapi.queries;
+
+
+import java.util.ArrayList;
+import java.util.LinkedHashMap;
+import java.util.List;
+import java.util.Map;
+
+import de.framedev.frameapi.utils.QueryUtils;
+
+public class UpdateQuery {
+
+    private String table;
+    private LinkedHashMap<String, String> values = new LinkedHashMap<String, String>();
+    private List<String> wheres = new ArrayList<String>();
+
+    /**
+     * Create an update query.
+     *
+     * @param table the table to be updated
+     */
+    public UpdateQuery(String table) {
+        this.table = table;
+    }
+
+    /**
+     * Set the value of a column.
+     * <p>
+     * MySQLAPI does not do any interpretation so you have to add apostrophes yourself.
+     *
+     * @param column the column to set the value for
+     * @param value  the value to set the column to
+     * @return the UpdateQuery object
+     */
+    public UpdateQuery set(String column, String value) {
+        values.put(column, value);
+        return this;
+    }
+
+    /**
+     * Set the value of a column. Automatically sets the value to ? to be used with prepared statements.
+     * <p>
+     * MySQLAPIBukkit does not do any interpretation so you have to add apostrophes yourself.
+     *
+     * @param column the column to set the value for
+     * @return the UpdateQuery object
+     */
+    public UpdateQuery set(String column) {
+        set(column, "?");
+        return this;
+    }
+
+    /**
+     * Add a where clause.
+     *
+     * @param expression the expression
+     * @return the UpdateQuery object
+     */
+    public UpdateQuery where(String expression) {
+        wheres.add(expression);
+        return this;
+    }
+
+    /**
+     * Add a where clause.
+     *
+     * @param expression the expression
+     * @return the UpdateQuery object
+     */
+    public UpdateQuery and(String expression) {
+        where(expression);
+        return this;
+    }
+
+    /**
+     * Build the query as a String.
+     *
+     * @return the query as a String
+     */
+    public String build() {
+        StringBuilder builder = new StringBuilder();
+        builder.append("UPDATE ")
+                .append(table)
+                .append(" SET ");
+
+        String seperator = "";
+        for (Map.Entry<String, String> entry : values.entrySet()) {
+            String column = entry.getKey();
+            String value = entry.getValue();
+            builder.append(seperator)
+                    .append(column)
+                    .append("=")
+                    .append(value);
+            seperator = ",";
+        }
+
+        if (wheres.size() > 0) {
+            builder.append(" WHERE ")
+                    .append(QueryUtils.separate(wheres, " AND "));
+        }
+
+        return builder.toString();
+    }
+
+}
Index: src/main/java/de/framedev/frameapi/queries/DeleteQuery.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/de/framedev/frameapi/queries/DeleteQuery.java	(date 1590168042147)
+++ src/main/java/de/framedev/frameapi/queries/DeleteQuery.java	(date 1590168042147)
@@ -0,0 +1,62 @@
+package de.framedev.frameapi.queries;
+
+import java.util.ArrayList;
+import java.util.List;
+
+import de.framedev.frameapi.utils.QueryUtils;
+
+public class DeleteQuery {
+
+    private String table;
+    private List<String> wheres = new ArrayList<String>();
+
+    /**
+     * Create a delete query.
+     *
+     * @param table - the table to be deleted from
+     */
+    public DeleteQuery(String table) {
+        this.table = table;
+    }
+
+    /**
+     * Add a where clause.
+     *
+     * @param expression the expression
+     * @return the DeleteQuery object
+     */
+    public DeleteQuery where(String expression) {
+        wheres.add(expression);
+        return this;
+    }
+
+    /**
+     * Add a where clause.
+     *
+     * @param expression the expression
+     * @return the DeleteQuery object
+     */
+    public DeleteQuery and(String expression) {
+        where(expression);
+        return this;
+    }
+
+    /**
+     * Build the query as a String.
+     *
+     * @return the query as a String
+     */
+    public String build() {
+        StringBuilder builder = new StringBuilder();
+        builder.append("DELETE FROM ")
+                .append(table);
+
+        if (wheres.size() > 0) {
+            builder.append(" WHERE ")
+                    .append(QueryUtils.separate(wheres, " AND "));
+        }
+
+        return builder.toString();
+    }
+
+}
Index: src/main/java/de/framedev/frameapi/managers/ChunkloaderManager.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/de/framedev/frameapi/managers/ChunkloaderManager.java	(date 1590067012743)
+++ src/main/java/de/framedev/frameapi/managers/ChunkloaderManager.java	(date 1590067012743)
@@ -0,0 +1,63 @@
+package de.framedev.frameapi.managers;
+
+import de.framedev.frameapi.cmds.ChunkloaderCMD;
+import org.bukkit.Bukkit;
+import org.bukkit.Chunk;
+import org.bukkit.Location;
+import org.bukkit.configuration.ConfigurationSection;
+import org.bukkit.configuration.file.FileConfiguration;
+
+import java.io.IOException;
+import java.util.ArrayList;
+
+
+public class ChunkloaderManager {
+    public void addOrRemoveChunkloader(Location location, String chunkname) {
+        if (!location.getChunk().isLoaded()) {
+            if (!location.getChunk().isForceLoaded()) {
+                location.getChunk().setForceLoaded(true);
+                double x = location.getX();
+                double y = location.getY();
+                double z = location.getZ();
+                ChunkloaderCMD.cfg.set("Chunks." + chunkname + ".x", Double.valueOf(x));
+                ChunkloaderCMD.cfg.set("Chunks." + chunkname + ".y", Double.valueOf(y));
+                ChunkloaderCMD.cfg.set("Chunks." + chunkname + ".z", Double.valueOf(z));
+                ChunkloaderCMD.cfg.set("Chunks." + chunkname + ".boolean", Boolean.valueOf(true));
+                try {
+                    ChunkloaderCMD.cfg.save(ChunkloaderCMD.file);
+                    if (!ChunkloaderCMD.file.exists()) {
+                        ChunkloaderCMD.file.createNewFile();
+                        ChunkloaderCMD.file.mkdir();
+                    }
+                } catch (IOException e) {
+                    e.printStackTrace();
+                }
+
+            }
+        } else if (location.getChunk().isForceLoaded() &&
+                ChunkloaderCMD.cfg.getBoolean("Chunks." + chunkname + ".boolean")) {
+            location.getChunk().setForceLoaded(false);
+        }
+    }
+
+
+    FileConfiguration cfg = ChunkloaderCMD.cfg;
+
+    public ArrayList<Chunk> getLoadedChunks() throws NullPointerException {
+        ConfigurationSection cs = ChunkloaderCMD.cfg.getConfigurationSection("Chunks");
+        ArrayList<Chunk> chunks = new ArrayList<>();
+        if (cs != null) {
+            for (String s : cs.getKeys(false)) {
+                if (this.cfg.getBoolean("Chunks." + s + ".boolean")) {
+                    Location loc = new Location(Bukkit.getWorld("world"), this.cfg.getDouble("Chunks." + s + ".x"), this.cfg.getDouble("Chunks." + s + ".y"), this.cfg.getDouble("Chunks." + s + ".z"));
+                    if (loc.getChunk().isForceLoaded()) {
+                        chunks.add(loc.getChunk());
+                    }
+                }
+            }
+        }
+        return chunks;
+    }
+}
+
+
Index: src/main/java/de/framedev/frameapi/mongodb/BackendManager.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/de/framedev/frameapi/mongodb/BackendManager.java	(date 1592504410365)
+++ src/main/java/de/framedev/frameapi/mongodb/BackendManager.java	(date 1592504410365)
@@ -0,0 +1,169 @@
+package de.framedev.frameapi.mongodb;
+
+import com.mongodb.Block;
+import com.mongodb.client.MongoCollection;
+import com.mongodb.client.model.InsertOneOptions;
+import de.framedev.frameapi.main.Main;
+import org.bson.Document;
+import org.bson.conversions.Bson;
+import org.bukkit.Bukkit;
+import org.bukkit.OfflinePlayer;
+
+import java.util.ArrayList;
+import java.util.UUID;
+
+public class BackendManager {
+    private Main plugin;
+
+    public BackendManager(Main plugin) {
+        this.plugin = plugin;
+    }
+
+    public void createUserMoney(OfflinePlayer player, String collection) {
+        String uuid = player.getUniqueId().toString();
+        if (existsCollection(collection)) {
+            MongoCollection<Document> collections = this.plugin.getMongoManager().getDatabase().getCollection(collection);
+            Document result = (Document) collections.find((Bson) new Document("uuid", uuid)).first();
+            if (result == null) {
+                Document dc = (new Document("uuid", uuid))
+                        .append("name", player.getName())
+                        .append("groupid", 0)
+                        .append("money", 0)
+                        .append("bank", 0)
+                        .append("offline", false)
+                        .append("createDate", System.currentTimeMillis())
+                        .append("lastLogin", System.currentTimeMillis());
+                collections.insertOne(dc, (new InsertOneOptions()).bypassDocumentValidation(false));
+            }
+        } else {
+            this.plugin.getMongoManager().getDatabase().createCollection(collection);
+            MongoCollection<Document> collections = this.plugin.getMongoManager().getDatabase().getCollection(collection);
+            Document result = (Document) collections.find((Bson) new Document("uuid", uuid)).first();
+            if (result == null) {
+
+
+                Document dc = (new Document("uuid", uuid))
+                        .append("name", player.getName()).append("groupid", 0)
+                        .append("money", 0)
+                        .append("bank", 0)
+                        .append("offline", false)
+                        .append("createDate", System.currentTimeMillis())
+                        .append("lastLogin", System.currentTimeMillis());
+                collections.insertOne(dc, (new InsertOneOptions()).bypassDocumentValidation(false));
+            }
+        }
+    }
+
+    public void createPlayerStats(OfflinePlayer player, String collection) {
+        String uuid = player.getUniqueId().toString();
+        if (existsCollection(collection)) {
+            MongoCollection<Document> collections = this.plugin.getMongoManager().getDatabase().getCollection(collection);
+            Document result = (Document) collections.find((Bson) new Document("uuid", uuid)).first();
+            if (result == null) {
+
+
+                Document dc = (new Document("uuid", uuid)).append("name", player.getName()).append("groupid", Integer.valueOf(0)).append("kills", Integer.valueOf(0)).append("createDate", Long.valueOf(System.currentTimeMillis())).append("lastLogin", Long.valueOf(System.currentTimeMillis()));
+                collections.insertOne(dc, (new InsertOneOptions()).bypassDocumentValidation(Boolean.valueOf(false)));
+            }
+        } else {
+            this.plugin.getMongoManager().getDatabase().createCollection(collection);
+            MongoCollection<Document> collections = this.plugin.getMongoManager().getDatabase().getCollection(collection);
+            Document result = (Document) collections.find((Bson) new Document("uuid", uuid)).first();
+            if (result == null) {
+
+
+                Document dc = (new Document("uuid", uuid)).append("name", player.getName()).append("groupid", Integer.valueOf(0)).append("kills", Integer.valueOf(0)).append("createDate", Long.valueOf(System.currentTimeMillis())).append("lastLogin", Long.valueOf(System.currentTimeMillis()));
+                collections.insertOne(dc, (new InsertOneOptions()).bypassDocumentValidation(Boolean.valueOf(false)));
+            }
+        }
+    }
+
+
+    public void updateUser(OfflinePlayer player, String where, Object data, String collection) {
+        if (existsCollection(collection)) {
+            String uuid = player.getUniqueId().toString();
+            MongoCollection<Document> collections = this.plugin.getMongoManager().getDatabase().getCollection(collection);
+            Document document = (Document) collections.find((Bson) new Document("uuid", uuid)).first();
+            if (document != null) {
+                Document document1 = new Document(where, data);
+                Document document2 = new Document("$set", document1);
+                collections.updateOne((Bson) document, (Bson) document2);
+            }
+        } else {
+            String uuid = player.getUniqueId().toString();
+            this.plugin.getMongoManager().getDatabase().createCollection(collection);
+            MongoCollection<Document> collections = this.plugin.getMongoManager().getDatabase().getCollection(collection);
+            Document document = (Document) collections.find((Bson) new Document("uuid", uuid)).first();
+            if (document != null) {
+                Document document1 = new Document(where, data);
+                Document document2 = new Document("$set", document1);
+                collections.updateOne((Bson) document, (Bson) document2);
+            }
+        }
+    }
+
+
+    public void deleteUser(OfflinePlayer player, String collection) {
+        if (existsCollection(collection)) {
+            String uuid = player.getUniqueId().toString();
+            MongoCollection<Document> collections = this.plugin.getMongoManager().getDatabase().getCollection(collection);
+            Document document = (Document) collections.find((Bson) new Document("uuid", uuid)).first();
+            if (document != null) {
+                collections.deleteOne((Bson) document);
+            }
+        } else {
+            String uuid = player.getUniqueId().toString();
+            this.plugin.getMongoManager().getDatabase().createCollection(collection);
+            MongoCollection<Document> collections = this.plugin.getMongoManager().getDatabase().getCollection(collection);
+            Document document = (Document) collections.find((Bson) new Document("uuid", uuid)).first();
+            if (document != null) {
+                collections.deleteOne((Bson) document);
+            }
+        }
+    }
+
+    public Object get(OfflinePlayer player, String where, String collection) {
+        if (existsCollection(collection)) {
+            MongoCollection<Document> mongoCollection = this.plugin.getMongoManager().getDatabase().getCollection(collection);
+            String str = player.getUniqueId().toString();
+            Document document1 = (Document) mongoCollection.find((Bson) new Document("uuid", str)).first();
+            if (document1 != null) {
+                return document1.get(where);
+            }
+            return null;
+        }
+        this.plugin.getMongoManager().getDatabase().createCollection(collection);
+        MongoCollection<Document> collections = this.plugin.getMongoManager().getDatabase().getCollection(collection);
+        String uuid = player.getUniqueId().toString();
+        Document document = (Document) collections.find((Bson) new Document("uuid", uuid)).first();
+        if (document != null) {
+            return document.get(where);
+        }
+        return null;
+    }
+
+
+    public boolean existsCollection(String collection) {
+        MongoCollection<Document> collections = this.plugin.getMongoManager().getDatabase().getCollection(collection);
+        return collections != null;
+    }
+
+
+    @SuppressWarnings("deprecation")
+    public ArrayList<OfflinePlayer> getOfflinePlayers(String collection) {
+        ArrayList<OfflinePlayer> players = new ArrayList<>();
+        if (existsCollection(collection)) {
+            MongoCollection<Document> collections = this.plugin.getMongoManager().getDatabase().getCollection(collection);
+            collections.find(new Document("offline", true)).forEach((Block<? super Document>) document -> {
+                if (document != null) {
+                    UUID uuid = UUID.fromString(document.getString("uuid"));
+                    players.add(Bukkit.getOfflinePlayer(uuid));
+                }
+            });
+            return players;
+        }
+        return null;
+    }
+}
+
+
Index: src/main/java/de/framedev/frameapi/managers/ItemBuilder.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/de/framedev/frameapi/managers/ItemBuilder.java	(date 1591738414119)
+++ src/main/java/de/framedev/frameapi/managers/ItemBuilder.java	(date 1591738414119)
@@ -0,0 +1,91 @@
+package de.framedev.frameapi.managers;
+
+import de.framedev.frameapi.main.Main;
+import org.bukkit.Bukkit;
+import org.bukkit.Material;
+import org.bukkit.attribute.Attribute;
+import org.bukkit.attribute.AttributeModifier;
+import org.bukkit.enchantments.Enchantment;
+import org.bukkit.inventory.EquipmentSlot;
+import org.bukkit.inventory.ItemFlag;
+import org.bukkit.inventory.ItemStack;
+import org.bukkit.inventory.meta.ItemMeta;
+
+import java.util.Arrays;
+import java.util.UUID;
+
+public class ItemBuilder {
+    ItemStack itemStack;
+    ItemMeta itemMeta;
+
+    public ItemBuilder(Material material) {
+        this.itemStack = new ItemStack(material);
+        this.itemMeta = this.itemStack.getItemMeta();
+    }
+
+    public ItemBuilder(ItemStack itemStack) {
+        this.itemStack = itemStack;
+        this.itemMeta = itemStack.getItemMeta();
+    }
+
+    public ItemBuilder setDisplayName(String displayName) {
+        this.itemMeta.setDisplayName(displayName);
+        return this;
+    }
+
+    public ItemBuilder setAmount(int amount) {
+        this.itemStack.setAmount(amount);
+        return this;
+    }
+
+    public ItemBuilder addItemFlag(ItemFlag itemFlag) {
+        this.itemMeta.addItemFlags(itemFlag);
+        return this;
+    }
+
+    public ItemBuilder addEnchantment(Enchantment enchantment, int level, boolean ignorelevel) {
+        this.itemMeta.addEnchant(enchantment, level, ignorelevel);
+        return this;
+    }
+
+    public ItemBuilder addAttribute(Attribute attribute, int amount, AttributeModifier.Operation operation, EquipmentSlot equipmentSlot) {
+        AttributeModifier attributeModifier = new AttributeModifier(UUID.randomUUID(), attribute.name(), amount, operation, equipmentSlot);
+        this.itemMeta.addAttributeModifier(attribute, attributeModifier);
+        return this;
+    }
+
+    public ItemBuilder setLore(String... lore) {
+        this.itemMeta.setLore(Arrays.asList(lore));
+        return this;
+    }
+
+    public ItemBuilder setUnbreakable(boolean isUnbreakable) {
+        this.itemMeta.setUnbreakable(isUnbreakable);
+        return this;
+    }
+
+    public ItemBuilder hideEnchantments() {
+        this.itemMeta.addItemFlags(ItemFlag.HIDE_ENCHANTS);
+        return this;
+    }
+
+    public ItemStack build() {
+        try {
+            if (this.itemStack != null) {
+                if (this.itemMeta != null) {
+                    this.itemStack.setItemMeta(this.itemMeta);
+                    return this.itemStack;
+                }
+                return this.itemStack;
+            }
+
+            return null;
+        } catch (NullPointerException ex) {
+            ex.printStackTrace();
+            Bukkit.getConsoleSender().sendMessage(Main.FrameMainGet.getPrefix() + "Â§cItemStack oder ItemMeta ist Â§6null");
+            return null;
+        }
+    }
+}
+
+
Index: src/main/java/de/framedev/frameapi/managers/MultiWorldManager.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/de/framedev/frameapi/managers/MultiWorldManager.java	(date 1589732865272)
+++ src/main/java/de/framedev/frameapi/managers/MultiWorldManager.java	(date 1589732865272)
@@ -0,0 +1,123 @@
+package de.framedev.frameapi.managers;
+
+import de.framedev.frameapi.main.Main;
+import org.bukkit.*;
+import org.bukkit.configuration.file.FileConfiguration;
+import org.bukkit.configuration.file.YamlConfiguration;
+import org.bukkit.entity.Player;
+
+import java.io.File;
+import java.util.ArrayList;
+import java.util.Objects;
+
+
+public class MultiWorldManager {
+    String worldname;
+    File file = new File("plugins/FrameAPI/worlds.yml");
+    FileConfiguration cfg = (FileConfiguration) YamlConfiguration.loadConfiguration(this.file);
+
+    public MultiWorldManager(String worldname) {
+        this.worldname = worldname;
+    }
+
+
+    public MultiWorldManager() {
+    }
+
+
+    public MultiWorldManager createWorld() {
+        WorldCreator wc = new WorldCreator(this.worldname);
+        wc.createWorld();
+        return this;
+    }
+
+    public MultiWorldManager createWorld(World.Environment environment) {
+        WorldCreator wc = new WorldCreator(this.worldname);
+        wc.environment(environment);
+        wc.createWorld();
+        return this;
+    }
+
+    public MultiWorldManager createWorld(World.Environment environment, WorldType worldType) {
+        WorldCreator wc = new WorldCreator(this.worldname);
+        wc.environment(environment);
+        wc.type(worldType);
+        wc.createWorld();
+        return this;
+    }
+
+    public MultiWorldManager createWorld(WorldType worldType) {
+        WorldCreator wc = new WorldCreator(this.worldname);
+        wc.type(worldType);
+        wc.createWorld();
+        return this;
+    }
+
+    public MultiWorldManager teleportToWorld(Player player) {
+        World world = Bukkit.getWorld(this.worldname);
+        player.teleport(world.getSpawnLocation());
+        return this;
+    }
+
+
+    public void saveWorldinConfig() {
+        ArrayList<String> worlds = (ArrayList<String>) Main.getInstance().getConfig().getStringList("Worlds");
+        if (!worlds.contains(this.worldname)) {
+
+
+            worlds.add(this.worldname);
+            Main.getInstance().getConfig().set("Worlds", worlds);
+            Main.getInstance().saveConfig();
+        }
+    }
+
+    public void setDifficulty(Difficulty difficulty) {
+        World world = Bukkit.getWorld(this.worldname);
+        if (world != null) {
+            world.setDifficulty(difficulty);
+        } else {
+            Bukkit.getConsoleSender().sendMessage(Main.FrameMainGet.getPrefix() + " §cDiese Welt existiert nicht!");
+        }
+    }
+
+
+    public String toString() {
+        return "MultiWorldManager{worldname='" + this.worldname + '\'' + ", file=" + this.file + ", cfg=" + this.cfg + '}';
+    }
+
+
+    public void createWorldifNotExists() {
+        ArrayList<String> worlds = (ArrayList<String>) Main.getInstance().getConfig().getStringList("Worlds");
+        for (String s : worlds) {
+            WorldCreator wc = new WorldCreator(s);
+            Bukkit.createWorld(wc);
+        }
+    }
+
+
+    public boolean equals(Object o) {
+        if (this == o) return true;
+        if (o == null || getClass() != o.getClass()) return false;
+        MultiWorldManager that = (MultiWorldManager) o;
+        return (Objects.equals(this.worldname, that.worldname) &&
+                Objects.equals(this.file, that.file) &&
+                Objects.equals(this.cfg, that.cfg));
+    }
+
+
+    protected Object clone() throws CloneNotSupportedException {
+        return super.clone();
+    }
+
+
+    protected void finalize() throws Throwable {
+        super.finalize();
+    }
+
+
+    public int hashCode() {
+        return Objects.hash(new Object[]{this.worldname, this.file, this.cfg});
+    }
+}
+
+
Index: src/main/java/de/framedev/frameapi/managers/SchedulerManager.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/de/framedev/frameapi/managers/SchedulerManager.java	(date 1591785738978)
+++ src/main/java/de/framedev/frameapi/managers/SchedulerManager.java	(date 1591785738978)
@@ -0,0 +1,74 @@
+package de.framedev.frameapi.managers;
+
+import de.framedev.frameapi.cmds.ChunkloaderCMD;
+import de.framedev.frameapi.listeners.money.GetMoneyInTime;
+import de.framedev.frameapi.main.Main;
+import de.framedev.frameapi.mysql.MYSQL;
+import de.framedev.frameapi.mysql.SQL;
+import de.framedev.frameapi.warps.WarpSigns;
+import org.bukkit.Bukkit;
+import org.bukkit.Location;
+import org.bukkit.plugin.Plugin;
+import org.bukkit.scheduler.BukkitRunnable;
+
+/*
+ * =============================================
+ * = This Plugin was Created by FrameDev       =
+ * = Copyrighted by FrameDev                   =
+ * = Please don't Change anything              =
+ * =============================================
+ * This Class was made at 07.03.2020, 13:13
+ */
+public class SchedulerManager implements Runnable {
+
+    GetMoneyInTime getMoneyInTime = new GetMoneyInTime(Main.getInstance());
+    @Override
+    public void run() {
+        Main.getInstance().saveDefaultConfig();
+        if (Main.getInstance().getConfig().getBoolean("MYSQL.Boolean")) {
+            if (WarpSigns.UtilinConfigList("Money")) {
+                getMoneyInTime.getOfflinePlayerMoney();
+                getMoneyInTime.getMoneyinTime();
+            }
+        }
+        Main.getInstance().savePlayersInventory();
+        startRunnables();
+    }
+
+    public void startRunnables() {
+        new BukkitRunnable() {
+            public void run() {
+                for (String s : ChunkloaderCMD.cfg.getKeys(false)) {
+                    if (ChunkloaderCMD.cfg.getBoolean(s + ".boolean")) {
+                        Location loc = new Location(Bukkit.getWorld(ChunkloaderCMD.cfg.getString(s + ".world")), ChunkloaderCMD.cfg.getInt(s + ".x"), ChunkloaderCMD.cfg.getInt(s + ".y"), ChunkloaderCMD.cfg.getInt(s + ".z"));
+                        loc.getChunk().setForceLoaded(true);
+                    }
+                }
+                Bukkit.getConsoleSender().sendMessage(Main.FrameMainGet.getPrefix() + " §aChunkloader Activated!");
+            }
+        }.runTaskLater(Main.getInstance(), 60L);
+        if (Main.getInstance().getConfig().getBoolean("MYSQL.Boolean")) {
+            (new BukkitRunnable() {
+                public void run() {
+                    if (MYSQL.con != null) {
+                        MYSQL.close();
+                        return;
+                    }
+                }
+            }).runTaskTimer(Main.getInstance(), 0L, 1200L);
+            new BukkitRunnable() {
+                @Override
+                public void run() {
+                    if (SQL.exists("money", "PlayerName", "yes")) {
+                        SQL.deleteDataInTable("money", "PlayerName = 'yes';");
+                    }
+                }
+            }.runTaskTimer(Main.getInstance(), 0, 320);
+        }
+        (new BukkitRunnable() {
+            public void run() {
+                Main.getInstance().checkUpdate();
+            }
+        }).runTaskLater(Main.getInstance(), 200L);
+    }
+}
Index: src/main/java/de/framedev/frameapi/managers/FileManager.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/de/framedev/frameapi/managers/FileManager.java	(date 1589733082797)
+++ src/main/java/de/framedev/frameapi/managers/FileManager.java	(date 1589733082797)
@@ -0,0 +1,299 @@
+package de.framedev.frameapi.managers;
+
+import de.framedev.frameapi.api.API;
+import de.framedev.frameapi.main.Main;
+import de.framedev.frameapi.utils.Config;
+import org.bukkit.Bukkit;
+import org.bukkit.configuration.Configuration;
+import org.bukkit.configuration.InvalidConfigurationException;
+import org.bukkit.configuration.file.FileConfiguration;
+import org.bukkit.configuration.file.YamlConfiguration;
+
+import java.io.*;
+
+public class FileManager {
+    private static File customPlayersConfigFile;
+    private static FileConfiguration customPlayersConfig;
+    private static File customConfigFile;
+    private static FileConfiguration customConfig;
+    private static File informationFile;
+    private static FileConfiguration informationCfg;
+    private final Main plugin;
+    public File locationFile = new File("plugins/FrameAPI/locations.yml");
+    public FileConfiguration locationCfg = (FileConfiguration) YamlConfiguration.loadConfiguration(this.locationFile);
+
+    public FileManager(Main plugin) {
+        this.plugin = plugin;
+    }
+
+
+    public FileConfiguration getCustomPlayersConfig() {
+        return customPlayersConfig;
+    }
+
+
+    public void createCustomPlayersConfig() {
+        customPlayersConfigFile = new File(Main.getInstance().getDataFolder(), "players.yml");
+        if (!customPlayersConfigFile.exists()) {
+            customPlayersConfigFile.getParentFile().mkdirs();
+            Main.getInstance().saveResource("messages.yml", false);
+        }
+
+        customPlayersConfig = (FileConfiguration) new YamlConfiguration();
+        try {
+            customPlayersConfig.load(customPlayersConfigFile);
+        } catch (IOException | InvalidConfigurationException e) {
+            e.printStackTrace();
+        }
+    }
+
+    public void savecustomPlayersConfig() {
+        try {
+            getCustomConfig().save(customPlayersConfigFile = new File(Main.getInstance().getDataFolder(), "players.yml"));
+        } catch (IOException e) {
+            e.printStackTrace();
+        }
+    }
+
+
+    public void reloadCustomPlayersConfig() throws UnsupportedEncodingException {
+        if (getCustomPlayersConfig() == null) ;
+
+        customPlayersConfig = (FileConfiguration) YamlConfiguration.loadConfiguration(customPlayersConfigFile);
+
+
+        Reader defConfigStream = new InputStreamReader(Main.getInstance().getResource("players.yml"), "UTF8");
+        if (defConfigStream != null) {
+            YamlConfiguration defConfig = YamlConfiguration.loadConfiguration(defConfigStream);
+            customPlayersConfig.setDefaults((Configuration) defConfig);
+        }
+    }
+
+
+    public FileConfiguration getCustomMessagesConfig() {
+        return customConfig;
+    }
+
+
+    public void createCustomMessagesConfig() {
+        customConfigFile = new File(Main.getInstance().getDataFolder(), "messages.yml");
+        if (!customConfigFile.exists()) {
+            customConfigFile.getParentFile().mkdirs();
+            Main.getInstance().saveResource("messages.yml", false);
+        }
+
+        customConfig = (FileConfiguration) new YamlConfiguration();
+        try {
+            customConfig.load(customConfigFile);
+        } catch (IOException | InvalidConfigurationException e) {
+            e.printStackTrace();
+        }
+    }
+
+    public void savecustomMessagesConfig() {
+        try {
+            getCustomConfig().save(customConfigFile = new File(Main.getInstance().getDataFolder(), "messages.yml"));
+        } catch (IOException e) {
+            e.printStackTrace();
+        }
+    }
+
+
+    public void reloadCustomConfig() throws UnsupportedEncodingException {
+        if (API.CreateConfig.getConfig() == null) ;
+
+        CreateConfig.myConfig = (FileConfiguration) YamlConfiguration.loadConfiguration(CreateConfig.configFile);
+
+
+        Reader defConfigStream = new InputStreamReader(Main.getInstance().getResource("messages.yml"), "UTF8");
+        if (defConfigStream != null) {
+            YamlConfiguration defConfig = YamlConfiguration.loadConfiguration(defConfigStream);
+            CreateConfig.myConfig.setDefaults((Configuration) defConfig);
+        }
+    }
+
+    public void loadLocationCfg() {
+        try {
+            this.locationCfg.load(this.locationFile);
+        } catch (IOException ex) {
+            ex.printStackTrace();
+        } catch (InvalidConfigurationException ex) {
+            ex.printStackTrace();
+        }
+    }
+
+
+    public void saveCfgLocation() {
+        try {
+            this.locationCfg.save(this.locationFile);
+        } catch (IOException e) {
+            e.printStackTrace();
+        }
+    }
+
+
+    public FileConfiguration getCustomConfig() {
+        return informationCfg;
+    }
+
+
+    public void createCustomConfig() {
+        informationFile = new File(Main.getInstance().getDataFolder(), "Information.yml");
+        if (!informationFile.exists()) {
+            informationFile.getParentFile().mkdirs();
+            Main.getInstance().saveResource("Information.yml", false);
+        }
+
+        informationCfg = (FileConfiguration) new YamlConfiguration();
+        try {
+            informationCfg.load(informationFile);
+        } catch (IOException | InvalidConfigurationException e) {
+            e.printStackTrace();
+        }
+    }
+
+    public void saveCustomConfig() {
+        try {
+            informationCfg.save(informationFile);
+        } catch (IOException e) {
+            e.printStackTrace();
+        }
+        try {
+            informationCfg.load(informationFile);
+        } catch (IOException e) {
+            e.printStackTrace();
+        } catch (InvalidConfigurationException e) {
+            e.printStackTrace();
+        }
+    }
+
+
+    public static class CreateConfig {
+        private static FileConfiguration myConfig;
+
+
+        private static File configFile;
+
+
+        private static boolean loaded = false;
+
+
+        public static FileConfiguration getConfig() {
+            try {
+                if (!loaded) {
+                    loadConfig();
+                }
+            } catch (NullPointerException ex) {
+                Bukkit.getConsoleSender().sendMessage("Â§cNo Section Detected!");
+            }
+            return myConfig;
+        }
+
+        public static void saveConfig() {
+            try {
+                myConfig.save(configFile);
+            } catch (IOException e) {
+                e.printStackTrace();
+            }
+        }
+
+
+        public static File getConfigFile() {
+            return configFile;
+        }
+
+
+        public static void loadConfig() {
+            configFile = new File(Bukkit.getServer().getPluginManager().getPlugin("FrameAPI").getDataFolder(), "messages.yml");
+            if (configFile.exists()) {
+                new YamlConfiguration();
+                myConfig = (FileConfiguration) YamlConfiguration.loadConfiguration(configFile);
+                try {
+                    myConfig.load(configFile);
+                } catch (IOException | InvalidConfigurationException e1) {
+                    e1.printStackTrace();
+                }
+                try {
+                    if ((new File(Main.getInstance().getDataFolder() + "/messages.yml")).exists()) {
+                        boolean changesMade = false;
+                        YamlConfiguration tmp = new YamlConfiguration();
+                        tmp.load(Main.getInstance().getDataFolder() + "/messages.yml");
+                        for (String str : myConfig.getKeys(true)) {
+                            if (!tmp.getKeys(true).contains(str)) {
+                                tmp.set(str, myConfig.get(str));
+                                changesMade = true;
+                            }
+                        }
+                        if (changesMade) {
+                            tmp.save(Main.getInstance().getDataFolder() + "/messages.yml");
+                        }
+                    }
+                } catch (IOException | InvalidConfigurationException e) {
+                    e.printStackTrace();
+                }
+                loaded = true;
+            } else {
+                try {
+                    Bukkit.getServer().getPluginManager().getPlugin("FrameAPI").getDataFolder().mkdir();
+                    InputStream jarURL = Config.class.getResourceAsStream("/messages.yml");
+                    copyFile(jarURL, configFile);
+                    new YamlConfiguration();
+                    myConfig = (FileConfiguration) YamlConfiguration.loadConfiguration(configFile);
+                    myConfig.save(configFile);
+                    myConfig.options().copyDefaults(true);
+                    Main.getInstance().getResource("messages.yml");
+                    myConfig.load(configFile);
+                    loaded = true;
+                    try {
+                        if ((new File(Main.getInstance().getDataFolder() + "/messages.yml")).exists()) {
+                            boolean changesMade = false;
+                            YamlConfiguration tmp = new YamlConfiguration();
+                            tmp.load(Main.getInstance().getDataFolder() + "/messages.yml");
+                            for (String str : myConfig.getKeys(true)) {
+                                if (!tmp.getKeys(true).contains(str)) {
+                                    tmp.set(str, myConfig.get(str));
+                                    changesMade = true;
+                                }
+                            }
+                            if (changesMade) {
+                                tmp.save(Main.getInstance().getDataFolder() + "/messages.yml");
+                            }
+                        }
+                    } catch (IOException | InvalidConfigurationException e) {
+                        e.printStackTrace();
+                    }
+                    myConfig.load(configFile);
+                } catch (Exception exception) {
+                }
+            }
+        }
+
+
+        public static void copyFile(InputStream in, File out) throws Exception {
+            InputStream fis = in;
+            FileOutputStream fos = new FileOutputStream(out);
+            try {
+                byte[] buf = new byte[1024];
+                int i = 0;
+                while ((i = fis.read(buf)) != -1) {
+                    fos.write(buf, 0, i);
+                }
+            } catch (Exception e) {
+                throw e;
+            } finally {
+                if (fis != null) {
+                    fis.close();
+                }
+                if (fos != null) {
+                    fos.close();
+                }
+            }
+        }
+
+        public static void onloadedfalse() {
+            loaded = false;
+        }
+    }
+}
+
+
Index: src/main/java/de/framedev/frameapi/managers/ServerManager.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/de/framedev/frameapi/managers/ServerManager.java	(date 1590190605002)
+++ src/main/java/de/framedev/frameapi/managers/ServerManager.java	(date 1590190605002)
@@ -0,0 +1,56 @@
+package de.framedev.frameapi.managers;
+
+import com.google.common.io.ByteArrayDataInput;
+import com.google.common.io.ByteArrayDataOutput;
+import com.google.common.io.ByteStreams;
+import de.framedev.frameapi.main.Main;
+import org.bukkit.configuration.file.FileConfiguration;
+import org.bukkit.configuration.file.YamlConfiguration;
+import org.bukkit.entity.Player;
+import org.bukkit.plugin.messaging.PluginMessageListener;
+
+import java.io.File;
+
+/*
+ * =============================================
+ * = This Plugin was Created by FrameDev       =
+ * = Copyrighted by FrameDev                   =
+ * = Please don't Change anything              =
+ * =============================================
+ * This Class was made at 23.05.2020, 01:24
+ */
+public class ServerManager implements PluginMessageListener {
+    File file = new File(Main.getInstance().getDataFolder(),"servers.yml");
+    FileConfiguration cfg = YamlConfiguration.loadConfiguration(file);
+
+    public FileConfiguration getCfg() {
+        return cfg;
+    }
+
+    public File getFile() {
+        return file;
+    }
+
+    @Override
+        public void onPluginMessageReceived(String channel, Player player, byte[] message) {
+            if (!channel.equals("BungeeCord")) {
+                return;
+            }
+            ByteArrayDataInput in = ByteStreams.newDataInput(message);
+            String subchannel = in.readUTF();
+
+        }
+
+        /**
+         * @param player Player
+         * @param server server to connect
+         */
+        public void connect(Player player, String server) {
+            ByteArrayDataOutput output = ByteStreams.newDataOutput();
+            output.writeUTF("Connect");
+            output.writeUTF(server);
+            player.sendPluginMessage(Main.getInstance(), "BungeeCord", output.toByteArray());
+        }
+
+
+}
Index: src/main/java/de/framedev/frameapi/managers/CustomConfig.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/de/framedev/frameapi/managers/CustomConfig.java	(date 1592260172993)
+++ src/main/java/de/framedev/frameapi/managers/CustomConfig.java	(date 1592260172993)
@@ -0,0 +1,88 @@
+package de.framedev.frameapi.managers;
+
+import de.framedev.frameapi.interfaces.CustomConfigInterface;
+import de.framedev.frameapi.main.Main;
+import org.bukkit.Bukkit;
+import org.bukkit.Color;
+import org.bukkit.Location;
+import org.bukkit.OfflinePlayer;
+import org.bukkit.configuration.Configuration;
+import org.bukkit.configuration.ConfigurationOptions;
+import org.bukkit.configuration.ConfigurationSection;
+import org.bukkit.configuration.InvalidConfigurationException;
+import org.bukkit.configuration.file.FileConfiguration;
+import org.bukkit.configuration.file.YamlConfiguration;
+import org.bukkit.configuration.serialization.ConfigurationSerializable;
+import org.bukkit.inventory.ItemStack;
+import org.bukkit.util.Vector;
+
+import java.io.File;
+import java.io.IOException;
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
+import java.util.logging.Level;
+
+/*
+ * =============================================
+ * = This Plugin was Created by FrameDev       =
+ * = Copyrighted by FrameDev                   =
+ * = Please don't Change anything              =
+ * =============================================
+ * This Class was made at 24.05.2020, 01:15
+ */
+public class CustomConfig implements CustomConfigInterface {
+
+    String fileName;
+    File file = null;
+    FileConfiguration cfg = null;
+
+    public CustomConfig(String fileName) {
+        this.fileName = fileName;
+    }
+
+    @Override
+    public void createConfig() {
+        file = new File(Main.getInstance().getDataFolder(), fileName + ".yml");
+        if (!file.exists()) {
+            file.getParentFile().mkdirs();
+            Main.getInstance().saveResource(fileName+".yml", false);
+        }
+
+        cfg = (FileConfiguration) new YamlConfiguration();
+        try {
+            cfg.load(file);
+        } catch (IOException | InvalidConfigurationException e) {
+            e.printStackTrace();
+        }
+    }
+
+    @Override
+    public void saveConfig() {
+        try {
+           cfg.save(file = new File(Main.getInstance().getDataFolder(),fileName+".yml"));
+        } catch (IOException e) {
+            e.printStackTrace();
+        }
+    }
+
+    public void set(String path,Object object) {
+        cfg.set(path,object);
+    }
+
+    public String getString(String path) {
+        return cfg.getString(path);
+    }
+
+    public Integer getInt(String path) {
+        return cfg.getInt(path);
+    }
+
+    public Double getDouble(String path) {
+        return cfg.getDouble(path);
+    }
+
+    public Object get(String path) {
+        return cfg.get(path);
+    }
+}
Index: src/main/java/de/framedev/frameapi/managers/CropsManager.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/de/framedev/frameapi/managers/CropsManager.java	(date 1589733031361)
+++ src/main/java/de/framedev/frameapi/managers/CropsManager.java	(date 1589733031361)
@@ -0,0 +1,222 @@
+package de.framedev.frameapi.managers;
+
+import org.bukkit.Material;
+import org.bukkit.World;
+import org.bukkit.block.Block;
+import org.bukkit.block.data.Ageable;
+import org.bukkit.inventory.ItemStack;
+
+
+public class CropsManager {
+    public void setWheat(World world, int maxX, int minX, int maxY, int minY, int maxZ, int minZ) {
+        for (int x = minX; x <= maxX; x++) {
+            for (int z = minZ; z <= maxZ; z++) {
+                for (int y = minY - maxY; y <= maxY; y++) {
+                    if (world.getBlockAt(x, y, z).getType() == Material.FARMLAND) {
+                        Block block = world.getBlockAt(x, y + 1, z);
+                        block.setType(Material.WHEAT);
+                        if (block.getBlockData() instanceof Ageable) {
+                            Ageable ageable = (Ageable) block.getBlockData();
+                            ageable.setAge(1);
+                        }
+                    }
+                }
+            }
+        }
+    }
+
+
+    public void setBeetRoot(World world, int maxX, int minX, int maxY, int minY, int maxZ, int minZ) {
+        for (int x = minX; x <= maxX; x++) {
+            for (int z = minZ; z <= maxZ; z++) {
+                for (int y = minY - maxY; y <= maxY; y++) {
+                    if (world.getBlockAt(x, y, z).getType() == Material.FARMLAND) {
+                        Block block = world.getBlockAt(x, y + 1, z);
+                        block.setType(Material.BEETROOT);
+                        if (block.getBlockData() instanceof Ageable) {
+                            Ageable ageable = (Ageable) block.getBlockData();
+                            ageable.setAge(1);
+                        }
+                    }
+                }
+            }
+        }
+    }
+
+
+    public void getBeetRoot(World world, int maxX, int minX, int maxY, int minY, int maxZ, int minZ) {
+        for (int x = minX; x <= maxX; x++) {
+            for (int z = minZ; z <= maxZ; z++) {
+                for (int y = minY - maxY; y <= maxY; y++) {
+                    if (world.getBlockAt(x, y + 1, z).getType() == Material.BEETROOT) {
+                        Block block = world.getBlockAt(x, y + 1, z);
+                        if (block.getBlockData() instanceof Ageable) {
+                            Ageable ageable = (Ageable) block.getBlockData();
+                            if (ageable.getAge() == 7) {
+                                block.setType(Material.AIR);
+                                world.dropItem(block.getLocation(), new ItemStack(Material.BEETROOT, 2));
+                            }
+                        }
+                    }
+                }
+            }
+        }
+    }
+
+
+    public void getWheat(World world, int maxX, int minX, int maxY, int minY, int maxZ, int minZ) {
+        for (int x = minX; x <= maxX; x++) {
+            for (int z = minZ; z <= maxZ; z++) {
+                for (int y = minY - maxY; y <= maxY; y++) {
+                    if (world.getBlockAt(x, y + 1, z).getType() == Material.WHEAT) {
+                        Block block = world.getBlockAt(x, y + 1, z);
+                        if (block.getBlockData() instanceof Ageable) {
+                            Ageable ageable = (Ageable) block.getBlockData();
+                            if (ageable.getAge() == 7) {
+                                block.setType(Material.AIR);
+                                world.dropItem(block.getLocation(), new ItemStack(Material.WHEAT, 1));
+                                world.dropItem(block.getLocation(), new ItemStack(Material.WHEAT_SEEDS, 2));
+                            }
+                        }
+                    }
+                }
+            }
+        }
+    }
+
+
+    public void setCarrot(World world, int maxX, int minX, int maxY, int minY, int maxZ, int minZ) {
+        for (int x = minX; x <= maxX; x++) {
+            for (int z = minZ; z <= maxZ; z++) {
+                for (int y = minY - maxY; y <= maxY; y++) {
+                    if (world.getBlockAt(x, y, z).getType() == Material.FARMLAND) {
+                        Block block = world.getBlockAt(x, y + 1, z);
+                        block.setType(Material.CARROTS);
+                        if (block.getBlockData() instanceof Ageable) {
+                            Ageable ageable = (Ageable) block.getBlockData();
+                            ageable.setAge(1);
+                        }
+                    }
+                }
+            }
+        }
+    }
+
+
+    public void getCarrot(World world, int maxX, int minX, int maxY, int minY, int maxZ, int minZ) {
+        for (int x = minX; x <= maxX; x++) {
+            for (int z = minZ; z <= maxZ; z++) {
+                for (int y = minY - maxY; y <= maxY; y++) {
+                    if (world.getBlockAt(x, y + 1, z).getType() == Material.CARROTS) {
+                        Block block = world.getBlockAt(x, y + 1, z);
+                        if (block.getBlockData() instanceof Ageable) {
+                            Ageable ageable = (Ageable) block.getBlockData();
+                            if (ageable.getAge() == ageable.getMaximumAge()) {
+                                block.setType(Material.AIR);
+                                world.dropItem(block.getLocation(), new ItemStack(Material.CARROT, 3));
+                            }
+                        }
+                    }
+                }
+            }
+        }
+    }
+
+
+    public void setPotato(World world, int maxX, int minX, int maxY, int minY, int maxZ, int minZ) {
+        for (int x = minX; x <= maxX; x++) {
+            for (int z = minZ; z <= maxZ; z++) {
+                for (int y = minY - maxY; y <= maxY; y++) {
+                    if (world.getBlockAt(x, y, z).getType() == Material.FARMLAND) {
+                        Block block = world.getBlockAt(x, y + 1, z);
+                        block.setType(Material.POTATOES);
+                        if (block.getBlockData() instanceof Ageable) {
+                            Ageable ageable = (Ageable) block.getBlockData();
+                            ageable.setAge(1);
+                        }
+                    }
+                }
+            }
+        }
+    }
+
+
+    public void getPotato(World world, int maxX, int minX, int maxY, int minY, int maxZ, int minZ) {
+        for (int x = minX; x <= maxX; x++) {
+            for (int z = minZ; z <= maxZ; z++) {
+                for (int y = minY - maxY; y <= maxY; y++) {
+                    if (world.getBlockAt(x, y + 1, z).getType() == Material.POTATOES) {
+                        Block block = world.getBlockAt(x, y + 1, z);
+                        if (block.getBlockData() instanceof Ageable) {
+                            Ageable ageable = (Ageable) block.getBlockData();
+                            if (ageable.getAge() == ageable.getMaximumAge()) {
+                                block.setType(Material.AIR);
+                                world.dropItem(block.getLocation(), new ItemStack(Material.POTATO, 3));
+                            }
+                        }
+                    }
+                }
+            }
+        }
+    }
+
+    public void setSugarCane(World world, int maxX, int minX, int maxY, int minY, int maxZ, int minZ) {
+        for (int x = minX; x <= maxX; x++) {
+            for (int z = minZ; z <= maxZ; z++) {
+                for (int y = minY - maxY; y <= maxY; y++) {
+                    if (world.getBlockAt(x, y, z).getType() != Material.FARMLAND &&
+                            world.getBlockAt(x, y, z).getType() != Material.WATER) {
+                        if (world.getBlockAt(x - 1, y, z).getType() == Material.WATER) {
+                            if (world.getBlockAt(x, y, z).getType() == Material.DIRT || world.getBlockAt(x, y, z).getType() == Material.GRASS_BLOCK || world.getBlockAt(x,y,z).getType() == Material.SAND) {
+                                Block block = world.getBlockAt(x, y + 1, z);
+                                block.setType(Material.SUGAR_CANE);
+                            }
+                        } else if (world.getBlockAt(x + 1, y, z).getType() == Material.WATER) {
+                            if (world.getBlockAt(x, y, z).getType() == Material.DIRT || world.getBlockAt(x, y, z).getType() == Material.GRASS_BLOCK || world.getBlockAt(x,y,z).getType() == Material.SAND) {
+                                Block block = world.getBlockAt(x, y + 1, z);
+                                block.setType(Material.SUGAR_CANE);
+                            }
+                        } else if (world.getBlockAt(x, y, z + 1).getType() == Material.WATER) {
+                            if (world.getBlockAt(x, y, z).getType() == Material.DIRT || world.getBlockAt(x, y, z).getType() == Material.GRASS_BLOCK || world.getBlockAt(x,y,z).getType() == Material.SAND) {
+                                Block block = world.getBlockAt(x, y + 1, z);
+                                block.setType(Material.SUGAR_CANE);
+                            }
+                        } else if (world.getBlockAt(x, y, z - 1).getType() == Material.WATER) {
+                            if (world.getBlockAt(x, y, z).getType() == Material.DIRT || world.getBlockAt(x, y, z).getType() == Material.GRASS_BLOCK || world.getBlockAt(x,y,z).getType() == Material.SAND) {
+                                Block block = world.getBlockAt(x, y + 1, z);
+                                block.setType(Material.SUGAR_CANE);
+                            }
+                        }
+                    }
+                }
+            }
+        }
+    }
+
+
+    public void getSugarCane(World world, int maxX, int minX, int maxY, int minY, int maxZ, int minZ) {
+        for (int x = minX; x <= maxX; x++) {
+            for (int z = minZ; z <= maxZ; z++) {
+                for (int y = minY - maxY; y <= maxY; y++) {
+                    if (world.getBlockAt(x, y + 1, z).getType() == Material.SUGAR_CANE &&
+                            world.getBlockAt(x, y + 2, z).getType() == Material.SUGAR_CANE &&
+                            world.getBlockAt(x, y + 3, z).getType() == Material.SUGAR_CANE) {
+                        world.getBlockAt(x, y + 1, z).setType(Material.AIR);
+                        world.getBlockAt(x, y + 2, z).setType(Material.AIR);
+                        world.getBlockAt(x, y + 3, z).setType(Material.AIR);
+                        Block block = world.getBlockAt(x, y + 1, z);
+                        world.dropItem(block.getLocation(), new ItemStack(Material.SUGAR_CANE, 3));
+                    } else if (world.getBlockAt(x, y + 1, z).getType() == Material.SUGAR_CANE &&
+                            world.getBlockAt(x, y + 2, z).getType() == Material.SUGAR_CANE) {
+                        world.getBlockAt(x, y + 1, z).setType(Material.AIR);
+                        world.getBlockAt(x, y + 2, z).setType(Material.AIR);
+                    } else if (world.getBlockAt(x, y + 1, z).getType() == Material.SUGAR_CANE) {
+                        world.getBlockAt(x, y + 1, z).setType(Material.AIR);
+                    }
+                }
+            }
+        }
+    }
+}
+
+
Index: src/main/java/de/framedev/frameapi/managers/WorldManager.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/de/framedev/frameapi/managers/WorldManager.java	(date 1591738414237)
+++ src/main/java/de/framedev/frameapi/managers/WorldManager.java	(date 1591738414237)
@@ -0,0 +1,44 @@
+package de.framedev.frameapi.managers;
+
+import de.framedev.frameapi.interfaces.Constructors;
+import org.bukkit.Chunk;
+import org.bukkit.block.BlockFace;
+import org.bukkit.entity.Player;
+
+
+public class WorldManager
+        implements Constructors {
+    public Chunk getChunk(Player player) {
+        return player.getWorld().getChunkAt(player.getLocation());
+    }
+
+    public String getWorldName(Player player) {
+        return player.getWorld().getName();
+    }
+
+    public boolean isNorth(Player player) {
+        return player.getFacing() == BlockFace.NORTH;
+    }
+
+
+    public boolean isSouth(Player player) {
+        return player.getFacing() == BlockFace.SOUTH;
+    }
+
+
+    public boolean isEast(Player player) {
+        return player.getFacing() == BlockFace.EAST;
+    }
+
+
+    public boolean isWest(Player player) {
+        return player.getFacing() == BlockFace.WEST;
+    }
+
+
+    public double getWorldBorderSize(Player player) {
+        return player.getWorld().getWorldBorder().getSize();
+    }
+}
+
+
Index: src/main/java/de/framedev/frameapi/managers/SetBlock.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/de/framedev/frameapi/managers/SetBlock.java	(date 1583416258801)
+++ src/main/java/de/framedev/frameapi/managers/SetBlock.java	(date 1583416258801)
@@ -0,0 +1,5 @@
+package de.framedev.frameapi.managers;
+
+public class SetBlock {}
+
+
Index: src/main/java/de/framedev/frameapi/managers/InventoryManager.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/de/framedev/frameapi/managers/InventoryManager.java	(date 1586296735219)
+++ src/main/java/de/framedev/frameapi/managers/InventoryManager.java	(date 1586296735219)
@@ -0,0 +1,79 @@
+package de.framedev.frameapi.managers;
+
+import org.bukkit.Bukkit;
+import org.bukkit.Material;
+import org.bukkit.entity.Player;
+import org.bukkit.inventory.Inventory;
+import org.bukkit.inventory.ItemStack;
+
+
+public class InventoryManager {
+    private Inventory inventory;
+    private int inventorysize;
+    private String inventoryname;
+
+    public InventoryManager setSize(int size) {
+        this.inventorysize = size;
+        return this;
+    }
+
+    public InventoryManager setName(String name) {
+        this.inventoryname = name;
+        return this;
+    }
+
+    public InventoryManager build() {
+        try {
+            this.inventory = Bukkit.getServer().createInventory(null, 9 * this.inventorysize, this.inventoryname);
+            setInventory(this.inventory);
+        } catch (NullPointerException ex) {
+            Bukkit.getConsoleSender().sendMessage("§cThis Inventory Can not Created! " + ex.getMessage());
+        }
+        return this;
+    }
+
+    public InventoryManager setItem(ItemStack item, int position) {
+        this.inventory.setItem(position, item);
+        return this;
+    }
+
+    public Inventory getInventory() {
+        return this.inventory;
+    }
+
+    public InventoryManager setInventory(Inventory inventory) {
+        this.inventory = inventory;
+        return this;
+    }
+
+    public int getInventorysize() {
+        return this.inventorysize;
+    }
+
+    public String getInventoryname() {
+        return this.inventoryname;
+    }
+
+    public InventoryManager showInv(Player player) {
+        player.openInventory(this.inventory);
+        return this;
+    }
+
+    public InventoryManager FillNull() {
+        int size = 9 * this.inventorysize;
+        for (int i = 0; i < size; i++) {
+            if (this.inventory.getItem(i) == null) {
+                this.inventory.setItem(i, (new ItemBuilder(Material.BLACK_STAINED_GLASS)).setDisplayName(" ").build());
+            }
+        }
+
+        return this;
+    }
+
+    public InventoryManager updateInventory(Player player) {
+        player.updateInventory();
+        return this;
+    }
+}
+
+
Index: src/main/java/de/framedev/frameapi/listeners/LeaveListener.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/de/framedev/frameapi/listeners/LeaveListener.java	(date 1583571883166)
+++ src/main/java/de/framedev/frameapi/listeners/LeaveListener.java	(date 1583571883166)
@@ -0,0 +1,131 @@
+ package de.framedev.frameapi.listeners;
+
+ import de.framedev.frameapi.api.API;
+ import de.framedev.frameapi.api.SavePlayersInventory;
+import de.framedev.frameapi.listeners.energy.CapacitorListener;
+ import de.framedev.frameapi.main.Main;
+ import de.framedev.frameapi.mysql.IsTableExist;
+ import de.framedev.frameapi.mysql.MYSQL;
+ import java.sql.PreparedStatement;
+import java.sql.ResultSet;
+ import java.sql.SQLException;
+ import java.sql.Statement;
+ import org.bukkit.Bukkit;
+ import org.bukkit.OfflinePlayer;
+ import org.bukkit.event.EventHandler;
+ import org.bukkit.event.Listener;
+ import org.bukkit.event.player.PlayerKickEvent;
+ import org.bukkit.event.player.PlayerQuitEvent;
+ import org.bukkit.plugin.Plugin;
+ import org.bukkit.scheduler.BukkitRunnable;
+ 
+ public class LeaveListener implements Listener {
+   public API api = new API();
+   public Main main = Main.getInstance();
+   public CapacitorListener cmd = new CapacitorListener();
+ 
+ 
+ 
+ 
+   
+   @EventHandler
+   public void onKick(PlayerKickEvent e) {
+     if (Main.cfgm.getBoolean("MongoDB.LocalHost") || Main.cfgm.getBoolean("MongoDB.Boolean")) {
+       this.main.getBackendManager().updateUser((OfflinePlayer)e.getPlayer(), "offline", Boolean.valueOf(true), "money");
+     }
+       new SavePlayersInventory().savePlayerInventory(e.getPlayer());
+     if (this.main.getConfig().getBoolean("MYSQL.Boolean")) {
+       if (this.main.pays.contains(e.getPlayer().getName())) {
+         this.main.pays.remove(e.getPlayer().getName());
+       }
+       try {
+         if (IsTableExist.isExist("offline")) {
+           Statement statement = MYSQL.getConnection().createStatement();
+           ResultSet res = statement.executeQuery("SELECT * FROM offline WHERE PlayerName = '" + e.getPlayer().getName() + "';");
+           if (res.next()) {
+             if (res.getString("PlayerName") == null) {
+               statement.executeUpdate("INSERT INTO offline (PlayerName,boolean) VALUES ('" + e.getPlayer().getName() + "','yes');");
+               Bukkit.getConsoleSender().sendMessage(Main.FrameMainGet.getPrefix() + "§b §cInserted");
+             } else {
+               String sql2 = "UPDATE offline SET boolean = 'yes' WHERE PlayerName = '" + e.getPlayer().getName() + "'";
+               statement.executeUpdate(sql2);
+               Bukkit.getConsoleSender().sendMessage(Main.FrameMainGet.getPrefix() + "§b Updated info");
+             } 
+           } else {
+             statement.executeUpdate("INSERT INTO offline (PlayerName,boolean) VALUES ('" + e.getPlayer().getName() + "','yes');");
+           } 
+         } else {
+           String sql = "CREATE TABLE IF NOT EXISTS offline(PlayerName TEXT(11),boolean TEXT);";
+           try {
+             PreparedStatement stmt = (PreparedStatement)MYSQL.getConnection().prepareStatement(sql);
+             stmt.executeUpdate();
+           } catch (SQLException e1) {
+             e1.printStackTrace();
+           } 
+         } 
+       } catch (SQLException e1) {
+         e1.printStackTrace();
+       } finally {
+         MYSQL.close();
+       }
+
+     } 
+   }
+   
+   @EventHandler
+   public void onLeave(PlayerQuitEvent e) {
+     if (Main.cfgm.getBoolean("MongoDB.LocalHost") || Main.cfgm.getBoolean("MongoDB.Boolean")) {
+       this.main.getBackendManager().updateUser((OfflinePlayer)e.getPlayer(), "offline", Boolean.valueOf(true), "money");
+     }
+    new SavePlayersInventory().savePlayerInventory(e.getPlayer());
+    Bukkit.getConsoleSender().sendMessage("saved");
+     if (this.main.getConfig().getBoolean("MYSQL.Boolean")) {
+       if (this.main.pays.contains(e.getPlayer().getName())) {
+         this.main.pays.remove(e.getPlayer().getName());
+       }
+       try {
+         if (IsTableExist.isExist("offline")) {
+           Statement statement = MYSQL.getConnection().createStatement();
+           ResultSet res = statement.executeQuery("SELECT * FROM offline WHERE PlayerName = '" + e.getPlayer().getName() + "';");
+           if (res.next()) {
+             if (res.getString("PlayerName") == null) {
+               statement.executeUpdate("INSERT INTO offline (PlayerName,boolean) VALUES ('" + e.getPlayer().getName() + "','yes');");
+               Bukkit.getConsoleSender().sendMessage(Main.FrameMainGet.getPrefix() + "§b §cInserted");
+             } else {
+               String sql2 = "UPDATE offline SET boolean = 'yes' WHERE PlayerName = '" + e.getPlayer().getName() + "'";
+               statement.executeUpdate(sql2);
+               Bukkit.getConsoleSender().sendMessage(Main.FrameMainGet.getPrefix() + "§b Updated info");
+             } 
+           } else {
+             statement.executeUpdate("INSERT INTO offline (PlayerName,boolean) VALUES ('" + e.getPlayer().getName() + "','yes');");
+           } 
+         } else {
+           String sql = "CREATE TABLE IF NOT EXISTS offline(PlayerName TEXT(11),boolean TEXT);";
+           try {
+             PreparedStatement stmt = (PreparedStatement)MYSQL.getConnection().prepareStatement(sql);
+             stmt.executeUpdate();
+           } catch (SQLException e1) {
+             e1.printStackTrace();
+           } 
+         } 
+       } catch (SQLException e1) {
+         e1.printStackTrace();
+       } 
+     } 
+     (new CapacitorListener()).playeruuid.remove(e.getPlayer().getUniqueId());
+     (new BukkitRunnable()
+       {
+         public void run() {
+           if (Bukkit.getOnlinePlayers().size() == 0) {
+             (new CapacitorListener()).runtime.forEach(task -> task.cancel());
+ 
+           
+           }
+         }
+       }).runTaskLater((Plugin)Main.getInstance(), 120L);
+       new SavePlayersInventory().savePlayerInventory(e.getPlayer());
+
+   }
+ }
+
+
Index: .idea/uiDesigner.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/uiDesigner.xml	(date 1591733995250)
+++ .idea/uiDesigner.xml	(date 1591733995250)
@@ -0,0 +1,124 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="Palette2">
+    <group name="Swing">
+      <item class="com.intellij.uiDesigner.HSpacer" tooltip-text="Horizontal Spacer" icon="/com/intellij/uiDesigner/icons/hspacer.png" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="1" hsize-policy="6" anchor="0" fill="1" />
+      </item>
+      <item class="com.intellij.uiDesigner.VSpacer" tooltip-text="Vertical Spacer" icon="/com/intellij/uiDesigner/icons/vspacer.png" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="6" hsize-policy="1" anchor="0" fill="2" />
+      </item>
+      <item class="javax.swing.JPanel" icon="/com/intellij/uiDesigner/icons/panel.png" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="3" hsize-policy="3" anchor="0" fill="3" />
+      </item>
+      <item class="javax.swing.JScrollPane" icon="/com/intellij/uiDesigner/icons/scrollPane.png" removable="false" auto-create-binding="false" can-attach-label="true">
+        <default-constraints vsize-policy="7" hsize-policy="7" anchor="0" fill="3" />
+      </item>
+      <item class="javax.swing.JButton" icon="/com/intellij/uiDesigner/icons/button.png" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="3" anchor="0" fill="1" />
+        <initial-values>
+          <property name="text" value="Button" />
+        </initial-values>
+      </item>
+      <item class="javax.swing.JRadioButton" icon="/com/intellij/uiDesigner/icons/radioButton.png" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="3" anchor="8" fill="0" />
+        <initial-values>
+          <property name="text" value="RadioButton" />
+        </initial-values>
+      </item>
+      <item class="javax.swing.JCheckBox" icon="/com/intellij/uiDesigner/icons/checkBox.png" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="3" anchor="8" fill="0" />
+        <initial-values>
+          <property name="text" value="CheckBox" />
+        </initial-values>
+      </item>
+      <item class="javax.swing.JLabel" icon="/com/intellij/uiDesigner/icons/label.png" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="0" anchor="8" fill="0" />
+        <initial-values>
+          <property name="text" value="Label" />
+        </initial-values>
+      </item>
+      <item class="javax.swing.JTextField" icon="/com/intellij/uiDesigner/icons/textField.png" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1">
+          <preferred-size width="150" height="-1" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JPasswordField" icon="/com/intellij/uiDesigner/icons/passwordField.png" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1">
+          <preferred-size width="150" height="-1" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JFormattedTextField" icon="/com/intellij/uiDesigner/icons/formattedTextField.png" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1">
+          <preferred-size width="150" height="-1" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JTextArea" icon="/com/intellij/uiDesigner/icons/textArea.png" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
+          <preferred-size width="150" height="50" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JTextPane" icon="/com/intellij/uiDesigner/icons/textPane.png" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
+          <preferred-size width="150" height="50" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JEditorPane" icon="/com/intellij/uiDesigner/icons/editorPane.png" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
+          <preferred-size width="150" height="50" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JComboBox" icon="/com/intellij/uiDesigner/icons/comboBox.png" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="0" hsize-policy="2" anchor="8" fill="1" />
+      </item>
+      <item class="javax.swing.JTable" icon="/com/intellij/uiDesigner/icons/table.png" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
+          <preferred-size width="150" height="50" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JList" icon="/com/intellij/uiDesigner/icons/list.png" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="6" hsize-policy="2" anchor="0" fill="3">
+          <preferred-size width="150" height="50" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JTree" icon="/com/intellij/uiDesigner/icons/tree.png" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
+          <preferred-size width="150" height="50" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JTabbedPane" icon="/com/intellij/uiDesigner/icons/tabbedPane.png" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="3" hsize-policy="3" anchor="0" fill="3">
+          <preferred-size width="200" height="200" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JSplitPane" icon="/com/intellij/uiDesigner/icons/splitPane.png" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="3" hsize-policy="3" anchor="0" fill="3">
+          <preferred-size width="200" height="200" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JSpinner" icon="/com/intellij/uiDesigner/icons/spinner.png" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1" />
+      </item>
+      <item class="javax.swing.JSlider" icon="/com/intellij/uiDesigner/icons/slider.png" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1" />
+      </item>
+      <item class="javax.swing.JSeparator" icon="/com/intellij/uiDesigner/icons/separator.png" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3" />
+      </item>
+      <item class="javax.swing.JProgressBar" icon="/com/intellij/uiDesigner/icons/progressbar.png" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="0" fill="1" />
+      </item>
+      <item class="javax.swing.JToolBar" icon="/com/intellij/uiDesigner/icons/toolbar.png" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="0" fill="1">
+          <preferred-size width="-1" height="20" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JToolBar$Separator" icon="/com/intellij/uiDesigner/icons/toolbarSeparator.png" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="0" anchor="0" fill="1" />
+      </item>
+      <item class="javax.swing.JScrollBar" icon="/com/intellij/uiDesigner/icons/scrollbar.png" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="6" hsize-policy="0" anchor="0" fill="2" />
+      </item>
+    </group>
+  </component>
+</project>
\ No newline at end of file
Index: src/main/java/de/framedev/frameapi/listeners/JoinListener.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/de/framedev/frameapi/listeners/JoinListener.java	(date 1589745342270)
+++ src/main/java/de/framedev/frameapi/listeners/JoinListener.java	(date 1589745342270)
@@ -0,0 +1,179 @@
+package de.framedev.frameapi.listeners;
+
+import de.framedev.frameapi.api.API;
+import de.framedev.frameapi.api.SavePlayersInventory;
+import de.framedev.frameapi.api.money.Money;
+import de.framedev.frameapi.listeners.energy.CapacitorListener;
+import de.framedev.frameapi.main.Main;
+import de.framedev.frameapi.mysql.IsTableExist;
+import de.framedev.frameapi.mysql.MYSQL;
+import de.framedev.frameapi.utils.ReplaceCharConfig;
+import de.framedev.frameapi.warps.WarpSigns;
+import org.bukkit.Bukkit;
+import org.bukkit.OfflinePlayer;
+import org.bukkit.World;
+import org.bukkit.configuration.file.FileConfiguration;
+import org.bukkit.entity.Player;
+import org.bukkit.event.EventHandler;
+import org.bukkit.event.Listener;
+import org.bukkit.event.player.PlayerJoinEvent;
+import org.bukkit.event.player.PlayerQuitEvent;
+import org.bukkit.plugin.Plugin;
+import org.bukkit.scheduler.BukkitRunnable;
+
+import java.sql.PreparedStatement;
+import java.sql.ResultSet;
+import java.sql.SQLException;
+import java.sql.Statement;
+import java.util.UUID;
+
+public class JoinListener
+        implements Listener {
+    public static int task;
+    public Main main = Main.getInstance();
+    public FileConfiguration config = this.main.getConfig();
+    public API api = new API();
+    public CapacitorListener cmd = new CapacitorListener();
+
+
+    @EventHandler
+    public void onjoin(final PlayerJoinEvent e) {
+
+        if (Main.cfgm.getBoolean("MongoDB.LocalHost") || Main.cfgm.getBoolean("MongoDB.Boolean")) {
+
+            (new BukkitRunnable() {
+
+                public void run() {
+
+                    JoinListener.this.main.getBackendManager().createUserMoney((OfflinePlayer) e.getPlayer(), "money");
+
+                    JoinListener.this.main.getBackendManager().updateUser((OfflinePlayer) e.getPlayer(), "offline", Boolean.valueOf(false), "money");
+
+                    JoinListener.this.main.getBackendManager().updateUser((OfflinePlayer) e.getPlayer(), "lastLogin", Long.valueOf(System.currentTimeMillis()), "money");
+
+                }
+
+            }).runTaskLater((Plugin) this.main, 40L);
+
+        }
+
+        if (Main.getInstance().getConfig().getBoolean("Join.Message.Boolean")) {
+
+            String message = this.api.getCustomConfig().getString("JoinMessage");
+
+            message = ReplaceCharConfig.replaceObjectWithData(message, "[Player]", e.getPlayer().getDisplayName());
+
+            message = ReplaceCharConfig.replaceParagraph(message);
+
+            e.setJoinMessage(message);
+
+            Bukkit.getConsoleSender().sendMessage(message);
+
+        }
+        new BukkitRunnable() {
+            public void run() {
+                new SavePlayersInventory().loadPlayerInventory(e.getPlayer());
+                Bukkit.getConsoleSender().sendMessage("Inventory Loaded!");
+            }
+        }.runTaskLater((Plugin) Main.getInstance(), 20L);
+    }
+
+    @EventHandler
+    public void onleave(PlayerQuitEvent e) {
+        if (Main.getInstance().getConfig().getBoolean("Leave.Message.Boolean")) {
+            String message = this.api.getCustomConfig().getString("LeaveMessage");
+            message = ReplaceCharConfig.replaceObjectWithData(message, "[Player]", e.getPlayer().getDisplayName());
+            message = ReplaceCharConfig.replaceParagraph(message);
+            e.setQuitMessage(message);
+        }
+    }
+
+
+    @EventHandler
+    public void onJoin(final PlayerJoinEvent e) {
+        Player player = e.getPlayer();
+        (new BukkitRunnable() {
+            public void run() {
+                if (JoinListener.this.config.getBoolean("MYSQL.Boolean")) {
+                    (new Money()).getMoney((OfflinePlayer) e.getPlayer());
+                    if (IsTableExist.isExist("offline")) {
+                        try {
+                            Statement statement = MYSQL.getConnection().createStatement();
+                            ResultSet res = statement.executeQuery("SELECT * FROM offline WHERE PlayerName = '" + e.getPlayer().getName() + "';");
+                            if (res.next()) {
+                                if (res.getString("PlayerName") == null) {
+                                    statement.executeUpdate("INSERT INTO offline (PlayerName,boolean) VALUES ('" + e.getPlayer().getName() + "','no');");
+                                    Bukkit.getConsoleSender().sendMessage(Main.FrameMainGet.getPrefix() + "§b §cInserted");
+                                    return;
+                                }
+                                String sql2 = "UPDATE offline SET boolean = 'no' WHERE PlayerName = '" + e.getPlayer().getName() + "'";
+                                statement.executeUpdate(sql2);
+                                Bukkit.getConsoleSender().sendMessage(Main.FrameMainGet.getPrefix() + "§b Updated info");
+
+                                return;
+                            }
+                            statement.executeUpdate("INSERT INTO offline (PlayerName,boolean) VALUES ('" + e.getPlayer().getName() + "','no');");
+
+                        } catch (SQLException e1) {
+                            e1.printStackTrace();
+                        } finally {
+                        }
+                    } else {
+
+                        String sql = "CREATE TABLE IF NOT EXISTS offline(PlayerName TEXT(11),boolean TEXT);";
+                        try {
+                            PreparedStatement stmt = (PreparedStatement) MYSQL.getConnection().prepareStatement(sql);
+                            stmt.executeUpdate();
+                            MYSQL.close();
+                        } catch (SQLException e1) {
+                            e1.printStackTrace();
+                        }
+
+                    }
+                }
+            }
+        }).runTaskLater((Plugin) Main.getInstance(), 60L);
+        if (WarpSigns.UtilinConfigList("Energy").booleanValue()) {
+            if (Main.getInstance().getConfig().getBoolean("MYSQL.Boolean")) {
+                startUpdateWorld(player.getWorld(), player, player.getUniqueId());
+            }
+        }
+        (new BukkitRunnable() {
+            public void run() {
+                if (JoinListener.this.config.getBoolean("MYSQL.Boolean")) {
+                    for (Player online : Bukkit.getOnlinePlayers()) {
+                        try {
+                            Statement statement = MYSQL.getConnection().createStatement();
+                            ResultSet res = statement.executeQuery("SELECT * FROM pays WHERE PlayerTo = '" + online.getName() + "';");
+                            if (res.next()) {
+                                int amounts = JoinListener.this.api.getPays((OfflinePlayer) online).intValue();
+                                JoinListener.this.main.j = amounts;
+                                if (JoinListener.this.main.j == 0)
+                                    continue;
+                                online.sendMessage("§aYou get a Pay use /paythebill to sale it of §b" + JoinListener.this.main.j);
+                                JoinListener.this.main.pays.add(online.getName());
+                                JoinListener.this.main.j = 0;
+                            }
+
+                        } catch (SQLException e) {
+                            e.printStackTrace();
+                        }
+
+                    }
+                }
+            }
+        }).runTaskLater((Plugin) Main.getInstance(), 120L);
+    }
+
+    public void startUpdateWorld(World world, Player player, UUID uuid) {
+        if (WarpSigns.UtilinConfigList("Energy").booleanValue()) {
+            if (Main.getInstance().getConfig().getBoolean("MYSQL.Boolean")) {
+                (new CapacitorListener()).playeruuid.add(uuid);
+                this.cmd.updateWorld(world, player);
+            }
+
+        }
+    }
+}
+
+
Index: src/main/java/de/framedev/frameapi/listeners/ChatListener.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/de/framedev/frameapi/listeners/ChatListener.java	(date 1591733994760)
+++ src/main/java/de/framedev/frameapi/listeners/ChatListener.java	(date 1591733994760)
@@ -0,0 +1,31 @@
+package de.framedev.frameapi.listeners;
+
+import de.framedev.frameapi.managers.ChatManager;
+import de.framedev.frameapi.main.Main;
+import org.bukkit.Bukkit;
+import org.bukkit.event.EventHandler;
+import org.bukkit.event.Listener;
+import org.bukkit.event.player.AsyncPlayerChatEvent;
+
+/*
+ * =============================================
+ * = This Plugin was Created by FrameDev       =
+ * = Copyrighted by FrameDev                   =
+ * = Please don't Change anything              =
+ * =============================================
+ * This Class was made at 23.05.2020, 21:38
+ */
+public class ChatListener implements Listener {
+
+    public ChatListener(Main plugin) {
+        Bukkit.getPluginManager().registerEvents(this, plugin);
+    }
+
+    @EventHandler
+    public void onChat(AsyncPlayerChatEvent event) {
+        if (new ChatManager(event.getPlayer().getName()).isMuted()) {
+            event.setCancelled(true);
+            event.getPlayer().sendMessage("§cDu bist zurzeit gemuted §bZeit = §6" + new ChatManager(event.getPlayer().getName()).getTime());
+        }
+    }
+}
Index: src/main/java/de/framedev/frameapi/listeners/ServerSwitcher.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/de/framedev/frameapi/listeners/ServerSwitcher.java	(date 1590190656502)
+++ src/main/java/de/framedev/frameapi/listeners/ServerSwitcher.java	(date 1590190656502)
@@ -0,0 +1,52 @@
+package de.framedev.frameapi.listeners;
+
+import de.framedev.frameapi.main.Main;
+import de.framedev.frameapi.managers.ServerManager;
+import org.bukkit.Bukkit;
+import org.bukkit.block.Sign;
+import org.bukkit.event.EventHandler;
+import org.bukkit.event.Listener;
+import org.bukkit.event.block.Action;
+import org.bukkit.event.block.SignChangeEvent;
+import org.bukkit.event.player.PlayerInteractEvent;
+
+/*
+ * =============================================
+ * = This Plugin was Created by FrameDev       =
+ * = Copyrighted by FrameDev                   =
+ * = Please don't Change anything              =
+ * =============================================
+ * This Class was made at 23.05.2020, 01:24
+ */
+public class ServerSwitcher implements Listener {
+
+    public ServerSwitcher(Main plugin) {
+        Bukkit.getPluginManager().registerEvents(this, plugin);
+    }
+
+    @EventHandler
+    public void onCreateSign(SignChangeEvent event) {
+        if(event.getLine(0).equalsIgnoreCase("server")) {
+            event.setLine(0,"§6[Server]");
+            for(String s : new ServerManager().getCfg().getStringList("servers")) {
+                if(event.getLine(1).equalsIgnoreCase(s)) {
+                    event.setLine(1, s);
+                }
+            }
+        }
+    }
+
+    @EventHandler
+    public void onClickSign(PlayerInteractEvent event) {
+        if(event.getAction() == Action.RIGHT_CLICK_BLOCK) {
+            if(event.getClickedBlock() != null) {
+                if(event.getClickedBlock().getState() instanceof Sign) {
+                    Sign sign = (Sign) event.getClickedBlock().getState();
+                    if(sign.getLine(0).equalsIgnoreCase("§6[Server]")) {
+                        new ServerManager().connect(event.getPlayer(),sign.getLine(1));
+                    }
+                }
+            }
+        }
+    }
+}
Index: src/main/java/de/framedev/frameapi/listeners/CommandBlocker.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/de/framedev/frameapi/listeners/CommandBlocker.java	(date 1583572153755)
+++ src/main/java/de/framedev/frameapi/listeners/CommandBlocker.java	(date 1583572153755)
@@ -0,0 +1,145 @@
+package de.framedev.frameapi.listeners;
+
+import de.framedev.frameapi.main.Main;
+import org.bukkit.Bukkit;
+import org.bukkit.event.EventHandler;
+import org.bukkit.event.Listener;
+import org.bukkit.event.player.PlayerCommandSendEvent;
+
+import java.util.ArrayList;
+import java.util.List;
+
+/*
+ * =============================================
+ * = This Plugin was Created by FrameDev       =
+ * = Copyrighted by FrameDev                   =
+ * = Please don't Change anything              =
+ * =============================================
+ * This Class was made at 07.03.2020, 10:06
+ */
+public class CommandBlocker implements Listener {
+
+    private final Main plugin;
+
+    public CommandBlocker(Main plugin) {
+        this.plugin = plugin;
+        Bukkit.getPluginManager().registerEvents(this,plugin);
+    }
+
+    @EventHandler
+    public void onTabDisable(PlayerCommandSendEvent e) {
+
+        List<String> blockedCommands = new ArrayList<>();
+
+        if (!e.getPlayer().hasPermission("frameapi.help")) {
+            blockedCommands.add("frameapi:help");
+        }
+        if (!e.getPlayer().hasPermission("frameapi.getitem")) {
+            blockedCommands.add("getitem");
+        }
+        if (!e.getPlayer().hasPermission("frameapi.startbudget")) {
+            blockedCommands.add("frameapi:startbudget");
+        }
+        if (!e.getPlayer().hasPermission("frameapi.teleporter")) {
+            blockedCommands.add("teleporter");
+        }
+
+        if (!e.getPlayer().hasPermission("frameapi.backtp")) {
+            blockedCommands.add("back");
+        }
+        if (!e.getPlayer().hasPermission("frameapi.spawnmob")) {
+            blockedCommands.add("spawnmob");
+        }
+
+        if (!e.getPlayer().hasPermission("frameapi.denied")) {
+            blockedCommands.add("denied");
+        }
+
+        if (!e.getPlayer().hasPermission("frameapi.heal")) {
+            blockedCommands.add("heal");
+        }
+
+        if (!e.getPlayer().hasPermission("frameapi.mysql")) {
+            blockedCommands.add("frameapi:getmysql");
+        }
+
+        if (!e.getPlayer().hasPermission("frameapi.set")) {
+            blockedCommands.add("set");
+        }
+
+        if (!e.getPlayer().hasPermission("frameapi.balance")) {
+            blockedCommands.add("balance");
+            blockedCommands.add("bal");
+        }
+
+        if (!e.getPlayer().hasPermission("frameapi.bankbalance")) {
+            blockedCommands.add("bankbalance");
+        }
+
+        if (!e.getPlayer().hasPermission("frameapi.setbank")) {
+            blockedCommands.add("setbank");
+        }
+
+        if (!e.getPlayer().hasPermission("frameapi.transfer")) {
+            blockedCommands.add("transfer");
+        }
+
+        if (!e.getPlayer().hasPermission("frameapi.withdraw")) {
+            blockedCommands.add("withdraw");
+        }
+
+        if (!e.getPlayer().hasPermission("frameapi.deposit")) {
+            blockedCommands.add("deposit");
+        }
+
+        if (!e.getPlayer().hasPermission("frameapi.warp")) {
+            blockedCommands.add("warp");
+        }
+
+        if (!e.getPlayer().hasPermission("frameapi.setwarp")) {
+            blockedCommands.add("setwarp");
+        }
+
+        if (!e.getPlayer().hasPermission("frameapi.warpremove")) {
+            blockedCommands.add("removewarp");
+        }
+
+        if (!e.getPlayer().hasPermission("frameapi.admin")) {
+            blockedCommands.add("frameapi");
+        }
+
+        if (!e.getPlayer().hasPermission("frameapi.afk")) {
+            blockedCommands.add("afk");
+            blockedCommands.add("aafk");
+            blockedCommands.add("awayfromkeyboard");
+            blockedCommands.add("away");
+        }
+        if (!e.getPlayer().hasPermission("frameapi.fly")) {
+            blockedCommands.add("fly");
+        }
+        if (!e.getPlayer().hasPermission("frameapi.vanish")) {
+            blockedCommands.add("vanish");
+            blockedCommands.add("v");
+        }
+        if (!e.getPlayer().hasPermission("frameapi.item")) {
+            blockedCommands.add("item");
+            blockedCommands.add("i");
+        }
+        if (!e.getPlayer().hasPermission("frameapi.tps")) {
+            blockedCommands.add("tps");
+        }
+        if (!e.getPlayer().hasPermission("frameapi.cleartps")) {
+            blockedCommands.add("cleartps");
+        }
+        if (!e.getPlayer().hasPermission("frameapi.fly")) {
+            blockedCommands.add("fly");
+        }
+        if(!e.getPlayer().hasPermission("frameapi.balancetop")) {
+            blockedCommands.add("balancetop");
+            blockedCommands.add("baltop");
+        }
+        e.getCommands().removeAll(blockedCommands);
+        e.getCommands().removeIf(string -> string.contains(":"));
+    }
+
+}
Index: src/main/java/de/framedev/frameapi/listeners/PlayerKillPlayer.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/de/framedev/frameapi/listeners/PlayerKillPlayer.java	(date 1591734576830)
+++ src/main/java/de/framedev/frameapi/listeners/PlayerKillPlayer.java	(date 1591734576830)
@@ -0,0 +1,35 @@
+package de.framedev.frameapi.listeners;
+
+import de.framedev.frameapi.main.Main;
+import org.bukkit.Bukkit;
+import org.bukkit.OfflinePlayer;
+import org.bukkit.entity.Player;
+import org.bukkit.event.EventHandler;
+import org.bukkit.event.Listener;
+import org.bukkit.event.entity.PlayerDeathEvent;
+import org.bukkit.plugin.Plugin;
+
+public class PlayerKillPlayer implements Listener {
+
+    public PlayerKillPlayer(Main plugin) {
+        this.plugin = plugin;
+        Bukkit.getPluginManager().registerEvents(this, (Plugin) plugin);
+    }
+
+    private Main plugin;
+
+    @EventHandler
+    public void onPlayerKillPlayer(PlayerDeathEvent event) {
+        if ((Main.cfgm.getBoolean("MongoDB.LocalHost") || Main.cfgm.getBoolean("MongoDB.Boolean")) && event.getEntity() instanceof Player) {
+            Player player = event.getEntity();
+            Player killer = player.getKiller();
+            if (killer != null && killer instanceof Player) {
+                this.plugin.getBackendManager().createPlayerStats((OfflinePlayer) killer, "stats");
+                int kills = (Integer) this.plugin.getBackendManager().get((OfflinePlayer) killer, "kills", "stats");
+                kills++;
+                this.plugin.getBackendManager().updateUser((OfflinePlayer) killer, "kills", kills, "stats");
+                killer.sendMessage("§6Es wurde dir ein Kill gutgeschrieben!");
+            }
+        }
+    }
+}
\ No newline at end of file
Index: .idea/discord.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/discord.xml	(date 1591784357987)
+++ .idea/discord.xml	(date 1591784357987)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="DiscordProjectSettings">
+    <option name="show" value="PROJECT_FILES" />
+  </component>
+</project>
\ No newline at end of file
Index: src/main/java/de/framedev/frameapi/listeners/SleepListener.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/de/framedev/frameapi/listeners/SleepListener.java	(date 1590066633310)
+++ src/main/java/de/framedev/frameapi/listeners/SleepListener.java	(date 1590066633310)
@@ -0,0 +1,32 @@
+package de.framedev.frameapi.listeners;
+
+import de.framedev.frameapi.main.Main;
+import org.bukkit.event.EventHandler;
+import org.bukkit.event.Listener;
+import org.bukkit.event.player.PlayerBedEnterEvent;
+import org.bukkit.scheduler.BukkitRunnable;
+
+/*
+ * =============================================
+ * = This Plugin was Created by FrameDev       =
+ * = Copyrighted by FrameDev                   =
+ * = Please don't Change anything              =
+ * =============================================
+ * This Class was made at 06.03.2020, 17:45
+ */
+public class SleepListener implements Listener {
+
+    @EventHandler
+    public void onSleep(PlayerBedEnterEvent event) {
+        if(Main.getInstance().getConfig().getBoolean("SkipNight")) {
+            if (event.getPlayer().getWorld().getTime() >= 12541) {
+                new BukkitRunnable() {
+                    @Override
+                    public void run() {
+                        event.getPlayer().getWorld().setTime(50);
+                    }
+                }.runTaskLater(Main.getInstance(), 240);
+            }
+        }
+    }
+}
Index: src/main/java/de/framedev/frameapi/listeners/money/GetMoneyInTime.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/de/framedev/frameapi/listeners/money/GetMoneyInTime.java	(date 1590188372601)
+++ src/main/java/de/framedev/frameapi/listeners/money/GetMoneyInTime.java	(date 1590188372601)
@@ -0,0 +1,110 @@
+package de.framedev.frameapi.listeners.money;
+
+import de.framedev.frameapi.api.API;
+import de.framedev.frameapi.api.money.Money;
+import de.framedev.frameapi.interfaces.Constructors;
+import de.framedev.frameapi.main.Main;
+import org.bukkit.Bukkit;
+import org.bukkit.OfflinePlayer;
+import org.bukkit.Sound;
+import org.bukkit.plugin.Plugin;
+import org.bukkit.scheduler.BukkitRunnable;
+
+
+public class GetMoneyInTime implements Constructors {
+    private Main plugin;
+
+    public GetMoneyInTime(Main plugin) {
+        this.plugin = plugin;
+    }
+
+
+    public void getMoneyinTime() {
+        final double money = this.plugin.getConfig().getDouble("Money.Amount");
+        if (this.plugin.getConfig().getBoolean("Money.Boolean")) {
+            int time = this.plugin.getConfig().getInt("Money.Time");
+            new BukkitRunnable() {
+                public void run() {
+
+                    Bukkit.getOnlinePlayers().forEach(current -> {
+
+                        if (API.CreateConfig.getConfig().getBoolean("Payload.Boolean")) {
+
+                            try {
+                                String message = API.CreateConfig.getConfig().getString("Payload.Text");
+                                message = message.replace("[Money]", String.valueOf(money));
+                                message = message.replace('&', '§');
+                                current.sendMessage(message);
+                                eco.addMoney(current, money);
+                                current.playSound(current.getLocation(), Sound.ENTITY_EXPERIENCE_ORB_PICKUP, 1.0F, 1.0F);
+                            } catch (NullPointerException e) {
+                                if (current.isOp()) {
+                                    current.sendMessage("§cThere was a mistake in forgiving his money");
+                                }
+                                e.printStackTrace();
+                            }
+                        } else {
+                            eco.addMoney(current, money);
+                        }
+
+                    });
+                }
+            }.runTaskTimer(this.plugin, 0L, (time * 20));
+        }
+    }
+
+
+    public void getOfflinePlayerMoney() {
+        final double money = this.plugin.getConfig().getDouble("OfflinePlayers.Money.Amount");
+        if (this.plugin.getConfig().getBoolean("OfflinePlayers.Money.Boolean")) {
+            int time = this.plugin.getConfig().getInt("OfflinePlayers.Money.Time");
+            try {
+                new BukkitRunnable() {
+                    public void run() {
+                        if (GetMoneyInTime.this.plugin.getConfig().getBoolean("MYSQL.Boolean")) {
+                            for (OfflinePlayer player : Main.getInstance().getPlayers()) {
+                                if (!player.isOnline()) {
+                                    if (API.CreateConfig.getConfig().getBoolean("Payload.Boolean")) {
+                                        try {
+                                            String message = API.CreateConfig.getConfig().getString("Payload.Text");
+                                            message = message.replace("[Money]", String.valueOf(money));
+                                            message = message.replace('&', '§');
+                                            GetMoneyInTime.this.eco.addMoney(player, money);
+                                        } catch (NullPointerException e) {
+                                            if (player.isOp()) ;
+                                        }
+                                        continue;
+                                    }
+                                    GetMoneyInTime.this.eco.addMoney(player, money);
+                                }
+
+                            }
+                        } else if (Main.cfgm.getBoolean("MongoDB.LocalHost") || Main.cfgm.getBoolean("MongoDB.Boolean")) {
+                            for (OfflinePlayer player : GetMoneyInTime.this.plugin.getBackendManager().getOfflinePlayers("money")) {
+                                if (!player.isOnline()) {
+                                    if (API.CreateConfig.getConfig().getBoolean("Payload.Boolean")) {
+                                        try {
+                                            String message = API.CreateConfig.getConfig().getString("Payload.Text");
+                                            message = message.replace("[Money]", String.valueOf(money));
+                                            message = message.replace('&', '§');
+                                            GetMoneyInTime.this.eco.addMoney(player, money);
+                                        } catch (NullPointerException e) {
+                                            if (player.isOp()) ;
+                                        }
+                                        continue;
+                                    }
+                                    GetMoneyInTime.this.eco.addMoney(player, money);
+                                }
+
+                            }
+                        }
+                    }
+                }.runTaskTimer(this.plugin, 0L, (time * 20));
+            } catch (NullPointerException e) {
+                Bukkit.getConsoleSender().sendMessage("§cNo Offline Players");
+            }
+        }
+    }
+}
+
+
Index: src/main/java/de/framedev/frameapi/listeners/money/MoneyBankSigns.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/de/framedev/frameapi/listeners/money/MoneyBankSigns.java	(date 1583416258668)
+++ src/main/java/de/framedev/frameapi/listeners/money/MoneyBankSigns.java	(date 1583416258668)
@@ -0,0 +1,178 @@
+ package de.framedev.frameapi.listeners.money;
+ 
+ import de.framedev.frameapi.api.money.Money;
+ import de.framedev.frameapi.main.Main;
+ import org.bukkit.Bukkit;
+ import org.bukkit.OfflinePlayer;
+ import org.bukkit.block.Sign;
+ import org.bukkit.event.EventHandler;
+ import org.bukkit.event.Listener;
+ import org.bukkit.event.block.Action;
+ import org.bukkit.event.block.SignChangeEvent;
+ import org.bukkit.event.player.PlayerInteractEvent;
+ import org.bukkit.inventory.EquipmentSlot;
+ import org.bukkit.plugin.Plugin;
+ 
+ 
+ 
+ 
+ 
+ public class MoneyBankSigns
+   implements Listener
+ {
+   private static Money eco = new Money();
+   private final Main plugin;
+   
+   public MoneyBankSigns(Main plugin) {
+     this.plugin = plugin;
+     Bukkit.getPluginManager().registerEvents(this, (Plugin)plugin);
+   }
+   
+   @EventHandler
+   public void onclickSignBalance(SignChangeEvent e) {
+     if (e.getLine(0).equalsIgnoreCase("[balancebank]")) {
+       if (e.getPlayer().hasPermission("frameapi.signs.create")) {
+         e.setLine(0, "§bBalanceBank");
+       } else {
+         e.getPlayer().sendMessage(Main.FrameMainGet.getPrefix() + " " + Main.FrameMainGet.getNoPerm());
+       } 
+     }
+   }
+   
+   @EventHandler
+   public void onClickBalance(PlayerInteractEvent e) {
+     if (e.getAction() == Action.RIGHT_CLICK_BLOCK) {
+       if (e.getHand() == EquipmentSlot.OFF_HAND) {
+         return;
+       }
+       if (e.getHand().equals(EquipmentSlot.HAND) && 
+         e.getClickedBlock().getState() instanceof Sign) {
+         Sign s = (Sign)e.getClickedBlock().getState();
+         if (s.getLine(0).equalsIgnoreCase("§bBalanceBank")) {
+           if (e.getPlayer().hasPermission("frameapi.signs.use")) {
+             if (Main.getInstance().getConfig().getString("language").equalsIgnoreCase("en_EN")) {
+               e.getPlayer().sendMessage("§aYou have §b" + eco.getMoneyFromBankMySQL((OfflinePlayer)e.getPlayer()) + " §aon your Bank Account");
+             } else if (Main.getInstance().getConfig().getString("language").equalsIgnoreCase("de_DE")) {
+               e.getPlayer().sendMessage("§aDu hast auf deinem Bank Account §b" + eco.getMoneyFromBankMySQL((OfflinePlayer)e.getPlayer()));
+             } 
+           } else {
+             e.getPlayer().sendMessage(Main.FrameMainGet.getPrefix() + " " + Main.FrameMainGet.getNoPerm());
+           } 
+         }
+       } 
+     } 
+   }
+ 
+   
+   @EventHandler
+   public void signChange(SignChangeEvent e) {
+     String signName = Main.getInstance().getConfig().getString("MoneySign.Buy");
+     signName = signName.replace('&', '§');
+     if (e.getLine(0).equalsIgnoreCase("deposit")) {
+       if (e.getPlayer().hasPermission("frameapi.signs.create")) {
+         String[] args = e.getLines();
+         int money = Integer.parseInt(args[1]);
+         if (e.getLine(1).equalsIgnoreCase(money + "")) {
+           e.setLine(0, "§aDeposit");
+           e.setLine(1, money + "");
+         } 
+       } else {
+         e.getPlayer().sendMessage(Main.FrameMainGet.getPrefix() + " " + Main.FrameMainGet.getNoPerm());
+       } 
+     }
+   }
+   
+   @EventHandler
+   public void onInteract(PlayerInteractEvent e) {
+     if (e.getAction() == Action.RIGHT_CLICK_BLOCK) {
+       if (e.getHand() == EquipmentSlot.OFF_HAND) {
+         return;
+       }
+       if (e.getHand().equals(EquipmentSlot.HAND) && 
+         e.getClickedBlock().getState() instanceof Sign) {
+         Sign s = (Sign)e.getClickedBlock().getState();
+         if (s.getLine(0).equalsIgnoreCase("§aDeposit")) {
+           if (e.getPlayer().hasPermission("frameapi.signs.use")) {
+             String[] args = s.getLines();
+             int money = Integer.parseInt(args[1]);
+             if (s.getLine(1).equalsIgnoreCase(money + "")) {
+               if (eco.getMoney((OfflinePlayer)e.getPlayer()).doubleValue() < money) {
+                 if (Main.getInstance().getConfig().getString("language").equalsIgnoreCase("en_EN")) {
+                   e.getPlayer().sendMessage("§cNot enought Money");
+                 } else if (Main.getInstance().getConfig().getString("language").equalsIgnoreCase("de_DE")) {
+                   e.getPlayer().sendMessage("§cNicht genug Geld");
+                 } 
+               } else {
+                 eco.removeMoney(e.getPlayer(), money);
+                 eco.AddMoneyFromBank((OfflinePlayer)e.getPlayer(), money);
+                 if (Main.getInstance().getConfig().getString("language").equalsIgnoreCase("en_EN")) {
+                   e.getPlayer().sendMessage("§aYou have been successfuly added §b" + money + " §ato your Bank Account");
+                 } else if (Main.getInstance().getConfig().getString("language").equalsIgnoreCase("de_DE")) {
+                   e.getPlayer().sendMessage("§aDu hast erfolgreich §b" + money + " §aauf dein Bank Account §bertragen!");
+                 } 
+               } 
+             }
+           } else {
+             e.getPlayer().sendMessage(Main.FrameMainGet.getPrefix() + " " + Main.FrameMainGet.getNoPerm());
+           } 
+         }
+       } 
+     } 
+   }
+ 
+   
+   @EventHandler
+   public void signChangeSell(SignChangeEvent e) {
+     if (e.getLine(0).equalsIgnoreCase("Withdraw")) {
+       if (e.getPlayer().hasPermission("frameapi.signs.create")) {
+         String[] args = e.getLines();
+         int money = Integer.parseInt(args[1]);
+         if (e.getLine(1).equalsIgnoreCase(money + "")) {
+           e.setLine(0, "§aWithdraw");
+           e.setLine(1, money + "");
+         } 
+       } else {
+         e.getPlayer().sendMessage(Main.FrameMainGet.getPrefix() + " " + Main.FrameMainGet.getNoPerm());
+       } 
+     }
+   }
+   
+   @EventHandler
+   public void onInteractSell(PlayerInteractEvent e) {
+     if (e.getAction() == Action.RIGHT_CLICK_BLOCK) {
+       if (e.getHand() == EquipmentSlot.OFF_HAND) {
+         return;
+       }
+       if (e.getHand().equals(EquipmentSlot.HAND) && 
+         e.getClickedBlock().getState() instanceof Sign) {
+         Sign s = (Sign)e.getClickedBlock().getState();
+         if (s.getLine(0).equalsIgnoreCase("§aWithdraw"))
+           if (e.getPlayer().hasPermission("frameapi.signs.use")) {
+             String[] args = s.getLines();
+             int money = Integer.parseInt(args[1]);
+             if (s.getLine(1).equalsIgnoreCase(money + "")) {
+               if (eco.getMoneyFromBankMySQL((OfflinePlayer)e.getPlayer()).doubleValue() < money) {
+                 if (Main.getInstance().getConfig().getString("language").equalsIgnoreCase("en_EN")) {
+                   e.getPlayer().sendMessage("§cNot enought Money in your Bank!");
+                 } else if (Main.getInstance().getConfig().getString("language").equalsIgnoreCase("de_DE")) {
+                   e.getPlayer().sendMessage("§cNicht genug Geld auf deinem Bank Account!");
+                 } 
+               } else {
+                 eco.addMoney((OfflinePlayer)e.getPlayer(), money);
+                 eco.RemoveMoneyFromBank((OfflinePlayer)e.getPlayer(), money);
+                 if (Main.getInstance().getConfig().getString("language").equalsIgnoreCase("en_EN")) {
+                   e.getPlayer().sendMessage("§aYou have been successfuly Removed §b" + money + " §afrom your Bank Account");
+                 } else if (Main.getInstance().getConfig().getString("language").equalsIgnoreCase("de_DE")) {
+                   e.getPlayer().sendMessage("§aDu hast erfolgreich §b" + money + " §avon deinem Bank Account abgehoben");
+                 } 
+               } 
+             }
+           } else {
+             e.getPlayer().sendMessage(Main.FrameMainGet.getPrefix() + " " + Main.FrameMainGet.getNoPerm());
+           }  
+       } 
+     } 
+   }
+ }
+
+
Index: src/main/java/de/framedev/frameapi/listeners/energy/CapacitorListener.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/de/framedev/frameapi/listeners/energy/CapacitorListener.java	(date 1590188194760)
+++ src/main/java/de/framedev/frameapi/listeners/energy/CapacitorListener.java	(date 1590188194760)
@@ -0,0 +1,405 @@
+package de.framedev.frameapi.listeners.energy;
+
+import de.framedev.frameapi.api.energy.Energy;
+import de.framedev.frameapi.interfaces.EnergyListenerInterface;
+import de.framedev.frameapi.main.Main;
+import de.framedev.frameapi.managers.InventoryManager;
+import de.framedev.frameapi.managers.ItemBuilder;
+import org.bukkit.*;
+import org.bukkit.block.Block;
+import org.bukkit.configuration.file.FileConfiguration;
+import org.bukkit.configuration.file.YamlConfiguration;
+import org.bukkit.entity.Player;
+import org.bukkit.event.EventHandler;
+import org.bukkit.event.Listener;
+import org.bukkit.event.block.Action;
+import org.bukkit.event.block.BlockBreakEvent;
+import org.bukkit.event.block.BlockPlaceEvent;
+import org.bukkit.event.inventory.InventoryClickEvent;
+import org.bukkit.event.player.PlayerInteractEvent;
+import org.bukkit.inventory.ItemStack;
+import org.bukkit.plugin.Plugin;
+import org.bukkit.scheduler.BukkitRunnable;
+
+import java.io.File;
+import java.io.IOException;
+import java.util.ArrayList;
+import java.util.UUID;
+
+public class CapacitorListener
+        implements Listener, EnergyListenerInterface {
+    public ArrayList<BukkitRunnable> runtime = new ArrayList<>();
+    public ArrayList<UUID> playeruuid = new ArrayList<>();
+    File file = new File("plugins/FrameAPI/Pistons.yml");
+    FileConfiguration cfg = (FileConfiguration) YamlConfiguration.loadConfiguration(this.file);
+
+    @EventHandler
+    public void getCapacator(PlayerInteractEvent event) {
+        if (event.getAction() == Action.RIGHT_CLICK_BLOCK &&
+                event.getClickedBlock().getType() == Material.CAULDRON) {
+            event.setCancelled(true);
+            InventoryManager manager = new InventoryManager();
+            manager.setName("§aEnergy");
+            manager.setSize(3);
+            manager.build();
+            manager.setItem((new ItemBuilder(Material.NETHER_STAR)).setDisplayName("§aYour Energy").setLore(new String[]{"§aEnergy = " + (new Energy()).getEnergy((OfflinePlayer) event.getPlayer())}).build(), 10);
+            manager.setItem((new ItemBuilder(Material.BLUE_CONCRETE)).setDisplayName("§b§lVerkaufen").build(), 12);
+            manager.FillNull();
+            manager.showInv(event.getPlayer());
+        }
+    }
+
+
+    @EventHandler
+    public void onClickEnergy(final InventoryClickEvent event) {
+        if (event.getInventory() != null &&
+                event.getView().getTitle().equalsIgnoreCase("§aEnergy") &&
+                event.getCurrentItem() != null &&
+                event.getCurrentItem().hasItemMeta()) {
+            if (event.getCurrentItem().getType() == Material.NETHER_STAR && event.getCurrentItem().getItemMeta().getDisplayName().equalsIgnoreCase("§aYour Energy")) {
+                event.setCancelled(true);
+            } else if (event.getCurrentItem().getItemMeta().getDisplayName().equalsIgnoreCase("§b§lVerkaufen")) {
+                event.setCancelled(true);
+                final InventoryManager verkaufen = new InventoryManager();
+                verkaufen.setName("§b§lVerkaufen Lege ein Item in den Mittleren Slot");
+                verkaufen.setSize(1);
+                verkaufen.build();
+                verkaufen.showInv((Player) event.getWhoClicked());
+                (new BukkitRunnable() {
+                    public void run() {
+                        for (int i = 0; i < verkaufen.getInventory().getSize(); i++) {
+                            if (verkaufen.getInventory().getItem(i) != null) {
+                                int durability = 100;
+                                (new Energy()).addEnergy((OfflinePlayer) event.getWhoClicked(), durability);
+                                int amount = durability;
+                                verkaufen.setItem(new ItemStack(Material.AIR), i);
+                                verkaufen.setName("§a§lErfolgreich Verkauft fuer §c§l" + amount + " §a§lEnergy!");
+                                verkaufen.build();
+                                verkaufen.showInv((Player) event.getWhoClicked());
+                                (new BukkitRunnable() {
+                                    public void run() {
+                                        event.getWhoClicked().closeInventory();
+                                        cancel();
+                                    }
+                                }).runTaskLater((Plugin) Main.getInstance(), 40L);
+                            }
+                        }
+                    }
+                }).runTaskTimer((Plugin) Main.getInstance(), 0L, 20L);
+            } else {
+                event.setCancelled(true);
+            }
+        }
+    }
+
+
+    public void run(Player player, Block block) {
+        if (block.getType() == Material.PISTON) {
+            int amount = 1000;
+            if ((new Energy()).getEnergy((OfflinePlayer) player) >= amount) {
+                if (this.playeruuid.contains(player.getUniqueId())) {
+                    player.sendMessage("§cCapacität Voll!");
+                    this.playeruuid.remove(player.getUniqueId());
+
+                    return;
+                }
+            } else if (!this.playeruuid.contains(player.getUniqueId())) {
+                this.playeruuid.add(player.getUniqueId());
+                if (block.getBlockPower() == 15) {
+                    (new Energy()).addEnergy((OfflinePlayer) player, 15);
+                } else if (block.getBlockPower() < 15) {
+                    (new Energy()).addEnergy((OfflinePlayer) player, 5);
+                }
+
+            } else if (block.getBlockPower() == 15) {
+                (new Energy()).addEnergy((OfflinePlayer) player, 15);
+            } else if (block.getBlockPower() < 15) {
+                (new Energy()).addEnergy((OfflinePlayer) player, 5);
+
+            }
+
+        } else if (block.getType() == Material.STICKY_PISTON) {
+            int amount = 2500;
+            if ((new Energy()).getEnergy((OfflinePlayer) player) >= amount) {
+                player.sendMessage("§cCapacität Voll!");
+                this.playeruuid.remove(player.getUniqueId());
+                return;
+            }
+            if (block.getBlockPower() == 15) {
+                (new Energy()).addEnergy((OfflinePlayer) player, 25);
+            } else if (block.getBlockPower() < 15) {
+                (new Energy()).addEnergy((OfflinePlayer) player, 10);
+            }
+        }
+    }
+
+
+    public void runOnBeacon(Player player, Block block) {
+        Location block1 = new Location(player.getWorld(), block.getX(), block.getY(), (block.getZ() + 1));
+        Location block2 = new Location(player.getWorld(), block.getX(), block.getY(), (block.getZ() - 1));
+        Location block3 = new Location(player.getWorld(), (block.getX() + 1), block.getY(), block.getZ());
+        Location block4 = new Location(player.getWorld(), (block.getX() - 1), block.getY(), block.getZ());
+        if (block1.getBlock().getType() == Material.OBSIDIAN && block2.getBlock().getType() == Material.OBSIDIAN && block3
+                .getBlock().getType() == Material.OBSIDIAN && block4.getBlock().getType() == Material.OBSIDIAN &&
+                block.getType() == Material.BEACON) {
+            int amount = 100000;
+            if ((new Energy()).getEnergy((OfflinePlayer) player) >= amount) {
+                if (this.playeruuid.contains(player.getUniqueId())) {
+                    player.sendMessage("§cCapacität Voll!");
+                    this.playeruuid.remove(player.getUniqueId());
+
+                    return;
+                }
+            } else if (this.playeruuid.contains(player.getUniqueId())) {
+                (new Energy()).addEnergy((OfflinePlayer) player, 100);
+            } else {
+                (new Energy()).addEnergy((OfflinePlayer) player, 100);
+                this.playeruuid.add(player.getUniqueId());
+            }
+        }
+    }
+
+
+    public void updateWorld(final World world, final Player player) {
+        (new BukkitRunnable() {
+            public void run() {
+                if (!CapacitorListener.this.runtime.contains(this)) {
+                    CapacitorListener.this.runtime.add(this);
+                }
+                if (CapacitorListener.this.playeruuid.contains(player.getUniqueId())) {
+
+
+                    Location loc4 = new Location(world, CapacitorListener.this.cfg.getInt("Piston." + player.getName() + ".x"), CapacitorListener.this.cfg.getInt("Piston." + player.getName() + ".y"), CapacitorListener.this.cfg.getInt("Piston." + player.getName() + ".z"));
+                    if (world.getBlockAt(loc4).getType() == Material.PISTON) {
+                        CapacitorListener.this.run(player, world.getBlockAt(loc4));
+                    }
+
+
+                    try {
+                        Location loc = new Location(world, CapacitorListener.this.cfg.getInt("Beacon." + player.getName() + ".x"), CapacitorListener.this.cfg.getInt("Beacon." + player.getName() + ".y"), CapacitorListener.this.cfg.getInt("Beacon." + player.getName() + ".z"));
+                        Block block = loc.getBlock();
+                        Location block1 = new Location(player.getWorld(), block.getX(), block.getY(), (block.getZ() + 1));
+                        Location block2 = new Location(player.getWorld(), block.getX(), block.getY(), (block.getZ() - 1));
+                        Location block3 = new Location(player.getWorld(), (block.getX() + 1), block.getY(), block.getZ());
+                        Location block4 = new Location(player.getWorld(), (block.getX() - 1), block.getY(), block.getZ());
+
+
+                        CapacitorListener.this.runOnBeacon(player, world.getBlockAt(loc));
+                        if (block1.getBlock().getType() != Material.OBSIDIAN || block2.getBlock().getType() != Material.OBSIDIAN || block3.getBlock().getType() != Material.OBSIDIAN || block4.getBlock().getType() != Material.OBSIDIAN || block.getType() != Material.BEACON || (new Energy()).getEnergy((OfflinePlayer) player) >= 10000)
+                            ;
+
+
+                    } catch (NullPointerException nullPointerException) {
+                    }
+
+
+                    try {
+                        Location loc = new Location(world, CapacitorListener.this.cfg.getInt("Piston." + player.getName() + ".x"), CapacitorListener.this.cfg.getInt("Piston." + player.getName() + ".y"), CapacitorListener.this.cfg.getInt("Piston." + player.getName() + ".z"));
+
+                        CapacitorListener.this.run(player, world.getBlockAt(loc));
+                        if (world.getBlockAt(loc).getType() != Material.PISTON || (new Energy()).getEnergy((OfflinePlayer) player) >= 500)
+                            ;
+
+
+                    } catch (NullPointerException nullPointerException) {
+                    }
+
+
+                    try {
+                        Location loc = new Location(world, CapacitorListener.this.cfg.getInt("Glass." + player.getName() + ".x"), CapacitorListener.this.cfg.getInt("Glass." + player.getName() + ".y"), CapacitorListener.this.cfg.getInt("Glass." + player.getName() + ".z"));
+                        Block block = loc.getBlock();
+                        Location block1 = new Location(player.getWorld(), block.getX(), block.getY(), (block.getZ() + 1));
+                        Location block2 = new Location(player.getWorld(), block.getX(), block.getY(), (block.getZ() - 1));
+                        Location block3 = new Location(player.getWorld(), (block.getX() + 1), block.getY(), block.getZ());
+                        Location block4 = new Location(player.getWorld(), (block.getX() - 1), block.getY(), block.getZ());
+
+
+                        CapacitorListener.this.runOnSolar(player, world.getBlockAt(loc));
+                        if (block1.getBlock().getType() != Material.OBSIDIAN || block2.getBlock().getType() != Material.OBSIDIAN || block3.getBlock().getType() != Material.OBSIDIAN || block4.getBlock().getType() != Material.OBSIDIAN || block.getType() != Material.GLASS || (new Energy()).getEnergy((OfflinePlayer) player) >= 10000)
+                            ;
+
+
+                    } catch (NullPointerException nullPointerException) {
+                    }
+                } else {
+
+                    CapacitorListener.this.playeruuid.add(player.getUniqueId());
+                }
+            }
+        }).runTaskTimer((Plugin) Main.getInstance(), 0L, 200L);
+    }
+
+    private int getInt(Player player) {
+        return player.getEntityId();
+    }
+
+    public void runOnSolar(Player player, Block block) {
+        Location block1 = new Location(player.getWorld(), block.getX(), block.getY(), (block.getZ() + 1));
+        Location block2 = new Location(player.getWorld(), block.getX(), block.getY(), (block.getZ() - 1));
+        Location block3 = new Location(player.getWorld(), (block.getX() + 1), block.getY(), block.getZ());
+        Location block4 = new Location(player.getWorld(), (block.getX() - 1), block.getY(), block.getZ());
+        if (block1.getBlock().getType() == Material.OBSIDIAN && block2.getBlock().getType() == Material.OBSIDIAN && block3
+                .getBlock().getType() == Material.OBSIDIAN && block4.getBlock().getType() == Material.OBSIDIAN &&
+                block.getType() == Material.GLASS) {
+            int amount = 2000000;
+            if ((new Energy()).getEnergy((OfflinePlayer) player) >= amount) {
+                if (this.playeruuid.contains(player.getUniqueId())) {
+                    player.sendMessage("§cCapacität Voll!");
+                    this.playeruuid.remove(player.getUniqueId());
+
+                    return;
+                }
+            } else if (this.playeruuid.contains(player.getUniqueId())) {
+                (new Energy()).addEnergy((OfflinePlayer) player, 5);
+            } else {
+                (new Energy()).addEnergy((OfflinePlayer) player, 5);
+                this.playeruuid.add(player.getUniqueId());
+            }
+        }
+    }
+
+
+    public void saveCfg() {
+        try {
+            this.cfg.save(this.file);
+        } catch (IOException e) {
+            e.printStackTrace();
+        }
+    }
+
+    @EventHandler
+    public void blockUpdate(final BlockPlaceEvent event) {
+        if (event.getBlock().getType() == Material.BEACON) {
+            Player player = event.getPlayer();
+            Block block = event.getBlock();
+            Location block1 = new Location(player.getWorld(), block.getX(), block.getY(), (block.getZ() + 1));
+            Location block2 = new Location(player.getWorld(), block.getX(), block.getY(), (block.getZ() - 1));
+            Location block3 = new Location(player.getWorld(), (block.getX() + 1), block.getY(), block.getZ());
+            Location block4 = new Location(player.getWorld(), (block.getX() - 1), block.getY(), block.getZ());
+            if (block1.getBlock().getType() == Material.OBSIDIAN && block2.getBlock().getType() == Material.OBSIDIAN && block3
+                    .getBlock().getType() == Material.OBSIDIAN && block4.getBlock().getType() == Material.OBSIDIAN &&
+                    block.getType() == Material.BEACON) {
+                if (!this.cfg.getBoolean("Beacon." + event.getPlayer().getName() + ".boolean")) {
+                    this.cfg.set("Beacon." + event.getPlayer().getName() + ".x", Integer.valueOf(event.getBlock().getX()));
+                    this.cfg.set("Beacon." + event.getPlayer().getName() + ".y", Integer.valueOf(event.getBlock().getY()));
+                    this.cfg.set("Beacon." + event.getPlayer().getName() + ".z", Integer.valueOf(event.getBlock().getZ()));
+                    this.cfg.set("Beacon." + event.getPlayer().getName() + ".boolean", Boolean.valueOf(true));
+
+                    saveCfg();
+                    (new BukkitRunnable() {
+                        public void run() {
+                            CapacitorListener.this.runtime.add(this);
+                            if (event.getPlayer().isOnline()) {
+                                CapacitorListener.this.updateWorld(event.getPlayer().getWorld(), event.getPlayer());
+                            }
+                        }
+                    }).runTaskLater((Plugin) Main.getInstance(), 120L);
+                    event.getPlayer().sendMessage("§aCapacitor Beacon Aktiviert!");
+                } else {
+                    event.getPlayer().sendMessage("§a[§6Energy§a] §fNur eine Speicher Kapazität dieser grösse kann verwendet werden!");
+                }
+            }
+        }
+
+        if (event.getBlock().getType() == Material.GLASS) {
+            Player player = event.getPlayer();
+            Block block = event.getBlock();
+            Location block1 = new Location(player.getWorld(), block.getX(), block.getY(), (block.getZ() + 1));
+            Location block2 = new Location(player.getWorld(), block.getX(), block.getY(), (block.getZ() - 1));
+            Location block3 = new Location(player.getWorld(), (block.getX() + 1), block.getY(), block.getZ());
+            Location block4 = new Location(player.getWorld(), (block.getX() - 1), block.getY(), block.getZ());
+            if (block1.getBlock().getType() == Material.OBSIDIAN && block2.getBlock().getType() == Material.OBSIDIAN && block3
+                    .getBlock().getType() == Material.OBSIDIAN && block4.getBlock().getType() == Material.OBSIDIAN &&
+                    block.getType() == Material.GLASS) {
+                if (!this.cfg.getBoolean("Glass." + event.getPlayer().getName() + ".boolean")) {
+                    this.cfg.set("Glass." + event.getPlayer().getName() + ".x", Integer.valueOf(event.getBlock().getX()));
+                    this.cfg.set("Glass." + event.getPlayer().getName() + ".y", Integer.valueOf(event.getBlock().getY()));
+                    this.cfg.set("Glass." + event.getPlayer().getName() + ".z", Integer.valueOf(event.getBlock().getZ()));
+                    this.cfg.set("Glass." + event.getPlayer().getName() + ".boolean", Boolean.valueOf(true));
+
+                    saveCfg();
+                    (new BukkitRunnable() {
+                        public void run() {
+                            CapacitorListener.this.runtime.add(this);
+                            if (event.getPlayer().isOnline()) {
+                                CapacitorListener.this.updateWorld(event.getPlayer().getWorld(), event.getPlayer());
+                            }
+                        }
+                    }).runTaskLater((Plugin) Main.getInstance(), 120L);
+                    event.getPlayer().sendMessage("§aCapacitor Solar Aktiviert!");
+                } else {
+                    event.getPlayer().sendMessage("§a[§6Energy§a] §fNur eine Speicher Kapazität dieser grösse kann verwendet werden!");
+                }
+            }
+        }
+
+        if (event.getBlock().getType() == Material.PISTON &&
+                !this.cfg.getBoolean("Piston." + event.getPlayer().getName() + ".boolean")) {
+            this.cfg.set("Piston." + event.getPlayer().getName() + ".x", Integer.valueOf(event.getBlock().getX()));
+            this.cfg.set("Piston." + event.getPlayer().getName() + ".y", Integer.valueOf(event.getBlock().getY()));
+            this.cfg.set("Piston." + event.getPlayer().getName() + ".z", Integer.valueOf(event.getBlock().getZ()));
+            this.cfg.set("Piston." + event.getPlayer().getName() + ".boolean", Boolean.valueOf(true));
+            saveCfg();
+            if (!this.file.exists()) {
+                try {
+                    this.file.mkdir();
+                } catch (Exception e) {
+                    Bukkit.getConsoleSender().sendMessage("§cAn Issue while Create File §f" + e.getMessage());
+                }
+            }
+            (new BukkitRunnable() {
+                public void run() {
+                    CapacitorListener.this.runtime.add(this);
+                    if (event.getPlayer().isOnline()) {
+                        CapacitorListener.this.updateWorld(event.getPlayer().getWorld(), event.getPlayer());
+                    }
+                }
+            }).runTaskLater((Plugin) Main.getInstance(), 120L);
+            event.getPlayer().sendMessage("§aCapacitor Piston Aktiviert!");
+        }
+    }
+
+
+    @EventHandler
+    public void onBlockBreak(BlockBreakEvent event) {
+        if (event.getBlock().getType() == Material.PISTON) {
+
+
+            Location loc = new Location(event.getPlayer().getWorld(), this.cfg.getInt("Piston." + event.getPlayer().getName() + ".x"), this.cfg.getInt("Piston." + event.getPlayer().getName() + ".y"), this.cfg.getInt("Piston." + event.getPlayer().getName() + ".z"));
+            if (event.getBlock().getLocation().equals(loc)) {
+                this.cfg.set("Piston." + event.getPlayer().getName() + ".boolean", Boolean.valueOf(false));
+                saveCfg();
+                event.getPlayer().sendMessage("§aCapacitor Piston entfernt!");
+            }
+        } else if (event.getBlock().getType() == Material.BEACON) {
+
+
+            Location loc1 = new Location(event.getPlayer().getWorld(), this.cfg.getInt("Beacon." + event.getPlayer().getName() + ".x"), this.cfg.getInt("Beacon." + event.getPlayer().getName() + ".y"), this.cfg.getInt("Beacon." + event.getPlayer().getName() + ".z"));
+            if (event.getBlock().getLocation().equals(loc1)) {
+                this.cfg.set("Beacon." + event.getPlayer().getName() + ".boolean", Boolean.valueOf(false));
+                saveCfg();
+                event.getPlayer().sendMessage("§aCapacitor Beacon entfernt!");
+            }
+        } else if (event.getBlock().getType() == Material.GLASS) {
+            Player player = event.getPlayer();
+            Block block = event.getBlock();
+            Location block1 = new Location(player.getWorld(), block.getX(), block.getY(), (block.getZ() + 1));
+            Location block2 = new Location(player.getWorld(), block.getX(), block.getY(), (block.getZ() - 1));
+            Location block3 = new Location(player.getWorld(), (block.getX() + 1), block.getY(), block.getZ());
+            Location block4 = new Location(player.getWorld(), (block.getX() - 1), block.getY(), block.getZ());
+            if (block1.getBlock().getType() == Material.OBSIDIAN && block2.getBlock().getType() == Material.OBSIDIAN && block3
+                    .getBlock().getType() == Material.OBSIDIAN && block4.getBlock().getType() == Material.OBSIDIAN) {
+
+
+                Location loc1 = new Location(event.getPlayer().getWorld(), this.cfg.getInt("Glass." + event.getPlayer().getName() + ".x"), this.cfg.getInt("Glass." + event.getPlayer().getName() + ".y"), this.cfg.getInt("Glass." + event.getPlayer().getName() + ".z"));
+                if (event.getBlock().getLocation().equals(loc1)) {
+                    this.cfg.set("Glass." + event.getPlayer().getName() + ".boolean", Boolean.valueOf(false));
+                    saveCfg();
+                    event.getPlayer().sendMessage("§aCapacitor Solar entfernt!");
+                }
+            }
+        }
+    }
+}
+
+
Index: src/main/java/de/framedev/frameapi/listeners/money/MoneySigns.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/de/framedev/frameapi/listeners/money/MoneySigns.java	(date 1583416258552)
+++ src/main/java/de/framedev/frameapi/listeners/money/MoneySigns.java	(date 1583416258552)
@@ -0,0 +1,265 @@
+ package de.framedev.frameapi.listeners.money;
+ 
+ import de.framedev.frameapi.api.money.Money;
+ import de.framedev.frameapi.main.Main;
+ import org.bukkit.Bukkit;
+ import org.bukkit.Material;
+ import org.bukkit.OfflinePlayer;
+ import org.bukkit.block.Sign;
+ import org.bukkit.event.EventHandler;
+ import org.bukkit.event.Listener;
+ import org.bukkit.event.block.Action;
+ import org.bukkit.event.block.SignChangeEvent;
+ import org.bukkit.event.player.PlayerInteractEvent;
+ import org.bukkit.inventory.EquipmentSlot;
+ import org.bukkit.inventory.ItemStack;
+ import org.bukkit.plugin.Plugin;
+ 
+ 
+ 
+ 
+ 
+ public class MoneySigns
+   implements Listener
+ {
+   private static Money eco = new Money();
+   private final Main plugin;
+   
+   public MoneySigns(Main plugin) {
+     this.plugin = plugin;
+     Bukkit.getPluginManager().registerEvents(this, (Plugin)plugin);
+   }
+   
+   @EventHandler
+   public void onclickSignBalance(SignChangeEvent e) {
+     if (e.getLine(0).equalsIgnoreCase("[balance]")) {
+       if (e.getPlayer().hasPermission("frameapi.signs.create")) {
+         String signName = Main.getInstance().getConfig().getString("MoneySign.Balance");
+         signName = signName.replace('&', '§');
+         e.setLine(0, signName);
+       } else {
+         e.getPlayer().sendMessage(Main.FrameMainGet.getPrefix() + " " + Main.FrameMainGet.getNoPerm());
+       } 
+     }
+   }
+   
+   @EventHandler
+   public void onClickBalance(PlayerInteractEvent e) {
+     if (e.getAction() == Action.RIGHT_CLICK_BLOCK) {
+       if (e.getHand() == EquipmentSlot.OFF_HAND) {
+         return;
+       }
+       if (e.getHand().equals(EquipmentSlot.HAND) && 
+         e.getClickedBlock().getState() instanceof Sign) {
+         Sign s = (Sign)e.getClickedBlock().getState();
+         String signName = Main.getInstance().getConfig().getString("MoneySign.Balance");
+         signName = signName.replace('&', '§');
+         if (s.getLine(0).equalsIgnoreCase(signName)) {
+           if (e.getPlayer().hasPermission("frameapi.signs.use")) {
+             String money = String.valueOf(eco.getMoney((OfflinePlayer)e.getPlayer()));
+             String text = Main.getInstance().getConfig().getString("Money.MSG.Balance");
+             text = text.replace("[Money]", money);
+             text = text.replace('&', '§');
+             e.getPlayer().sendMessage(text);
+           } else {
+             e.getPlayer().sendMessage(Main.FrameMainGet.getPrefix() + " " + Main.FrameMainGet.getNoPerm());
+           } 
+         }
+       } 
+     } 
+   }
+ 
+ 
+   
+   @EventHandler
+   public void signChange(SignChangeEvent e) {
+     String signName = Main.getInstance().getConfig().getString("MoneySign.Buy");
+     signName = signName.replace('&', '§');
+     if (e.getLine(0).equalsIgnoreCase("buy")) {
+       String[] args = e.getLines();
+       Material name = Material.getMaterial(args[1].toUpperCase());
+       int amount = Integer.parseInt(args[2]);
+       int money = Integer.parseInt(args[3]);
+       if (e.getPlayer().hasPermission("frameapi.signs.create")) {
+         if (e.getLine(1).equalsIgnoreCase(name.name()) && 
+           e.getLine(2).equalsIgnoreCase(amount + "") && 
+           e.getLine(3).equalsIgnoreCase(money + "")) {
+           e.setLine(0, signName);
+           e.setLine(1, name.name());
+           e.setLine(2, amount + "");
+           e.setLine(3, money + "");
+         }
+       
+       } else {
+         
+         e.getPlayer().sendMessage(Main.FrameMainGet.getPrefix() + " " + Main.FrameMainGet.getNoPerm());
+       } 
+     } 
+   }
+   
+   @EventHandler
+   public void SignChangeFree(SignChangeEvent e) {
+     String signName = Main.getInstance().getConfig().getString("MoneySign.Free");
+     signName = signName.replace('&', '§');
+     if (e.getLine(0).equalsIgnoreCase("free")) {
+       if (e.getPlayer().hasPermission("frameapi.signs.create")) {
+         String[] args = e.getLines();
+         Material name = Material.getMaterial(args[1].toUpperCase());
+         int amount = Integer.parseInt(args[2]);
+         if (e.getLine(1).equalsIgnoreCase(name.name()) && 
+           e.getLine(2).equalsIgnoreCase(amount + "")) {
+           e.setLine(0, signName);
+           e.setLine(1, name.name());
+           e.setLine(2, amount + "");
+         }
+       
+       } else {
+         
+         e.getPlayer().sendMessage(Main.FrameMainGet.getPrefix() + " " + Main.FrameMainGet.getNoPerm());
+       } 
+     }
+   }
+   
+   @EventHandler
+   public void onInteractFree(PlayerInteractEvent e) {
+     if (e.getAction() == Action.RIGHT_CLICK_BLOCK) {
+       if (e.getHand() == EquipmentSlot.OFF_HAND) {
+         return;
+       }
+       if (e.getHand().equals(EquipmentSlot.HAND)) {
+         String signName = Main.getInstance().getConfig().getString("MoneySign.Free");
+         signName = signName.replace('&', '§');
+         if (e.getClickedBlock().getState() instanceof Sign) {
+           Sign s = (Sign)e.getClickedBlock().getState();
+           if (s.getLine(0).equalsIgnoreCase(signName)) {
+             if (e.getPlayer().hasPermission("frameapi.signs.use")) {
+               String[] args = s.getLines();
+               Material name = Material.getMaterial(args[1].toUpperCase());
+               
+               int amount = Integer.parseInt(args[2]);
+               if (s.getLine(1).equalsIgnoreCase(name.name()) && s.getLine(2).equalsIgnoreCase(amount + "")) {
+                 e.getPlayer().getInventory().addItem(new ItemStack[] { new ItemStack(name, amount) });
+                 
+                 return;
+               } 
+             } else {
+               e.getPlayer().sendMessage(Main.FrameMainGet.getPrefix() + " " + Main.FrameMainGet.getNoPerm());
+             } 
+           }
+         } 
+       } 
+     } 
+   }
+ 
+   
+   @EventHandler
+   public void onInteract(PlayerInteractEvent e) {
+     if (e.getAction() == Action.RIGHT_CLICK_BLOCK && 
+       e.getClickedBlock().getState() instanceof Sign) {
+       if (e.getHand() == EquipmentSlot.OFF_HAND) {
+         return;
+       }
+       if (e.getHand().equals(EquipmentSlot.HAND)) {
+         String signName = Main.getInstance().getConfig().getString("MoneySign.Buy");
+         signName = signName.replace('&', '§');
+         Sign s = (Sign)e.getClickedBlock().getState();
+         if (s.getLine(0).equalsIgnoreCase(signName)) {
+           if (e.getPlayer().hasPermission("frameapi.signs.use")) {
+             String[] args = s.getLines();
+             Material name = Material.getMaterial(args[1].toUpperCase());
+             
+             int amount = Integer.parseInt(args[2]);
+             
+             int money = Integer.parseInt(args[3]);
+             if (s.getLine(1).equalsIgnoreCase(name.name()) && s.getLine(2).equalsIgnoreCase(amount + "") && s.getLine(3).equalsIgnoreCase(money + "")) {
+               if (eco.getMoney((OfflinePlayer)e.getPlayer()).doubleValue() < money) {
+                 e.getPlayer().sendMessage("Not enought Money");
+                 return;
+               } 
+               ItemStack item = new ItemStack(name);
+               item.setAmount(amount);
+               e.getPlayer().getInventory().addItem(new ItemStack[] { item });
+               eco.removeMoney(e.getPlayer(), money);
+ 
+ 
+               
+               return;
+             } 
+           } else {
+             e.getPlayer().sendMessage(Main.FrameMainGet.getPrefix() + " " + Main.FrameMainGet.getNoPerm());
+           } 
+         }
+       } 
+     } 
+   }
+ 
+   
+   @EventHandler
+   public void signChangeSell(SignChangeEvent e) {
+     String signName = Main.getInstance().getConfig().getString("MoneySign.Sell");
+     signName = signName.replace('&', '§');
+     if (e.getLine(0).equalsIgnoreCase("sell")) {
+       if (e.getPlayer().hasPermission("frameapi.signs.create")) {
+         String[] args = e.getLines();
+         Material name = Material.getMaterial(args[1].toUpperCase());
+         int amount = Integer.parseInt(args[2]);
+         int money = Integer.parseInt(args[3]);
+         if (e.getLine(1).equalsIgnoreCase(name.name()) && 
+           e.getLine(2).equalsIgnoreCase(amount + "") && 
+           e.getLine(3).equalsIgnoreCase(money + "")) {
+           e.setLine(0, signName);
+           e.setLine(1, name.name());
+           e.setLine(2, amount + "");
+           e.setLine(3, money + "");
+         }
+       
+       }
+       else {
+         
+         e.getPlayer().sendMessage(Main.FrameMainGet.getPrefix() + " " + Main.FrameMainGet.getNoPerm());
+       } 
+     }
+   }
+   
+   @EventHandler
+   public void onInteractSell(PlayerInteractEvent e) {
+     if (e.getAction() == Action.RIGHT_CLICK_BLOCK) {
+       if (e.getHand() == EquipmentSlot.OFF_HAND) {
+         return;
+       }
+       if (e.getHand().equals(EquipmentSlot.HAND) && 
+         e.getClickedBlock().getState() instanceof Sign) {
+         String signName = Main.getInstance().getConfig().getString("MoneySign.Sell");
+         signName = signName.replace('&', '§');
+         Sign s = (Sign)e.getClickedBlock().getState();
+         if (s.getLine(0).equalsIgnoreCase(signName))
+           if (e.getPlayer().hasPermission("frameapi.signs.use")) {
+             String[] args = s.getLines();
+             Material name = Material.getMaterial(args[1].toUpperCase());
+             
+             int amount = Integer.parseInt(args[2]);
+             
+             int money = Integer.parseInt(args[3]);
+             if (s.getLine(1).equalsIgnoreCase(name.name()) && s.getLine(2).equalsIgnoreCase(amount + "") && s.getLine(3).equalsIgnoreCase(money + "")) {
+               if (e.getPlayer().getInventory().contains(name, amount)) {
+                 ItemStack item = new ItemStack(name);
+                 item.setAmount(amount);
+                 e.getPlayer().getInventory().removeItem(new ItemStack[] { item });
+                 eco.addMoney((OfflinePlayer)e.getPlayer(), money);
+                 return;
+               } 
+               e.getPlayer().sendMessage("Not enought " + name.name());
+ 
+ 
+               
+               return;
+             } 
+           } else {
+             e.getPlayer().sendMessage(Main.FrameMainGet.getPrefix() + " " + Main.FrameMainGet.getNoPerm());
+           }  
+       } 
+     } 
+   }
+ }
+
+
Index: src/main/java/de/framedev/frameapi/interfaces/EnergyInterfaceWithEnergyEinheiten.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/de/framedev/frameapi/interfaces/EnergyInterfaceWithEnergyEinheiten.java	(date 1583416259937)
+++ src/main/java/de/framedev/frameapi/interfaces/EnergyInterfaceWithEnergyEinheiten.java	(date 1583416259937)
@@ -0,0 +1,12 @@
+package de.framedev.frameapi.interfaces;
+
+import de.framedev.frameapi.enums.EnergyEinheiten;
+import org.bukkit.OfflinePlayer;
+
+public interface EnergyInterfaceWithEnergyEinheiten {
+  void addEnergy(OfflinePlayer paramOfflinePlayer, int paramInt, EnergyEinheiten paramEnergyEinheiten);
+  
+  void removeEnergy(OfflinePlayer paramOfflinePlayer, int paramInt, EnergyEinheiten paramEnergyEinheiten);
+}
+
+
Index: src/main/java/de/framedev/frameapi/interfaces/APIConstructors.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/de/framedev/frameapi/interfaces/APIConstructors.java	(date 1589745342604)
+++ src/main/java/de/framedev/frameapi/interfaces/APIConstructors.java	(date 1589745342604)
@@ -0,0 +1,21 @@
+package de.framedev.frameapi.interfaces;/*
+ * =============================================
+ * = This Plugin was Created by FrameDev       =
+ * = Copyrighted by FrameDev                   =
+ * = Please don't Change anything              =
+ * =============================================
+ * This Class was made at 17.05.2020, 21:54
+ */
+
+import de.framedev.frameapi.api.API;
+import de.framedev.frameapi.api.energy.Energy;
+import de.framedev.frameapi.api.energy.EnergyWithEnergyUnits;
+import de.framedev.frameapi.api.money.Money;
+
+public interface APIConstructors {
+
+    Energy energy = new Energy();
+    EnergyWithEnergyUnits energyUnits = new EnergyWithEnergyUnits();
+    Money money = new Money();
+    API api = new API();
+}
Index: src/main/java/de/framedev/frameapi/interfaces/CustomConfigInterface.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/de/framedev/frameapi/interfaces/CustomConfigInterface.java	(date 1592260172871)
+++ src/main/java/de/framedev/frameapi/interfaces/CustomConfigInterface.java	(date 1592260172871)
@@ -0,0 +1,16 @@
+package de.framedev.frameapi.interfaces;
+
+/*
+ * =============================================
+ * = This Plugin was Created by FrameDev       =
+ * = Copyrighted by FrameDev                   =
+ * = Please don't Change anything              =
+ * =============================================
+ * This Class was made at 24.05.2020, 01:27
+ */
+public interface CustomConfigInterface {
+
+    void createConfig();
+    void saveConfig();
+
+}
Index: src/main/java/de/framedev/frameapi/interfaces/Constructors.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/de/framedev/frameapi/interfaces/Constructors.java	(date 1589579321805)
+++ src/main/java/de/framedev/frameapi/interfaces/Constructors.java	(date 1589579321805)
@@ -0,0 +1,24 @@
+package de.framedev.frameapi.interfaces;
+
+import de.framedev.frameapi.api.API;
+import de.framedev.frameapi.api.energy.Energy;
+import de.framedev.frameapi.api.energy.EnergyWithEnergyUnits;
+import de.framedev.frameapi.api.money.Money;
+import de.framedev.frameapi.kits.KitManager;
+import de.framedev.frameapi.managers.WorldManager;
+import de.framedev.frameapi.pets.Pets;
+import java.util.ArrayList;
+
+public interface Constructors {
+
+    Energy energy = new Energy();
+    EnergyWithEnergyUnits energyeinheiten = new EnergyWithEnergyUnits();
+    API api = new API();
+    WorldManager worldmanager = new WorldManager();
+    KitManager kit = new KitManager();
+    Money eco = new Money();
+    Pets pet = new Pets();
+    ArrayList<String> pays = new ArrayList<>();
+    ArrayList<Integer> lol = new ArrayList<>();
+
+}
Index: src/main/java/de/framedev/frameapi/interfaces/EnergyInterface.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/de/framedev/frameapi/interfaces/EnergyInterface.java	(date 1583416259533)
+++ src/main/java/de/framedev/frameapi/interfaces/EnergyInterface.java	(date 1583416259533)
@@ -0,0 +1,18 @@
+package de.framedev.frameapi.interfaces;
+
+import org.bukkit.OfflinePlayer;
+import org.bukkit.entity.Player;
+
+public interface EnergyInterface {
+  void addEnergy(OfflinePlayer paramOfflinePlayer, int paramInt);
+  
+  void removeEnergy(OfflinePlayer paramOfflinePlayer, int paramInt);
+  
+  int getEnergy(OfflinePlayer paramOfflinePlayer);
+  
+  void setEnergy(OfflinePlayer paramOfflinePlayer, int paramInt);
+  
+  void adminEnergy(Player paramPlayer);
+}
+
+
Index: src/main/java/de/framedev/frameapi/interfaces/EnergyListenerInterface.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/de/framedev/frameapi/interfaces/EnergyListenerInterface.java	(date 1583416258210)
+++ src/main/java/de/framedev/frameapi/interfaces/EnergyListenerInterface.java	(date 1583416258210)
@@ -0,0 +1,13 @@
+package de.framedev.frameapi.interfaces;
+
+import org.bukkit.World;
+import org.bukkit.block.Block;
+import org.bukkit.entity.Player;
+
+public interface EnergyListenerInterface {
+  void run(Player paramPlayer, Block paramBlock);
+  
+  void updateWorld(World paramWorld, Player paramPlayer);
+}
+
+
Index: src/main/resources/config.yml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/resources/config.yml	(date 1592260173024)
+++ src/main/resources/config.yml	(date 1592260173024)
@@ -0,0 +1,165 @@
+##This Config.yml is in use by FrameAPI
+##Pls don't change things you don't now what thit it!
+##Copyrighted By FrameDev
+##Have fun and don't make Config.yml Broken :D
+#
+#===============================
+#=          FrameDev           =
+#===============================
+
+##Use MYSQL
+MYSQL:
+  Host: ' '
+  User: ' '
+  Password: ' '
+  Database: ' '
+  Port: '3306'
+  Boolean: false
+
+BungeeCord: false
+
+# Save EnderChest in MYSQL
+SaveMYSQLEnderChest: false
+
+EnderChestStartKit: false
+
+# This is for the Command openinv
+SaveInventoryMYSQL: false
+
+# Would you save Players Inventory in MYSQL
+SavePlayersInventory: false
+
+# This is for the Command openinvnumber (number)
+# the groups under SaveInventoryMultiple is for the permission and how many
+SaveInventoryMultiple:
+  default: 4
+  premium: 6
+  moderator: 8
+  master: 10
+  owner: 100
+
+
+##Get the Boolean for first Join Money
+StartMoney: false
+
+##Change the Money on first Join
+StartBudget: 1000
+
+##Change the Text when the Plugin is loading
+##Would you like to have the Message when yes true else false :D
+MessageOfReload:
+  Text: '&aHello &b[Player]'
+  Boolean: false
+
+##Every Night change it to day false = natural Day-Night circle
+NoNight: false
+
+##The First Money.Time is wich TimeStamp you get you'r Money the second/ Amount is your Amount to get the Money
+##Boolean is would you like to get the Money
+##20 = 1 Sec
+##Use this for the Time when you earn the Money from The FrameAPI
+##cmds == Money Commands to get Money or show Money!
+##MSG == Are the messages for the Money Commands!
+
+Money:
+  Time: 500
+  Amount: 100
+  Boolean: false
+  CMDS: false
+  MSG:
+    Balance: '&aYour money is &b[Money]'
+    Pay: '&aYou gave &b[Target] &b[Money]'
+    Set: '&aYour money has been set to &b[Money]'
+MoneyBalance:
+  Other:
+    MSG: '&aThe money from &b[Target] &ais &b[Money]'
+MoneySet:
+  Other:
+    MSG: '&aThe money from &b[Target] &ahas been set to &b[Money]'
+
+# Remove Money when Player is Dead
+RemoveMoneyDeath:
+  boolean: false
+  amount: 1000.0
+##Would like you to use the Teleporter Invenotry�
+Teleporter:
+  Inventory: false
+
+##Set Time in World
+##With the Methode setTimeMessage
+SetTime:
+  Message: false
+  Text: '&aTime set to &b[Time]'
+
+##Teleport to old Location can be disable
+OldLoc:
+  Teleport: false
+# What you would to use
+Util:
+#  - Money
+#  - Energy
+#  - Bank
+#Signs to use
+#Remove #in front of the Signs with you would to use
+Signs:
+#  - Money
+#  - Warp
+##MoneySigns Text Can be Changed
+MoneySign:
+  Balance: '&b[Bank Balance]'
+  Buy: '&aBuy'
+  Sell: '&aSell'
+  Free: '&aFree'
+
+##Use Denied Words in Chat with /denied add or / denied remove 
+Chat:
+  Denied: false
+
+
+##Would you like to use /setwarp or /warp?
+##/setwarp (warpname) / warp (warpname)
+Use:
+  Warps: false
+
+# Your MOTD, Server Name in Server Browser
+Motd:
+  Name: '&bFrameAPIMOTD Change this in &cConfig.yml'
+  Boolean: false
+
+# Prefix Change
+Prefix: '&6[&bFrame&9API&6]&f'
+#No Permission Text Don't use (')
+NoPerm: '&cYou don"t have access to this Command'
+
+# Would you have an Different JoinMessage or not in Messages.yml can you change the Text
+Join:
+  Message:
+    Boolean: true
+
+# Would you have an Different QuitMessage or not in Messages.yml can you change the Text
+
+Leave:
+  Message:
+    Boolean: true
+
+OfflinePlayers:
+  Money:
+    Boolean: false
+    Amount: 25
+    Time: 300
+
+# Rightclick to a Player to set it as Passenger to you
+SetPlayerPassenger: false
+
+
+# Set the Language Only en_EN or de_DE // en_EN = english // de_DE = german // en_EN is the Default language
+language: 'en_EN'
+
+AFK:
+  Time: 120
+  Boolean: false
+  IsAFK: '&7[Player] is now AFK'
+  IsNotAFK: '&7[Player] is no longer AFK'
+
+# Skip The Night when one Player Sleep
+SkipNight: false
Index: src/main/resources/messages.yml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/resources/messages.yml	(date 1583258921376)
+++ src/main/resources/messages.yml	(date 1583258921376)
@@ -0,0 +1,39 @@
+# Other Messages
+
+message:
+  TeleportBack: '&aYou has been Teleportet to your &cDeathLocation'
+  NoLocation: '&4No Location found!'
+  targetheal: '&aYou have been healed by &b[player]'
+  targethealplayer: '&aYou have been Healed &b[target]'
+  heal: '&aYou have been Healed'
+  notenabledback: '&c/back is not enabled in Config.yml'
+  notactivated: '&cthis Command is not Activated'
+  GamemodeChanged: '&aYour GameMode has been changed to &b[GameMode]'
+  GodModeChanged: '&aYour GodMode has been changed!'
+Startbudget:
+  Text:
+    Set: '&bStartBudget Sucessfuly set to [Money]'
+
+# Warp Messages
+Warp:
+  Warp: '&aYou were teleported to &b[warp]'
+  warpremoved: '&a[Prefix] &a[Warpname]&c was Removed!'
+  warpdoesntexist: '&4Doesnt Exists or was &cRemoved!'
+# PayLoad Text and True or False
+Payload:
+  Text: '&aYou got your reward &b[Money]'
+  Boolean: true
+
+# Change the Join Message
+JoinMessage: '&bWelcome &a[Player]'
+
+# Change the Leave Message
+LeaveMessage: '&bGoodbye &a[Player]'
+
+# Use to create a bill only works with MYSQL
+Bill:
+  Create: '&aYou have now put a bill to &b[Target]'
+  Get: '&aYou got an invoice from &b[Target] &aamounting to &b[Amount]'
+  Pay: '&bYou payed the Bill from &a[Target] &bin Amount of &a[Amount]'
+
+LoadedFirst: true
\ No newline at end of file
Index: src/main/resources/kits.yml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/resources/kits.yml	(date 1583258921376)
+++ src/main/resources/kits.yml	(date 1583258921376)
@@ -0,0 +1,14 @@
+Items:
+  StarterKit:
+    - STONE_SWORD,1
+    - STONE_PICKAXE,1
+    - STONE_AXE,1
+    - STONE_SHOVEL,1
+    - TORCH,32
+    - LEATHER_LEGGINGS,1
+    - LEATHER_CHESTPLATE,1
+    - LEATHER_HELMET,1
+    - LEATHER_BOOTS,1
+    - APPLE,16
+  YourKit:
+    - MATERIAL,Amount
\ No newline at end of file
Index: src/main/resources/plugin.yml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/resources/plugin.yml	(date 1590263143862)
+++ src/main/resources/plugin.yml	(date 1590263143862)
@@ -0,0 +1,284 @@
+name: FrameAPI
+author: FrameDev
+version: 4.4.6
+api-version: 1.13
+description: FrameAPI this API add much things to your Minecraft!
+main: de.framedev.frameapi.main.Main
+load: STARTUP
+loadbefore:
+  - MDBConnection
+commands:
+  setwheat:
+  getwheat:
+  setcarrot:
+  getcarrot:
+  setpotato:
+  getpotato:
+  setsugarcane:
+  getsugarcane:
+  openinv:
+  openinvnumber:
+  unmute:
+  chatmute:
+  enderchest:
+    aliases:
+      - ec
+  invsee:
+  vanish:
+    aliases:
+      - v
+  frameapi:
+    description: each Commands
+  lootchest:
+  trash:
+    description: Open an Trash Inventory
+  health:
+  gm:
+  spawnentity:
+  sets:
+  loader:
+  fly:
+  back:
+    description: Teleport to the DeathLocation when enabled
+  spawnmob:
+    description: Spawns a Mob
+  denied:
+    description: Set a Denied word in Config if this word was writing the Player will bi kicked
+  getitem:
+    description: Gives you an Item with ItemLore and displayname and Unbreakable
+  heal:
+    description: heal player
+  getenergy:
+  getmysql:
+  pos:
+  cleartps:
+  teleporter:
+    description: Open the Teleporter Inventory
+  addentity:
+  set:
+    description: set the Money from the Player
+    usage:
+      /set [player] [amount]
+  balance:
+    aliases: [bal]
+    description: shows your money
+  pay:
+    description: use to give a Player Money
+  setwarp:
+    description: set a Warp point
+  removewarp:
+    description: remove a Warp point
+  warp:
+    description: teleport to an Warp point
+  playerlistadd:
+  mute:
+  kits:
+  tps:
+    description: Show you the TPS
+  deposit:
+    description: Deposit Money in your Bank Account
+  withdraw:
+    description: getMoney from Bank
+  transfer:
+    description: Transfer Money to Player
+  bankbalance:
+    description: Show Bank Money
+  setbank:
+    description: setbank Money
+  msg:
+    description: write a message to Player
+  createpay:
+    description: Create a Bill
+  paythebill:
+    description: Pay the Bill
+  sethealth:
+  ultrahardcore:
+  adminenergy:
+  addenergy:
+  item:
+    aliases:
+      - i
+  balancetop:
+    aliases:
+      - baltop
+  backpack:
+  afk:
+    description: Provides AFK message when player types /afk.
+    usage: /<command>
+    aliases: [awayfromkeyboard, away, aafk]
+permissions:
+  frameapi.*:
+    description: Gives access to all FrameAPI commands
+    children:
+      frameapi.invsee: true
+      frameapi.config: true
+      frameapi.startbudget: true
+      frameapi.teleporter: true
+      frameapi.backtp: true
+      frameapi.spawnmob: true
+      frameapi.denied: true
+      frameapi.getitem: true
+      frameapi.mysql: true
+      frameapi.setwarp: true
+      frameapi.warp: true
+      frameapi.removewarp: true
+      frameapi.balance: true
+      frameapi.set: true
+      frameapi.signs: true
+      frameapi.heal: true
+      frameapi.bankbalance: true
+      frameapi.balance.other: true
+      frameapi.setbank.other: true
+      frameapi.set.other: true
+      frameapi.setbank: true
+      frameapi.transfer: true
+      frameapi.withdraw: true
+      frameapi.deposit: true
+      frameapi.tps: true
+      frameapi.msg: true
+      frameapi.help: true
+      frameapi.update: true
+      frameapi.energy: true
+      frameapi.chunkloader: true
+      frameapi.fly: true
+      frameapi.afk: true
+      frameapi.vanish: true
+      frameapi.saveinventory: true
+      frameapi.saveinventorynumber.multiple: true
+      frameapi.gamemode: true
+      frameapi.godmode: true
+      frameapi.trash: true
+      frameapi.balancetop: true
+      frameapi.enderchest: true
+      frameapi.enderchest.other: true
+      frameapi.backpack: true
+      frameapi.backpack.other: true
+  frameapi.backpack:
+    default: op
+  frameapi.backpack.other:
+    default: op
+    children:
+      frameapi.backpack: true
+  frameapi.balancetop:
+    default: op
+  frameapi.invsee:
+    default: op
+  frameapi.startbudget:
+    description: Allows you to use StartBudget Command
+    default: op
+  frameapi.teleporter:
+    description: Allows you to use Teleporter Inventory
+    default: op
+  frameapi.backtp:
+    description: Allows you to use back teleport
+    default: op
+  frameapi.spawnmob:
+    description: Allows you to use Spawn Mob
+    default: op
+  frameapi.denied:
+    description: Allows you to use Denied Cmd
+    default: op
+  frameapi.getitem:
+    description: Allows you to use GetItem CMD
+    default: op
+  frameapi.heal:
+    description: Allows you to use Heal CMD
+    default: op
+  frameapi.mysql:
+    description: Allow you to use Mysql Help CMD
+  frameapi.setwarp:
+    default: op
+    description: Allow you to set a Warp Point
+  frameapi.warp:
+    default: op
+    description: allow you to Teleport ya
+  frameapi.balance:
+    default: op
+    description: allow you to show our Money
+  frameapi.balance.other:
+    default: op
+    description: allow you to show another Players Money
+    children:
+      frameapi.balance: true
+  frameapi.enderchest:
+    default: op
+  frameapi.enderchest.other:
+    default: op
+    children:
+      frameapi.enderchest: true
+  frameapi.set:
+    default: op
+    description: allow you to set the Money from a Player
+  frameapi.set.other:
+    default: op
+    children:
+      frameapi.set: true
+  frameapi.signs:
+    default: op
+  frameapi.signs.use:
+    default: op
+    children:
+      frameapi.signs: true
+  frameapi.signs.create:
+    default: op
+    children:
+      frameapi.signs: true
+  frameapi.config:
+    default: op
+  frameapi.help:
+    default: op
+  frameapi.removewarp:
+    default: op
+  frameapi.bankbalance:
+    default: op
+  frameapi.bankbalance.other:
+    default: op
+    children:
+      frameapi.bankbalance: true
+  frameapi.setbank:
+    default: op
+  frameapi.setbank.other:
+    default: op
+    children:
+      frameapi.setbank: true
+  frameapi.transfer:
+    default: op
+  frameapi.withdraw:
+    default: op
+  frameapi.deposit:
+    default: op
+  frameapi.tps:
+    default: op
+  frameapi.update:
+    default: op
+  frameapi.msg:
+    default: op
+  frameapi.energy:
+    default: op
+  frameapi.chunkloader:
+    default: op
+  frameapi.fly:
+    default: op
+  frameapi.fly.other:
+    default: op
+    children:
+      frameapi.fly: true
+  frameapi.afk:
+    default: op
+  frameapi.vanish:
+    default: op
+  frameapi.saveinventory:
+    default: op
+  frameapi.saveinventorynumber.multiple:
+    default: op
+  frameapi.gamemode:
+    default: op
+  frameapi.gamemode.other:
+    default: op
+    children:
+      frameapi.gamemode: true
+  frameapi.godmode:
+    default: op
+  frameapi.trash:
+    default: op
+
Index: target/maven-status/maven-compiler-plugin/compile/default-compile/inputFiles.lst
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- target/maven-status/maven-compiler-plugin/compile/default-compile/inputFiles.lst	(date 1583262186751)
+++ target/maven-status/maven-compiler-plugin/compile/default-compile/inputFiles.lst	(date 1583262186751)
@@ -0,0 +1,66 @@
+D:\Desktop\Test\FrameAPI1.15\src\main\java\de\framedev\frameapi\managers\MongoManager.java
+D:\Desktop\Test\FrameAPI1.15\src\main\java\de\framedev\frameapi\api\SaveInventory.java
+D:\Desktop\Test\FrameAPI1.15\src\main\java\de\framedev\frameapi\listeners\money\MoneySigns.java
+D:\Desktop\Test\FrameAPI1.15\src\main\java\de\framedev\frameapi\cmds\MoneyBankCMD.java
+D:\Desktop\Test\FrameAPI1.15\src\main\java\de\framedev\frameapi\interfaces\EnergyListenerInterface.java
+D:\Desktop\Test\FrameAPI1.15\src\main\java\de\framedev\frameapi\managers\ItemBuilder.java
+D:\Desktop\Test\FrameAPI1.15\src\main\java\de\framedev\frameapi\pets\Pets.java
+D:\Desktop\Test\FrameAPI1.15\src\main\java\de\framedev\frameapi\queries\UpdateQuery.java
+D:\Desktop\Test\FrameAPI1.15\src\main\java\de\framedev\frameapi\cmds\EnergyCMD.java
+D:\Desktop\Test\FrameAPI1.15\src\main\java\de\framedev\frameapi\enums\MaterialInID.java
+D:\Desktop\Test\FrameAPI1.15\src\main\java\de\framedev\frameapi\queries\DeleteQuery.java
+D:\Desktop\Test\FrameAPI1.15\src\main\java\de\framedev\frameapi\cmds\MoneyCMD.java
+D:\Desktop\Test\FrameAPI1.15\src\main\java\de\framedev\frameapi\api\energy\Energy.java
+D:\Desktop\Test\FrameAPI1.15\src\main\java\de\framedev\frameapi\utils\UUIDManager.java
+D:\Desktop\Test\FrameAPI1.15\src\main\java\de\framedev\frameapi\queries\InsertQuery.java
+D:\Desktop\Test\FrameAPI1.15\src\main\java\de\framedev\frameapi\cmds\PositionCMD.java
+D:\Desktop\Test\FrameAPI1.15\src\main\java\de\framedev\frameapi\managers\MultiWorldManager.java
+D:\Desktop\Test\FrameAPI1.15\src\main\java\de\framedev\frameapi\mysql\InventoryStringDeSerializer.java
+D:\Desktop\Test\FrameAPI1.15\src\main\java\de\framedev\frameapi\mysql\IsTableExist.java
+D:\Desktop\Test\FrameAPI1.15\src\main\java\de\framedev\frameapi\api\API.java
+D:\Desktop\Test\FrameAPI1.15\src\main\java\de\framedev\frameapi\listeners\money\GetInterest.java
+D:\Desktop\Test\FrameAPI1.15\src\main\java\de\framedev\frameapi\listeners\PlayerKillPlayer.java
+D:\Desktop\Test\FrameAPI1.15\src\main\java\de\framedev\frameapi\utils\Information.java
+D:\Desktop\Test\FrameAPI1.15\src\main\java\de\framedev\frameapi\interfaces\EnergyInterface.java
+D:\Desktop\Test\FrameAPI1.15\src\main\java\de\framedev\frameapi\listeners\LeaveListener.java
+D:\Desktop\Test\FrameAPI1.15\src\main\java\de\framedev\frameapi\queries\SelectQuery.java
+D:\Desktop\Test\FrameAPI1.15\src\main\java\de\framedev\frameapi\cmds\FlyCMD.java
+D:\Desktop\Test\FrameAPI1.15\src\main\java\de\framedev\frameapi\queries\Callback.java
+D:\Desktop\Test\FrameAPI1.15\src\main\java\de\framedev\frameapi\afk\AFK.java
+D:\Desktop\Test\FrameAPI1.15\src\main\java\de\framedev\frameapi\listeners\money\MoneyBankSigns.java
+D:\Desktop\Test\FrameAPI1.15\src\main\java\de\framedev\frameapi\glass\Glas.java
+D:\Desktop\Test\FrameAPI1.15\src\main\java\de\framedev\frameapi\listeners\energy\CapacitorListener.java
+D:\Desktop\Test\FrameAPI1.15\src\main\java\de\framedev\frameapi\utils\UUIDFetcher.java
+D:\Desktop\Test\FrameAPI1.15\src\main\java\de\framedev\frameapi\managers\BackendManager.java
+D:\Desktop\Test\FrameAPI1.15\src\main\java\de\framedev\frameapi\listeners\money\GetMoneyInTime.java
+D:\Desktop\Test\FrameAPI1.15\src\main\java\de\framedev\frameapi\cmds\ChunkloaderCMD.java
+D:\Desktop\Test\FrameAPI1.15\src\main\java\de\framedev\frameapi\cmds\FrameAPICMDS.java
+D:\Desktop\Test\FrameAPI1.15\src\main\java\de\framedev\frameapi\cmds\FrameCMDS.java
+D:\Desktop\Test\FrameAPI1.15\src\main\java\de\framedev\frameapi\interfaces\EnergyInterfaceWithEnergyEinheiten.java
+D:\Desktop\Test\FrameAPI1.15\src\main\java\de\framedev\frameapi\utils\Config.java
+D:\Desktop\Test\FrameAPI1.15\src\main\java\de\framedev\frameapi\interfaces\Constructors.java
+D:\Desktop\Test\FrameAPI1.15\src\main\java\de\framedev\frameapi\managers\ChunkloaderManager.java
+D:\Desktop\Test\FrameAPI1.15\src\main\java\de\framedev\frameapi\managers\CropsManager.java
+D:\Desktop\Test\FrameAPI1.15\src\main\java\de\framedev\frameapi\kits\GetKits.java
+D:\Desktop\Test\FrameAPI1.15\src\main\java\de\framedev\frameapi\managers\FileManager.java
+D:\Desktop\Test\FrameAPI1.15\src\main\java\de\framedev\frameapi\utils\ReplaceCharConfig.java
+D:\Desktop\Test\FrameAPI1.15\src\main\java\de\framedev\frameapi\api\SaveEnderChest.java
+D:\Desktop\Test\FrameAPI1.15\src\main\java\de\framedev\frameapi\warps\WarpSigns.java
+D:\Desktop\Test\FrameAPI1.15\src\main\java\de\framedev\frameapi\enums\EnergyEinheiten.java
+D:\Desktop\Test\FrameAPI1.15\src\main\java\de\framedev\frameapi\managers\WorldManager.java
+D:\Desktop\Test\FrameAPI1.15\src\main\java\de\framedev\frameapi\listeners\JoinListener.java
+D:\Desktop\Test\FrameAPI1.15\src\main\java\de\framedev\frameapi\utils\Lags.java
+D:\Desktop\Test\FrameAPI1.15\src\main\java\de\framedev\frameapi\api\SavePlayersInventory.java
+D:\Desktop\Test\FrameAPI1.15\src\main\java\de\framedev\frameapi\queries\CreateTableQuery.java
+D:\Desktop\Test\FrameAPI1.15\src\main\java\de\framedev\frameapi\api\money\Money.java
+D:\Desktop\Test\FrameAPI1.15\src\main\java\de\framedev\frameapi\main\Main.java
+D:\Desktop\Test\FrameAPI1.15\src\main\java\de\framedev\frameapi\api\energy\EnergyWithEnergyEinheiten.java
+D:\Desktop\Test\FrameAPI1.15\src\main\java\de\framedev\frameapi\api\OpenOtherInventory.java
+D:\Desktop\Test\FrameAPI1.15\src\main\java\de\framedev\frameapi\mysql\MYSQL.java
+D:\Desktop\Test\FrameAPI1.15\src\main\java\de\framedev\frameapi\managers\SetBlock.java
+D:\Desktop\Test\FrameAPI1.15\src\main\java\de\framedev\frameapi\glass\Cocktail.java
+D:\Desktop\Test\FrameAPI1.15\src\main\java\de\framedev\frameapi\managers\InventoryManager.java
+D:\Desktop\Test\FrameAPI1.15\src\main\java\de\framedev\frameapi\mysql\SQL.java
+D:\Desktop\Test\FrameAPI1.15\src\main\java\de\framedev\frameapi\cmds\VanishCMD.java
+D:\Desktop\Test\FrameAPI1.15\src\main\java\de\framedev\frameapi\utils\QueryUtils.java
+D:\Desktop\Test\FrameAPI1.15\src\main\java\de\framedev\frameapi\utils\Init.java
diff --git bin/src/main/resources/Information.yml bin/src/main/resources/Information.yml
new file mode 100644
diff --git bin/target/classes/Information.yml bin/target/classes/Information.yml
new file mode 100644
diff --git target/classes/Information.yml target/classes/Information.yml
new file mode 100644
diff --git .gitignore .gitignore
new file mode 100644
diff --git src/main/resources/Information.yml src/main/resources/Information.yml
new file mode 100644
diff --git bin/src/main/java/de/framedev/frameapi/afk/AFK.class bin/src/main/java/de/framedev/frameapi/afk/AFK.class
new file mode 100644
index 0000000000000000000000000000000000000000..c24eed49799b9c296b272d72586e513afa4943b8
GIT binary patch
literal 7831
zc%1E7TXWM!6#kYN<T!yqS}vt66_<ho)GmdVmZX#r65`?nN&+p=n<B5BCDO`WNg47B
z`q-Ji^+)uv!%REVzV{dO*K~R$*^UC6SPZTkraZ{rU7hdSJr|ulTK)O=ufGGhfF%Pv
z7*6}jF1wbH<%ia)Rj%=JU0E)#@ztbZHAUH~uaqZeZWzch?2W}7OE$_kmmYFEU>K(R
zw;XGYt2wL5Fj$?n{AFs6Q+q))q!omUGnCuo6V-K&g+K|}7=L=?GNB7ZyeM2A(;nXn
zUiDg#T}>x!2uY3V94SR3Lyl)#f$(I^a%yXqL^5HT5K;t}Nrz%WHFlRFH|5p1fmawt
z*5T7ic`A?nY-H_@RNVKRRbDe~&ut1P<};hhTXMMTUos1Wi_6>$)|%Xm2ucw_DKVsJ
zTT*&~xx~#jNy)4PrtnQ6YeJETvqrb-TybgB40YwX)c-D|do{CUJC^U8b>VP7nWe^Q
zD7w|O>=moQ&0{rQYJ0cT_HK!ce9WwQ+&81yT`RDc&4A$iQIn=j!zolsQK*#SrEf}>
z%r4xfrvh4pMz3d-h^Gq!;dB#}TxZ39LBvyymm)7kwicQ4T-TDd=||iS15asW%)m3P
zI2#lOTY0IARFbNCA=Jb9qU_s6B+8)uTu_q8yNFfXrXy?-n10yg<R4G^feP)&S4m1P
zjz!rwlr>%#GD^pDp&vwvF@{k#7IM{F;ig5CEN^7Uq;dw4jH>j|czvhpZzT3|O;^K}
z6`|iOwz$=AFKnZw^jT;-M%MGpwhbaKgB^Nh&u!@9eurkOgjnFT1$8SRTC%-ZT=F*8
zKQ*6qBR1=FhuT)?1ZnBk2AxRJuH4zGH}1?;;RjrHRd9Nh%V3sF>il0tZ--J^^yd2f
zWy~fbnXp-+v4Bw=9L5L^G3+ls{caz<ypL2VD&|9XiL1p(D~8dix^nJXN<{tEU@lk|
zKEv5+_LGruhJDR2NEW*2P1aW^=JR-q;pYq|0^6q^U^t+->#g!clNsf?ZC#Er{J8ye
zVc6T?!DRdVX`bA|a8l?0r-$-5$?&*WI`w&Hpx8|XT<ef5k1@t_z0&AKu6P&@J{iaz
z8=YnNrN5EfqrxHy_C%w}<YbiLur}D^^UyrrW%w(DsxM?M#xNxOjxjdL`uFp=(8I*l
z%jb8{ldX!4;YzW(q0$>~cQps&5A<q&$naAJHUFD}l3~D#d~~E(O*}S!U$;f)F~Kmi
zwHA>QSqcJ%-HHdHlC38tk54jjXH#bnJ&4uxcZH$iSn9LK*m|$acZNK!F<kGytc*cb
zSnxt+^BEBpGI^>@;-h+cI4Ux#faAJ1m=#=E%3fY$7_LaFgQub|2i!OCDZ{z!RnLjI
zlB7~;SJE&r$8g~p@D(aSBi|@`8aizQw-}68>>0RCb=wmMsRkCwyBi|e0M&O!%SZ;k
zAm!UeHgKP6x+tF*_>x*t!D--YT6Gde2EN_!RV#54nPyJ-KD8FfvObQ2Vi-UU1?<Ew
z>KWAAfjspGQ~jt89l~(j-kloXLt~@~_R{aZ`19KUjRJ+=FnVwF)yFvSM=bXm{YEIz
zb(nsK<8}eB;|=;B#G5$OVmM6<tiy0b!*C{M*b(E*O>jpwxN-`294EB6w>7x)Dcq?|
z<|}G&7gM;?o8Zo9a1$xqJ1A*!Wex613U?0gX>sQ@xN998!~6Ik<;k5L+(iwpqVXid
zN4S(?$aNUTH4I;A7=VvEzS$T}mo*IEYZ<O!lBALdz1m?~x5AW$=?4u{4%4yJ46et#
mvviG8zd}+s=&I5+Ph%Ec2MBc&pJ4%a@Hy_`0ckgYZ~g(v5tKv#

diff --git bin/src/main/java/de/framedev/frameapi/afk/AFK$Events.class bin/src/main/java/de/framedev/frameapi/afk/AFK$Events.class
new file mode 100644
index 0000000000000000000000000000000000000000..055e81950da80300805c03c9e01149664136096c
GIT binary patch
literal 5526
zc%1E6TW=dh6h51zS;v^BgqB;m3~2$UfK6$+H3%t*QpKuWE(w)*oa~O{sds0VnOUp;
zAN&B`c?St35RdSq5NBq6OSFw0*I1FLEw6WGzWL5|&&<x>|NQzp0NjQ<J}h`}Q>&mF
zQ!c6xX@^!rR&6R8vygSN8=CMcZMLghckf-_?J!}q4@(|ga_ESPqw1H34_RP5SpJ*~
zZocrKTCPt{y1DVdgQXoAG9OkvSRL~2DkW6`p7B<@-wMUFj5;hNfs7L#QNyJmiIRsA
zi}f8+TsdelV!8<<mY`w@Dw$#=ph8GP4jJi_R7lMbt_c?*R|tu^IMif{i2x-um5j0d
zeTritsRR+#nlyRDbS5Qa*ky+j8no#VBkLin^zEzk?W>@D>m-y+6DvKYCTJ0Z)7hg0
zMUGBKXH~4TDo*vsl4a6)oJeI*i5$Dmh;ZUk!=rIP!ScNLA3&r!dJ1_8IUTYi<CuzY
z_Yn(HBUKKD7)hwB2E~;<s#^`3j6v-i#YLXDGlOO*uP(<z8dx^wsZfv=-qT^VIEi?`
z4bf@BFg{Xfqtd{}Dl5t54O@Lv5wa#1wj4K7ZERt5)36$I(UEONC<<vEXPC(32_O@i
zGDGLhooc?BI7^+j({`KZFBYc^%{vO`NR>H*&SPdhiL`T&aTEAqR{lJPA)a??_O=lF
z440sB8;Blu7Rr4U(e7AzGc@z83o&Wp2;S2)GNb6;0-d37RURzW$5-Y$*M^C)2D-P%
zJ#=aGe}#UN3PJJB^~tv}kAX}ycam%@LIIvF!3DVJ!Ig4-_;Q|Qse5@}tz%Z)Pvb+T
z4y;uktl8aF^nfaE+r7>u)8g8LTW2^M=p8t0dQg%gQ@0^I$aT3~A2uDxX>t`EYk16R
zqQf;usaw`Gx6eb#7we-T+AP3J9@I}iS+EBSlgHJmxgE)%jmia?n#1N$%|2>dG1?xY
zTyuz8mSU$xjR!B6>sz`jg3MyucZ@3Q{yODm#4olvL=_UnrQ)WGPUug#$AdNtN2b`0
z;gsUOOjW?{avQn=#=;#=U=q}XedgVhZuU4+R0S>ME!6}*`8)QkglQi(Jh(A=oYC0+
z(b9XUQJ%FvR4~&{_{oP4`kg};`|u%Z+^<DG+(yU=3w`)_&^gE;A3hy)4%~-^HMrK8
z>IWEM4R3-6i(o%K-d%uYy!!4mZ4nmmzxW#zzFRB)0;NB&wE(MlwHUzPCA^m0eG#66
zHOKNiTt?KD9_j_hdy?(N9JU{F*f3Mzm8sZ%%w@X@uTI7GQ!d+U@cLA2Kj-@G4Iopo
z{h7<Q4%en)`zwcS39dWTTky8ye#eb@_$|W?yncr5HLR-d!uwE#n{W$0f=^)aU&CF*
A761SM

diff --git bin/src/main/java/de/framedev/frameapi/afk/AFK$IdleTimer.class bin/src/main/java/de/framedev/frameapi/afk/AFK$IdleTimer.class
new file mode 100644
index 0000000000000000000000000000000000000000..dd4033913c4955ae57c5fa1db1e3b87dcac7542a
GIT binary patch
literal 4839
zc%1E6ZBJV_6g~z@Ldt-#vaRi2JjS+AO*i|{?L%8tY7vNNVVed++DCKm2{F0XzO#L!
z=9f)crS5zG!v0Iu<9m6P0=W@cgw!Uo<!e9Z)knwndHv>}R{-!3)+;c@;Gs2PBN0+H
zjzmv1B5bscNHD@)F%YS2h<3N}Z0qN>W)$O|Owd$dhQU%!5DRtK`1RljL&sn?jk80k
zXwcdrmX8@!h}IDa1J<Nz*O7MZ2L|7_%8Ml~vrnXw?kR&G>!T1BO04fQnAy+~R$!6A
z;+fW)#%NQ857}b>4`tBmxQ7uBb&|?hIH?s+jXsDmv5$CdZm)yf^;6`YLEsq#h1on5
zN@>Rrke@IKc++udxm1xf1d02!)JB6UBnfS!6Z-xuqqT?!VJxiWZ5g92q(n$lekm1U
zR~#Z=jW9T|GB~j^AS+jSq|tIOJrOSKa7X0$A|;XM$;oAbcUh3Dekrp;x=d1S94Rrt
zt`QNrxXj6T7*OFLFa8e@Z4Tc<-b1d2Z0IBrD%yO3Vdk_MfZ<Mak!OS2+_tct9gz+}
z?K&gXAaNsu#wf3)heCV?ouooxk$A6$HIp=!p>*74DboIEWu3`FzgI;{uCM#-o2dxf
zQu%belUe5zV@^idSgM}xA{Qj2bCE+SlS@EKnleV`O`O$aBXOKMJ<qybIry-+VrkO5
zaD!BtFz6;m)^()afQT#MhjIDy25#}BL-Y6wv5RyB4ZA=bW5=P~Z?WhPl{ZE+M?Hvn
zn^tHnve=zRA0N;KicaOzqx#~>+>+Lz8fxHX50%>{m&WfZ^!H3DK`+<qUt=zTl%g#Y
zjWt++kLKYv++na%Z=F5Pizv+>?~5&pieIwi0L`AaiovqKUB&ytNdJ92Ipd2941OA+
zLU2~mc+6nhWQzLw`hFEYW3Y8~O~97~${5I?wyQG};+FJER!M693@3A&%13t|({5X$
z5hm>P8O%2o#rTG=3ZSjPDuV~*En+Ztu1fO_dBty31->KECs9EncBHlB-aXRL0tYf1
zfZ8(Lf?4pt3RD4>mS7HQ^fg88Hp~<5gS>P!o#SgSVd2l^rN3eM-yE|-{VZXC+Q-z-
z=i?fD0-xq{cj4YS4(yb}{Q(^Q8^B=(KF?8Kz?Zp>JYQq<{|dgQah+O~IIqFCF#Q$)
CX-O0S

diff --git bin/src/main/java/de/framedev/frameapi/api/API$Locations.class bin/src/main/java/de/framedev/frameapi/api/API$Locations.class
new file mode 100644
index 0000000000000000000000000000000000000000..2733cb11b6200c930e7e0f509543807ddad9859e
GIT binary patch
literal 4808
zc%1E6TTc@~6g~r$(ozLcyek9V5Y6_*_#nmv5n_{~Bp`{8!|rJr*`28~(}w;s6HWBp
zA7wl{rBXtn)l}n!Y<72M&v(A_&Cbs3%=z;5!zTcE2oJI_#NeSdVKEU>72k@6C`MSU
z7?EIvjaEU_WHCJ#*Gjj_IuuT7WwVfBFyS3yp{m7KTW>LR3^ElNBZHCh3f&hN42P8}
zgLA&Rq*X;$>&7#XZRCkm(mf^6+`Ub5UD6R|;WUHsecokbv>AnQHopE^8MHcXV8lb6
z)MV^=c+Kdo7!&)L=W`p|$X&CBJS7NHf?z2Y*78s&r5)cw-sT8+$#H49RFO0!J#Lbz
zf(BJc0V+l(RDV||Tf~FVlcY_vtsoK7qtsLr;f|;xpN%kRzqX+L+5$Rfd8E<uG<qUj
zxXm58<8F;YcDhp^1Zf`xUipz^t>`kTY2!#lmv)^X{sM&WWU2pLn0*)j(Kv^@t}kHS
z$)1b~dva-0J%OA+{wYXVT89cv7bAC?3;!q0=UxcAy((%wQ0vY})h$jZsJ(jleGyBl
zqD^vC(0`63U1jy4=o4~atu|o%8<E7l@V`vxAik<qt*|)&Oi49RIc<93p4E4DWcPp6
zS}dA9hww4}C5OqnqgCjDr2Y!NXLT7zJsa6Sa#c7qQgmAvv|tTEX4+KbbBo4^W;#(0
z;<M?Sj3(|FpOeZJKiUTj??>tna;Ct+%sc<<)U=!qhu=Qk<)Hv)3y_0J22*q8{cU&a
zBUwnd<>O_k@MS&OLbH($3I>zue>~pY8zg%VGj3a229L@=lTBD)FlN!U>kOv5h$*+t
zBx@9|Fqk<$Bk-8#iMHBFd!t($_jwuQ*LB^5xZ;x-qomRA#~Bn#idITKmw+}4GYsbY
zZzqFXN8aQXy{nWz3wIctJ=CXJn4`#Td=};pq*+>;NzbaZmP#Acixy^p!7u;}QBR(N
z5h~>%3!`)&CQA<TbRF{<pR^8;{|JRQlV{$;#Aokyj;<r#!r(kz3oR5(!3EEC5iad9
z%oD@VcZSP{88SCL!;ts83fDUP*s*>~-~EQ+x-Z>;X|ICO!C{v8?)!QMZo+N23-`VO
DgF8D5

diff --git bin/src/main/java/de/framedev/frameapi/api/API$CreateConfig.class bin/src/main/java/de/framedev/frameapi/api/API$CreateConfig.class
new file mode 100644
index 0000000000000000000000000000000000000000..fc7a4ac4e5d710eaf12314c6595f990097c39766
GIT binary patch
literal 5069
zc%1E6TW=dh6h33SvAs>3HYMc_(@?+(u;wNq8idq_R9JG_N(q(9+hq6HnPzupJ3F@G
zUxow{yz^gp<b?;|%&hIYsv8^RR;5JNc<1t+?>jTIGdpvB{qx740pN4^tO_LtU*slg
zrb4RbebE=q7@Hj<QjD=*WJD&LE?vLVy1H#pSlrgCBfC|oFu34t5}~@y+XweCvJ7hJ
zpa3wq)V?W`A-rdVm0E2v2qItMniwp32-PknTErMLVBb^WE2*UYnnAg-ahE}5TgO<1
z6$UF0^>&QWrUn<;%HDU%V6Kxs#yrw#CKE5kGoud@O!I3zsP7*lw}TA1BM2QqxSfbR
z=aEoKTYi9i#1ZnA<ud0|#nMohk^wb!(4dM)pks7O<p(`#i+LD%k`DDDFGOObD%X^W
z=ty*tug4gUMl>9aXh><D#~O3))Kg)jLvG0&k28{-G^gna-SmXs^CyxO>N3r=vE;;*
zew`xz0|-CKQa``2{6X?u<18NAxqv+@XEG|B$)!#A6mklAp&)IUTU2PKG;*uC@L$rP
z{;kLlcSSY>wP%e~({v_5Z5<Wg>}RIfQXOs5CyBmrB<_?ogJMp|BgeS~<L`+ynT3C9
zjxOS@+SLjN3&6BgAC=W+7Vbvx=txfgM%_uoVCE7&!M<fN-LrHGU689!gYQO9Ch^Qp
z&X3%s+l`T8+PR>B^#wK4r6Q<bH%1KHM!AUBW^OXtxD)(_yu9gG`-0)~xcUz{9dI%G
z&i{35+HuR_nQwOioQF%xa28%-u-0flyml8a$(Fm8ue7DYTfOuE&AwX{3|8HDJh?ku
zB*V&zJ(M|vFWdhz(6Ggz-bFhKDy%g&ri2x0@CJh`CkFzq@qod(F;x+Os14~{V8VqU
zMl!WXXM+NAxzTQ^tY@j~DAKJ0?gk*(IgT)M5_uJ_lAGf)>1b6%G&&;5i6q$5Jrm(j
zl=|rJ^9+_-icVTS7J<aF$zXH-aU%0aLoy%Ha65@AG#OlcY?!L>34^l}ogso<ndda4
z`!wr0Tmc4U07?OzfhEcXP=%U*)+qti5d$pK|2ZE-DpQVHe}eP(RxkVjtG`gG1ZzVi
zP`XV2%LNKvhF9oWhgadXA;YHE8!^28I78((&rtGqZ^B!1+x<Ra_x9N1*>-=7?P|bj
zL`twu`3kkYGiE5A$ne*M^1JgZpDB;+%J81gy$=mPZj62#@B#6C>dO`K<wFSJ<G%rj
CUSHw>

diff --git bin/src/main/java/de/framedev/frameapi/api/API$Warp.class bin/src/main/java/de/framedev/frameapi/api/API$Warp.class
new file mode 100644
index 0000000000000000000000000000000000000000..9ea1d5fafd1f98ac2e058ccae1f42cb24226982f
GIT binary patch
literal 4984
zc%1E6UvC>l5T8v<&Nd-#Q_6qZZD>mp;0zK^4MJ)|BP=;kDIutjo4c{I&E4*GcWvqq
z#0TIBiAwOo6CVmOyB8-ebz?_zt5TxV-tF%E<~Or{Z+HIs`?uc#;7j;Cf;k3FYm#Oz
zq-s78ebG#@*)bx=6#HdH6td~l?R%~3KMGSsP+@Q(U^Ah*&F}XgVB#1=nNEHpIfHt;
ztrOv-RvQeezOExPWU$cQqA%4&NvB&vFNLa2tva&XGeez)ucVUhYX<YHYkLeTn>xh^
z8VnjIX73uKO%*P(#?BAQpw(F)Q=aI&kXhj2h0*&N=Jpn^*LDw(yFr266U3e%-pqux
zJP}H1$M=yBIbz;&Tv{$wDh;(P8<41j230}^I!5PIe%K>f%Ht%E_~zNtNQzYDMTJNX
zMHl%>it(^R<6(!!lva4E(Q<D+7cM#Aj@0o{K_*AlX>?*gI&tv)nPjDPnHSnPa$-!o
z&Jq6sL>OeLUtXAfn7!0EhmYJ;z@C#685K_C(x!V3IfuMbkhZiA6`C<Z?lc$SPg<{i
zE9}9xC?=qGoRMmrol(&6yzt^Iwp2%({8>g{ITC-$nm{on<cYJ|jPdtHo=w6(H%DhN
ztG2bm!3;1h)ko#DnS{I3J3N%*|55icF_^f7Ptk8V%y%4}LTBXa^WeMFlUX{kk<%l$
zg+n97xN|`X>kAUorJ`QDZHyTBjdB*#W@<9pxHJ5Qyxa<_ea7%<Ts<SF2hL{S`M+*W
zcl~mB;oDsumf+GNybf<NxV+jvxptS6WW!&}8*QoZyI#JJX4fwY2Fw0Gp6wkilB3Fs
zJCK&a7wt2~88*m*Md!1_;{k)KV|+P@HmvPc;R6QOP7es&;&lc~i9wp1o_#9>Cl;;f
zj}#l-f1AECt{X-p9rYdEGYOXZRcc1KvJ-Pl(P1it8_-5@gTearT|xa<23=Mu=cyxD
zXK?YU5s%<gGCK4og7}FTP3bPVvMsHp+%Ao=g=@fI9)MC6UV{b7)ghw1|JEo0)iRm`
zi}ZdYM2zMsN7BczbbtB6udw_FmFD0wy%&On!CUlREK%?_yhGm_ybJFgF{~5A+%d!Z
zPcu}04h(Za@55uu>%q^{^nMx9yK)A-$0K@Ifsg31Q}zBl)|;n(^tl!ID72c<a~*CH
PUo(^|@G-2xC-B)nM<rI`

diff --git bin/src/main/java/de/framedev/frameapi/api/SavePlayersInventory.class bin/src/main/java/de/framedev/frameapi/api/SavePlayersInventory.class
new file mode 100644
index 0000000000000000000000000000000000000000..b9e2ffd4b77fb24d93a029b83f3d50ce3846f1da
GIT binary patch
literal 5233
zc%1E6TW`}a6h2<d(uTrdW85#^xOFe>3r`Gq;3g_%4Cp}O(Mt}i*TfFCQ&Ii_zX%B=
zc;`nUoP>^oQd$_73RWqRn|$XxpD*Ve#~(hvc?SSj;IacV1Xi{3n-Sxpxy^d48DR67
zVi5+|%Ns1_&Gc%s9zF<JAC+#29ttB>-+?lLLz!L3#8z{Ca~pj_U^WhuEiP=sTeHlo
zwsDOMZf+1L)mNSnDBqF+I<TL>+!yORN=a3L1H^sxSSZvo>|sEC8O1zghD$+XB{xHi
z^i}FsH#$fI^h2gBC}w__Z6RF_urZL|7|3tfYncWTH5Jm(h#9{_jWx#?v6VY)ZpWgL
zjzuF?)fh>Zd*@Lsm9ZkI&qT_+iF6?QFCe7ani@zpd|XZh)6c^{g7dgGC{Pu=q()Lk
zO+QAr+KS?k``l2S#3@(`ZB*jh<xcbEU0<PG(?kULj0+4JbS=>)T}zo+*r#0dWEUy3
zPC8#RxYaZq#t0YznaFlp#ScSnCf%-8Sk%J@S=tz5pC_T+>u5jp3PrRHGZ@(fH_pY=
z(F}@<q8J%Ae}p;-O&iC#8RcXr3FqE!V;dD`A%9soHb0J^s1p-`e!J3#-kldd##xE@
zxjD-*J!bvb0`uLuo$BeBd?a?YcBgs}{<HirMbXt-|NC+Hi{r!v7v^f<z##&Qb??h&
zHTSccZf55^TT1UI(I%>mR5pQmPx>r;^0^zIAC^srYXaB3U2M4RPP$sp_tdH91-*mW
zfe_eV_wr{JQ-Kqtd~<^B^nVsLQ=P%~s_Jx2$6i%+ZLSF=3%<!U6*x_1;=SxL#j*Jh
z)?@;1TPDiKyF9I{CyEMXc7S6`c1xsRu-TWtxyMm4<#+lHED@*-&I24cZ;Nxf_#C)M
zU^b^BP+Q|#TiqMhr-mgUPy(>`dDsWDwpF%m2P*bn&5qMbwguq61^4NE?KK>HZ~x7}
zVSAs=-lUcQwHyTta3p)?z~T_Y%ug^Jg=2*b#|s#i3K>q0U^rF4uwKAWf-@QFES!V%
PcPV>U1`5k?0ZN|$)ML&;

diff --git bin/src/main/java/de/framedev/frameapi/api/API.class bin/src/main/java/de/framedev/frameapi/api/API.class
new file mode 100644
index 0000000000000000000000000000000000000000..92f7d182e8c95d7eb4409c4df421c06afa15439f
GIT binary patch
literal 13851
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
D_fgfo

diff --git bin/src/main/java/de/framedev/frameapi/api/API$SendMessageEvent.class bin/src/main/java/de/framedev/frameapi/api/API$SendMessageEvent.class
new file mode 100644
index 0000000000000000000000000000000000000000..f73e8aed1580804d18df72ccb9d7be1ee78c8823
GIT binary patch
literal 5403
zc%1E6O>Y}T7=9;pV|$Y(A*6g4CZT{6V9iGXsR5)mZ52y)8_A(kkCWZ8J<aZnJ2STG
z69-OQIB?*=A3*{M?))gkyR&w(Q8uvyZdFQT&3Ja^ndg1pncew#|NQIM-vQtnd{KlM
z0-Ht$)tCuceaQN(8uDsOvzUjxpB7kGRFiaLr*^f;W!T`xur|Nl=h7CTKw!!Bi<oRz
z@9jP0fhADtFd0T%8v>W=+iAHjjNK$K+l|<OYsA!dTnX!namq<xxqe92v|7k^(&bAb
zh5eeqmCC5kaoGBO0);IV@**q}SUhaMt+mo6c!4Z7zmb|774>;Y0~L2g#H>(~cD34z
zcx<jyue{sg)DF6wCIo&$;BQ6D7#c7sm8E-}jyQZ;vs4%=WGFPc9SyLl#Wj}!8fa-1
z<MX2)wuRIW97#(=+@wZAj#Wuhmj(OiJ6#L8KN@*|H1a;CH5w{zXktBPHt0}`-TC7#
zn#^{`Y4nq6^quk($x`bg?ka6jM2=tQi2ne>O|nqWF3dcNo@t!rkL^Ujo)u#mB_GSB
zbo(4~4tcI1$(GI~*Ex;UD$3kW>Xo;d=`>h(3@Y8n$AIc8NcZfgX0aw)O2;P|eeOu^
z;0a|6#e|S8C0nB1)052CS@9289F4<2F`?6Vs~Sr3!4xnxnH<BF9*4Wx+us-YdsKR&
z{^$K`md8ztr_d=$eG+^(dm;+QIypJA!7SH;<(&&sSf61tUMjru4XxQAStzIR+DuG_
z3wOkCp~^e%Yo9WF5~*k8On}o_cmA(Sle>^V_2tfk1$c2D=3s@u<x2jwe6cPhzuSxV
zxZX`ZisYJ)`*?JJ_>l}N3$`N+fv@WSA|SCzVD2DDkl0>mbDIf3pqR?~k%&YIt`Jx~
zJu+~edIUUVYK-C(E69=)sqjn&Gk0hj-I_Dmr=`jf5sA_=!gq$T5fAAPq9bLKX=tjR
z4tO#z1WGsp?zWFZUz357#+}FPw&0rSpfeyaUz2z~a}f+~itqt}jmbwBWgZXsR0&)h
z7C%O>GF}wnQv$Q8(jt6zBrueY5b9|NW3aS~?~Z|0AaDTylLr@J7E3cwgp&I&V;x|Q
zHeep}OD<$}!Qs8%VBx{?(l4<5hr?dRd=@c)=_SnPUD<<|;T2am2d`!rX3oq|hS%Wr
zA;X4KFk*P)I78uE$1vl#-h{U@mdUC8zRT54VI^049>e#!466s)$7}c@*ZVbiJLCQ7
z3_oVPzY6b6Z26~L?eCs2b9oFu=P(rDJ%_5mx|_8P*GBO7K75FteeRwM;KN7o30(Ud
D@1K#+

diff --git bin/src/main/java/de/framedev/frameapi/api/SaveInventory.class bin/src/main/java/de/framedev/frameapi/api/SaveInventory.class
new file mode 100644
index 0000000000000000000000000000000000000000..c7f4223bf9fc34c675cab05055655f788c65039b
GIT binary patch
literal 7343
zc%1E7TW{Mo6h3Uy$ad4DOV_PyvyIJe&Mx*YUANU~dP&^HfU;hk1nBlKFcNFCkwi_R
zjCg-+zy@sZ{ZYe?B-^nUxzZA$>w^r4rl^k}4-cuskJR(OfBzEzuEX~loFQ=C_l&yD
zgj0XUdaQ2p`cseD+~mDD!(34huQu!Pmeb>ol3rhfSppZL3KnxZ^#}XUxS<HlxmM5-
z4rcUiq-+qVh+!R{Kv~~nes`O>_@LYt9fzsF;{=w6<!k!xZfmolj~Z&MBXn`Z@k3zm
zbC1B4;}sO|a4&+FM{ok?#;DM$HQ@-gj*x0>-|8NL*$ruO4K89kM;&T<p7cs^i7Y(d
zbv*7%tH(`hNZS<_Q$jk__2j<AZT}{%ly|zEn%uCMhai_32du;Cipgt3SJsBEtl_mn
zP04-gNJVX?j4oAJogcdB!SU)iF12u6YN1uNsbq2M!gi&n&<JWUCuH8|bZGV~iHJHS
zWG0yZi}k<Y0wwYTO0QEu@`Y?j+h&g0Jmf}zZ+HTRDoGhteV13ty6_cucp5B>3n`F6
z>`6g|fhh$ticPsRn4?)yFwLd8tX;ep92^LhILs~EwS<8W{lE>al8&#uzz9b?UU#ai
zRQNP-O#W0j+^o^<z*k{JjjCCFiVK1~;FKYCcakB~cxQmT!2E~Nl9*C|FqPXJJCWx2
z0X7BIR-SN@-kbjndT6nJs!{oYrg-}W4>Hld^w+WdNKdqOT6xyi+lnb}BQ(vAPo`Rs
zWz-*YKd@Arr!_M&J7(SFZSDzXiC+^(B<s9<q&E)@?nX*0rTqt4kuQA)WQ(I2%sOpz
zxrE`ueTDl@=)O}0qGsrnEnM)d)Xt0?xM4}3M-_8&d2Vi+?uye!^>h;}umo?;!y;TJ
zaH*;v?RMjFh<3w^I!dT`o4vzugG*pZmj<);7)Eux9~922uD}ib4gDmi2jL!FIs+L)
z;7(PakUx##ZR5C!KP6cGV+klBKWEsd7b@%IDvQ8*OER-{bha{I)#Iibt<}8}yievJ
z!x$7|tq^O4SS!><;l5YYeWwXTxJdZpD?NeBRXstKMN;GH<G@kE4$;CFxIo+unWGg0
zrNx3iF8mrL_?Qqo!}?Ol#k}Mqfl6Bjp26>nNC!@6xag|{%E*=zo~A`dt7=Pdk9kJ7
zuR)!FHc(I+e1Wp^UuU%%e1&smLXT<iHC7t9MT2kfW-v`P_zo50*vBUnkQWmMPlH<o
zO2czr4Q``O4dsjmcL~hJ!b5`%EDbxaL3838Ry@B^)@%#k$J`G3z=vx<U<LqYQ9GZ7
zIn1G5P{Oo~`7=<#+_|y)c}&m4LR1604HqzdE&ALxgHHh}f56g{rPqIhH~xz7Z(%xz
zn2`4hrt?w00#{)<DtjB=8Dls*Vt6-!p`OTa4OYe&W=0I}B{1AdWcUC+MASzER2Bb^
u_h>bNt&_ku1D`~wPvJ8NfA{fPMvv9tbNCWDZ@{;36V_lI?!Y}nZ~g-T$aIPT

diff --git bin/src/main/java/de/framedev/frameapi/api/OpenOtherInventory.class bin/src/main/java/de/framedev/frameapi/api/OpenOtherInventory.class
new file mode 100644
index 0000000000000000000000000000000000000000..0e5f3a58866e77f1a529763e5c2fb3a3523220d2
GIT binary patch
literal 7589
zc%1E7dvn`F5Z}v7wwp91rL?pusNrSvuz5r3v@}i9#-Nb4PBK&Y>mpz5Yot5%bP5Td
zhHt?P%)tMA0lp2xp8SYIlt>g$X{XMNl+)esez&)~-d&yk`0JP70N_*j#)1(7^PzGp
zKINkFi0;u!gH?7E^;v`MwHq|x6?3fzOswk`Q#G;2gqG^Sf-wT;;#nRQ&C2@rBj#!X
z6M+{sxxj|AhP+h*1>T(#639ENG;FQW00;7Q-V{_viV>LY_AfY_o3-Vt(_5%|6QR>R
zj&CD>n<)a9k5AC7$y5x__uvH1^iiQy3tVu06CuU6e5EY{V@tBZEI5zr9BybuDXDUB
zflSYD3dKU{?XiaKN<ZKp)m#cYP;%R2et6w3<TqN()&~Kz4MEuuls8&R{y-67yHp6N
z?QLdvdCGQ8+dQ<nXmEvk^A2!mhbbmpTx3T{AD<sbIM%Ssu1CYr-r*h#+Y2=qcA24o
zy1TT=?70RjcMVtW8m^4joZXNtw9V>1)o#m18`^9?z$N>qqZgEo7nEb^Pb6!v&iz0t
zjY1^s>zPEvo8mGPEPU+!FStna!2zXe4k1q+vLt<<ipI)5b0ds42^d>To5o?Hkau{f
znP6!!6Qfcfoj90+GC?v0(u<P=S#W@2#esbw%Vpi-?PzzG>qIlx{J`Tb4u(-+q>>`k
zDsqj*+c~gUGLbzJ4YtFD3H57Hs7=s~r(vYW<Ro{QO_92Flp&M7GeAxe|6ZJ)Q|5PE
zxz2DCX^QV)Q&4rSxJdfl{A<uXj~=87H8{|c6g#{bsW|1=(Yz+}Kaqhl?(bxGPZ{$(
z)}-E|YDPZ#_{zS^f(*iDQo`V@HyHoUBy`r_dWH~`Ex6S0JIQ80p+BpDbxk!hHceC9
z!xJUQVwwjmj67XuY0LD)ZnG}4I#Zl_{Kpd<Gn@0=cd~kHZ9OycX?wsRQ`LXUjDyK^
zL-oC|>N`z0D`sD-nDf1~#R@P37bjsFE)lp;bPivx+c6=2`JQ&LN@~B=Z<x1b0yB<u
zskcQjs^D{{b4<5*NTBLG@ri{w7m%V;t`N9YbdHoc)$U{UxSZc7i2hv;Y%(&H;cQ@7
zO}!}96na>b=|x{gLKC=JblOTu@TgKP2X7MiGlTm)j};n$DNoWy?eG|GvZst%X)6as
zGXB$`_C751hK1g9oN9-a%20jJWTA&aJfwT9FNj|%9)3(&@?^;3QZO##t~|h;$9;q5
zA;$o|X!zoYj%C|fr@v^d=AcZ#IX(WH@SnZXBv7c!NV)6|H`U_B<K<ucZ3D~DnlJ}$
z@#(8x<xElKwhk=#gn-p4zAX3*%hG=w=UVUu>f=Z$XTdy9>ZsWQtS_yOHZ8b;r9j`e
zvabl7PtcqNiv)7rqhJe`u+BBf)q)iQ6Yb<@!CmY%zGFe{$S1dUyv5YI#={U>8>om7
zt^t8j02ssCdmJXPg>pd-?|E#GKml84`kp88J_Tp-K8}6Ua1QS;#h(aAaTK8NE6hBc
zdHH8}<@Xr>D&8j$V|Xv)eKKwr;0nyfeOKYNK8Eog!|MqQr9_5nFxSU0+GBVlf#F6X
z!&~rnBEvfg40jV5O7JeC-s_;=$N$H5@<9Syl)yF$l^FFQd<5q2YrJMr=N}{A=kO(5
RhXuF^x8OD`!yQDg{teDCzbpU%

diff --git bin/src/main/java/de/framedev/frameapi/api/money/Money.class bin/src/main/java/de/framedev/frameapi/api/money/Money.class
new file mode 100644
index 0000000000000000000000000000000000000000..7dcbc58366476faf6fea025a5eeda4779a1d6e11
GIT binary patch
literal 9963
zc%1E;&34;F6vyw_A$Hs}Uu}T$)oIE{0>y^X7HCQ#X;K<$CvB3ZG`q1hw$(}+Gm=BI
z1U4+#@B};t=Ku!|TlQ>u0p5Yb9Vt$1JW8xaP2GbRQsmKpe!BP0)r_u`KmPgYR{*#G
zpJyON;Jhb|g2ODgaG!0lg2@XN$sBI-t?+==t%BMd;qvW5N$oQ*KwvD8+sv&NR?7Fe
z;S<P7UbQ@*OKuV%n*@d`md%4M1O|)O@y9HItWl}%w4Dgrt_indRU4A|mT*xpc*Sxp
z|0;p>^vni<fosC#85kunx_8M%DTU0!I2pTo$Cca@_7*p(A)LBp2OL_LqHJ@=yG(OK
z>orbIZrBVhqjhFHU{y}1OrCGLns2(AS6krf6g36+s4INxFyE+AA0hl<9X)M@VD$1T
zdU<7A{s3fXiRILV^wA({Fjw)*oHkuZTp?t&XCy(0EO8jwl2f-W!}6)usB?(}?s~p#
z7`~7+%);pzYI(Hbn!IAUI8YTlgU764`>pCcEj2t9Kc%9~RU;dMTSU2`qDp61U8utr
z>I=%Kzg_3KA(h3+NZRg&1N8TpV;`jN>cT6Pij85oWwY(BT#aL7T>ZQdHfPbU#9=MD
zKCfy$N|x12@jD9rL7`e%d}#1`uU}k0VYMn2M5CPO%~QgKB9Uy2v~1r~%MIJUB`nNj
z*=>;ap~ba1()q{}30}N6QHkWvlDE##pv8x{R%r!mw~P9AUs~=#_drzVCv(;KIrO;a
z!=p*8IEk_kCNfHiBw|ALNAlGpqQm`~Flm+hK?zaXUi-qHZlll8iWE-pw61tG&>^M5
zrKc{VPB@n5sU!>pq1o|lY%#@STVaW_<YLyg+j0(T2nCOAQyV3r@WqMibu<?bs^XBb
zJ%k^9ZC`r?+8m6)iD5VfCkaeW7x&&UgzMC-dIK?9MA&k}DRUVtdITnl!eI6Wla~6u
z(>UPQERVp2V*EEMvjmPCk~5#r8HQ-MK3-zF*yaXWl7*KDDR=R{qn8Sjr?8;I!I0b$
zTg}19!f673J!Nr^sYjo8S2EQ#3sVGs=)&hGS;G;?+Jc#(y{{4Yy~pi6xaLHUnrkqD
zQyo)4F??8=&B6>xeba@v{Svlc!ahzE<|{MJ=Ii|b=Ier5v)(4Dn+eaI{aX0{TMH8y
z@2FCAPfH6~c$dJ}31{9T6xV8HZI-Lb*eqN~-mXWOfCwB5pK=1zvhY4heRWh;^-KAF
zDIc|-G;fwHTqaQ3KO<u%B!OYeTW$GB-8pS+hPP|0sAE~%R7K%Pd$wS=woJyVacxg9
z&)f%CU$%~kYC@&zIoUB*J9<yweqwd+zHOoijLq#V#CuJnHRgpj&pBaLsac}Y<B45e
z00=wh)<i=ZT+Q70BRCO!<VL%eT=kVS_%`a_u()K>sBLFpnZRIp3ufRJ*2Ai623B##
z?wI~Fu#Q9B{Jfe04CwJT!*HldVfwA($a!!E2&4gU%fT}+h({^NKsNY0glz!Nq2d?}
z<NkQ??+s}@0?7RgBljl8euRnN0_`O32ZJ*Np2huesKVaQ2W_X|g%(0;m++#7a8gTn
zIfC$thHzFxNCA!T;*5rn*AmV~5MI>~E@{1Z9p2D-F|8q7(GuQ-w^|4TyM%KZ!d)#P
z4+X6a?`R0$Y6<5fY<N#Y_)bf>7(uwCA$+eTd=NqSP(%1dOPIw7>*Amz{HY~;1Xo)K
z>3s=*YX|@zckcyBYYCr3WR#9DuJvLrh7G5+g!vdYT+|Y-MdYN8u&gC4#PDKOOIVCS
x*w7NL#~_rogiql{*92EfSc*aTQbS0?XMyS_6odS_i`xk5ORxgBVGZs;`d_Ta-bMfb

diff --git bin/src/main/java/de/framedev/frameapi/api/SaveEnderChest.class bin/src/main/java/de/framedev/frameapi/api/SaveEnderChest.class
new file mode 100644
index 0000000000000000000000000000000000000000..59e67fbd9c98b1e09d74871df6c8b7b332341a2f
GIT binary patch
literal 7416
zc%1E7?{CyL7=C>%&GlMZC@?l)%oGOK0e6FeCJn?ipcS{J{MZ#Fq<wJ{b7wBGBgZ*$
z`^S(#8sGOvAznM}QCQ#(Xe+kmq$ED)_2Vbb<2R3!zh6H43ji*`B@ZeDE~h$Z#!SfO
zW7cQQkT)M`7W0tz^8!mm({63n=gTtW`bL+h#)C-$`&^5N$xidm`ePm#0#iwpb%ex%
zzlxYwuy9pKVXhIFuIE)t4+u=&P$BnVhQR!5jAgBruEJh2H*;TVo~o$NLmH?!5fL*&
zNt$T29`QK+iPomqx}1hQh?vHpgatj;;dC+NjZONEP5KSo7HOz>N~JP1W+v!TgU$Jq
z1W9jgj$_fVW6`jz8t(+ldlzw{v_TRyVA3M5bGk`;+anwyp+<!%-6=zMJ;WEO;gaiu
zlhi26s2L=@Hf`lUBBT{3kqCsLX_i<#B~zobz$i`gDOO*iBBdEl#79E%ut8U|)L13E
zX3>BO*;hSI8Ftcr6Jaa@V}xAKdOc)VG!S>)>>ts7xzDA!#bg+b9I?9*8*qIu6UH_A
zbnfkYej)J>t#3)oN9jS^Xdyc{d7Ep&BJpS8C2b>)3;WoM{FKH!!t{fs@S6yFr4&jj
zpcH;pLXIPaJYD^sNy*SW?7nV>qctk^@8<n)-C2GT@Wi>Q9aPX*&x0|>{PPgUxOehB
z56G6`aoeEX962V&-Till^%<T<$|Yn8`FTQa)7-B?4d!RTgM9=J)&1AY#XJGI<>b7N
zUifwvuXDX-J14N<tAIrhHppyLPMWSr3H<1P)RNb(WtFsEl)%Bd|CTj%JdR=_F(T%e
zC`2l-&tL3?xwR|yJLhjrV^^whgjCLtvC=L5a%qzC&YS|R1>T~-p(92GR^j*#NvibS
z|7A&8x3oo4L-XV$wMZ&I?}VgE|Ng)6?*wLYk*x@wnksxtCXfGXBvrcp60(HcW!F!j
z)>fGg_=>R3{lJ@6+<l(G<v>f?*W2#pySXK}W;*B&Jot`4b@P?H2j|fE+YUWw;7Z}G
zMB%~r!^)w@@!;aHa_FTA%&v+w#hkf@1XDNx1SSA*zW{q+3QK#i>_HXx)9(A)1XS=?
zdk(dS3$ssQ?gjp<z<%6MVNBi<VAhpuZ~zXvx<l{<MjhUW`Vx=-MEj}$ZLtvTC>$G!
z_H_Z;#X_`ifR02vQGj;65bfj`Xr~I${wP43fYUDO4AjB?e!y)G<CowpoQEb{fQeUA
C)SMXr

diff --git bin/src/main/java/de/framedev/frameapi/api/energy/Energy.class bin/src/main/java/de/framedev/frameapi/api/energy/Energy.class
new file mode 100644
index 0000000000000000000000000000000000000000..bd8d2c3c0cfe89588d5772cd705ab84c657e9df8
GIT binary patch
literal 3252
zc%1E4TTc@~6h1?Nw%a05#QSByTkB=32_Z&|4-$+uMMRLq$La309oU`S%uXAKKg>iE
zefLKh&vYpiT%}bBJlLe|+1YQtIp>=*XU@0ppS}RV96U<H5P`W!Ic1*-S>9xAR(5&0
zu9(kV-i{3xin94~$yH;gywv$i!!Ut~&IFIiMtP;S$sJ7~AEQFW>tdTgp}G%Q(@Mz3
z0)f$|LJIwiK&n{UATYcbxI7Ix0^|GOC8YwDfiW_&`c5hy1zwxG)Cv4hcub2x(oh98
zkNeRRYGv1(oVwicm_ks<oGsSibk^l|Hxj!WiEX~IkF(SbctmBOsn4|2q#9ZHc8GEG
zvY<M)QO7pU*++54z6d`Ilt!1R!=zcD#%VW*6F>y2ag30PA9}(OnntaVE8HU)Y1MLc
zplF;G#S#?}ZAlk%LZY;Fe1kS?dAb*E)8$rV!Z9eyq}hv@xCdlq<NT{g%~hQ_NwHHM
zP)7Am$gOOgbVq<z>U9s-eB-el6Tt5YSF4FC{Il_X96q_peQET(wY6ooEn$&mJV}W!
zPGS$@^!&rc-ty4H{99}?wHU~{NIo2YCH5ei41l%3g7G}0VS>PP@#hL{it>0B$zHeo
z8dvKK>#Ql|fy2BFri6Lk9URt85fPZL{>dGJS3x%7I({H9RjeKeVxdyn$iM|cmixE?
z{vY9fClkmq*B7!Yd#+gB)!WE@g}{eC<UX!4fEm%)&xpd|j3`wyKna;Yr3rD$>j{d>
zTsIas12+g9aj*uI5t~27{h-ae+h?r>E#>eR!c>Y}Jlg4^u<TT%xzt6ZxzsNOS4=rg
zY${7wc@AChX}CvV?0_F>cz|7G*DfDuL}MY)mt_$}Xsx4b5zGK~o7nTB1TX@lXpN$s
zhD>L~^uj5$0Ibhoy)WcH!kMr5Gz62oNHep5zxfyiQ*gF3HVx-`7*cx-=Mxwv6B#bT
zr5=W%J%-B(4A&AFuHtwS!}SD)$B7IxzldTsf#Fpm!_5I0RudRfaI1s54R^qN9(E8T
MP=vd1AK%(P0CLLFuK)l5

diff --git bin/src/main/java/de/framedev/frameapi/api/energy/EnergyWithEnergyUnits.class bin/src/main/java/de/framedev/frameapi/api/energy/EnergyWithEnergyUnits.class
new file mode 100644
index 0000000000000000000000000000000000000000..39a680b7662f3bb560130f41399479656f238535
GIT binary patch
literal 1538
zc%02tU2oGc6un-%r41b$gYhxGyo!hJC3)eAAzr2;Ds>ELV~9sLxotfXJ93<gO8hS*
zkl>vkg}6>A>!yk^2_z!Lv3*aD&pp2Ox9^|60Kj8td$7b{FE>$`3aP>qF%e;m;n0W_
zW1LhSk;%}#sL+h2VYmFek#=15UMp#H59$oo%l{LhM&ZHW1S88}<*B6bGX}NJ&M|}f
zo{rIjCWEz8Y}XiV8gPXz5tqSSClic$q|;0$!b+`pX7nJzG=IYV=Fu2=j8P&Cfie-j
z6C>p97=xMUU?w_nZza0TV~sgi+VWJ`Xv{6K;QNd;&a;pafiog-;)07fD=jk3w6P?K
zM?$#;2FPbgToR$pXd$GRW{HfX<#~~zA!k%>O%Yjbc;$0vhs&H7D#oEyl+chO)E7l!
z=g|S*FLEcup}0`afr@wz<TtBr?J0|9C?Y)F>8?~`lor(jmE3ABxSeL`HxGuxgjRT!
zh^dqNTkL<r>_Y=qTd)jQ8Ekg?r^R__jZ~vuSG;R|TKZ*?4$vG4sz(MJeI1G9SQzQX
zKPT&UEOQ3k{$Ds&y9}Blj;k34k2?J`4(#^&=dvWB4Y<kR!ylZae`Y3wmcdj{aHiWo
z)P;%gxpe+)EzGn$a^!taxmuJtEn;6tG{QvVsR#GS{&N~Uc)*~2aj|;98LXa3mIUt0
zJg1F4BE30m16@$yo*MO*VTD?+ydm8f!2b-5w;TRPXnm#860A|XQby>~qqbF{;2La{
tbJyX<97FvV!{!2p^@R+#F2Qhn0Yi;u9qJBjm3eKKu{zv^`|uEIKLE&;$wvSH

diff --git bin/src/main/java/de/framedev/frameapi/cmds/FrameAPICMDS.class bin/src/main/java/de/framedev/frameapi/cmds/FrameAPICMDS.class
new file mode 100644
index 0000000000000000000000000000000000000000..d7ec4cdffe81eba7c2654fc2cbac410080c6db04
GIT binary patch
literal 7232
zc%1E7>sK2^6#q>_*$|*mO093V_zFG}t+i^Ym6nH~Ns9ti>Zf6MNTzId*VzdL|0s{&
zJV(#b?|$<i>haDdK!8oNlsz2vaB`B_nf=|z+&g>k-J8Fj{PqWc>v(A49K-cUIpqeI
ze)$pK;$>HqHxzFOS8TN|cqq$G!;Q-GW_D+3ai%)EY@v@~G$!!4Un}2Ve<U2ukblfo
zxFJ2k&|jISaf-omHfm;>;ZnRb6Zjjl)>K@}z^D5KSNKx6^D)&xYeFOpgN9L+`@AL;
z!*ER8o)TFu#+-M#7S|ZYD$BAFdSaHQ^MPt`O_2O*UHv4aj_>a)yR4P;YjnRq^qMv4
z8(php0JCyS`cmH}J&LWR$p;L5Gl45CJkKz)&ty)iK;`iw8<}49m52gwOSrZZG(zdc
zJF`O-tb3vn-Lwk>D|KPJ!tuBwP{^H4+JrsfiqfvFOS`r%8Cy@-ZXhDt5424?aq6}v
zda)gnjXUYdb0y=sl2NPFom)#j*(Xq%)UX}y8`kT>-c|fRiU?G#wBFp@l==*LhCD4~
z{Itm+OPChh>BKg*^b&zHL8HNacWzraO&zENjI9Hk+j=Jy#FnoU0mVx#dO<5P(!%cv
zqo^Kf)pSU9)B|ebcs7s&sU&0k8gF>L@LBHV|Fqq9md*@mQgK&(j<d_Ij1E^1J@_0K
z9#<UM@-)C_+ifRgkz`7TVqVk?jT`o#V!Kt-6(?;O*-hUS8`2kU$*wjdZEBI2%-gZ0
zzZGl>o0E|GK@O=DNCCOqJt{B71zZpMC6Dj)JYsX(jtEnnpmeTG1Df-lI`?%$_?aA^
zDi2Rh^#vZ)Gm@9y3QtGwWx!=YXSH{>im|6=uvAAdI}la=i6-hA{<_{cWyQPdLGPW3
z>y^Ms6ZccXx=Bgp<8H*qH~NXhorpL)PaflGEZ_=W9>O?YVYpm8`l4>$!AB~TeeN|I
z>q1fOYB~jD#;4u`uB4f_7yEQwMhrJ9&(hQ|9fOGUT@YT#Fj%a#HcImIc#|PW@t&V$
zs$sBdLYp+tFkYNIYL`4F8N3u)WfsR6E|5wcftcZHlEW$;5K{Af##9P5&k|y$36WtS
z@Y|0e!*sE7;E|l#olYI~-wz2ceVE6GEcZ(aH=gC;vpjs3hyNvcm|-~ZJGwm#b0-W0
z71I!+R7vlvHJ|IIBA#nm@Vs^O#%)R-pD<LP9(9fxbQlWDK~p)R^^e2F&JrN*q*E2L
z=$rT0xbvkKq)=Qr^&JbhC?~fiS-4GA$)T>Bg=sSQ0bMNIWf<!0j#-$c>Y^ifTbQTH
z#b{$;!6<aNsbS$OqUdOsSf~(%F`9*YRJH8(=qxPJx;f7lzGdidoe&Ev45NqJ3l^xX
z8tQBWTKN9JpE@lk5U47nh^|)1dJ(RIAqQXp1)N7eT@_#<ACCj=d7(WY#85mAx91ly
z5|5*}NaGlNF45Re9LI5)exHl~m&)OsLH&*^Yhy3`ikJSR**U!0MuNVt(eF@vU4Ts*
zf%s40^)`ohhy&Z>@J0fM)tEyp1#jW)4m#}76%*)w+@s4A`rSl%?<LSZ-lJnEq1>_4
z^Lun3B+&hwuv3O>_=r%~W9-KXoNgTDl>0k@Qx2cTsLyaS-uD`PC&)Kb_#9v04rVZi
TFR_TPQN?|HgJrT?4&VI)JLD@I

diff --git bin/src/main/java/de/framedev/frameapi/cmds/TrashCMD.class bin/src/main/java/de/framedev/frameapi/cmds/TrashCMD.class
new file mode 100644
index 0000000000000000000000000000000000000000..0f126b34e694324cef3b9de6da8efe48fad05928
GIT binary patch
literal 2450
zc%1E4TW`}a6h7X%Wewehv2hz0Z``_<6d|4{LckbeQp*r4lYl2T@mjBm9obH`{tNyM
z5=ijQe*$rmwrqut4zwp&r6woN=PzG;zH{O)-#&Z-fV;5jz!-tsM*F3R30c}@ZB`0+
zX-Bh&2fW=4SS(6@6qr&?Gt*qFK5-yNU@ilPOg2iJ^<C~;0+Vr=G=#*UQboEl2KR*&
z_5p!>u{*T7O(3_X0`9;m0<-%Z>sl*41=A$=?v>QssIbig>Z>RgA+thB8f#S#d1UTU
zH(zUV8gM^k8bLAhTdcw9O2ECoa<8x4OO>zCKygE*vNU4WZ&Hi%`Cg2w56;JR@X~eg
zQd!>NY~AOJC|25{4C*tPQr9`{3m-rz-SFy3t0nAzf?QKk#AL9($Nj`AJp@CoqKw*3
z%-wwIixH5GC=P{>Pcuo(kxxlub>gSoUGEiFsW3E=0pAgl2Og~^#-<t0riC3UWLvd3
zW%!WhAj6Ra909V~=30xPZa4_*t<4rkt)o_^haG|1vRcT-ae!WgtTR&7@qspEn@h|<
zX9Vu?;Z8dwFTc6*7i2EDFk1iz<_IhnEBigGyQo=Do2{Vlo+nYA>l(v0MPR<7d=_pq
zEz;}WV9qv$A#kVir!5zIX<o^mAqYGyRtAhz?q8OFmG^dt;x`1AUMA9th+`In5vcA_
z`r=uuMTKsq@8|LqTqNY{5t{Nz1^lZOfPUCgiT3$Zk-B)g@5<~$iAAv?(}pUH#kYAT
zxMtdKb{x1$!0Bbsfn_X`pFRu@Ttl(}KR9p$t0dLoz^#EzMmK*13RPhYMm1a+1Is{Q
z9QQI<Z!iIq7>!}<z!V<y*&b&cM*!T9;J%(OyoZ_38Rj$|ClS+~2~fyl7tX*!Hns?7
t5p}MII*;c*+r$sH3q#lzhOmvpQii$&mm&QX@jrw3D?niduH*fi-vRqx3c>&Y

diff --git bin/src/main/java/de/framedev/frameapi/cmds/MoneyCMD.class bin/src/main/java/de/framedev/frameapi/cmds/MoneyCMD.class
new file mode 100644
index 0000000000000000000000000000000000000000..58ce2ca9a394867cbb7591bd9b67c04a4654494a
GIT binary patch
literal 7194
zc%1E7X>Z#$7=GCtvOTBivUXQ@a9OuHJLImrm!epkW^Dj@8IU$Ww@<W0+iWCKAgLh!
zWdk-~`@Y|@-!SZzY%fXUb25?*kOA2g`S9U;$$BXL@z*cE0l;VQwF8$3+%np)M@-22
zGj_=80k5|-i+I2fdkq$gx*r9m-cXWvw;B%|SR`;I1BXnu>$}Zo+_wZ4xUUE}UWVHw
zupEa;TS#np4Wv(d?g%ODT>|A=uWMtUz~Yt)xC1K$R*yNiwN|<WtK{;-CsK2x!b2WV
zUq!J9nH5UXSgU5pBl8Wdlpl9E4Y(gNji8wM2dvHMdcfU*C+@%#H}zzl28tUhm8B80
zeur9|&yQmC;^cgci<`#9P0eygv-Q>&QLMB@GpNsGO5NmiVEBv(rQ2>ZIXDouK#oRc
zSxKx2hXS`$6fqfWA8|jiN)N$Mt0<$k8*`*(O`H&i-114#th(oc!OEHd*+GkhkC8A*
zoZ6+Nu{!ZncY4=cZG#F!6B+Q9kUVf{BQZ9u<ZN2lr9vL615Oz((mBmAl>z@AGG^fZ
z=<J>kS-&*)IL2*Kw)@x#s6DHNY|jJqL&&-ljhY`QpW)LL`fjTgVs%bs&%F7j@^56J
zOtr+A3jD7{H(xYnS?Pj<lF!le7<ix(R4?a}^}Gq2Q{Lxw-^^P-Icwtr{_rl=<9k}O
z?hf86k9HHg+q$n%ZkX*OpU0UDAJ2M@WuDK=yfGf*=$LCF?=>}}l8KpSleO@afsE%t
zGcs)RU#kLDc(Dp)SR-()<{fV}dy})R=&Fa+_I(mHxyBtq$O)`@%4gv|(;_|ZcP`qF
zFa&OUv+kU63tU#RpEUyC*1S_0+#H;4o;B~MAr}8wg4apu&nY&@h2$+HZy|XL$y-R?
zLh=@pw~)O5TggjcMadISYYA-U6j7chj7^2vo@h&E6OEit=fQdB?7-d45>Nt-@rrFm
z!A796rxNY+??ft2R|aA;du@SQcSoj=ebFE;?IXc8(|)H*pt>U^*IOYoh8qXoM>#sH
zoV~Hn!h|1hEKoo{*W<tj0jKYb10N#dxd-zOe2g}qa@T=6YV0(G4t#>Gw1OS@l)zH9
zumhi?^(UX$JMiVH7gD`wBd8&a!Pa98lYw`DzybhVf(k6bGPc&hffD{M;7A#J3A~WK
z7h6CKK;>7cK3%)~GhF#SoAnZYFCzx<xQgG^tX+X?@N(Ao3cPxPVd)=+*M=~>H<aNz
zyn(1UGwfSKnBG3iM6M5ET0~z{)H=Ki>E}i^MsQUEH?jQ{9#_%h8hijBfeW|bcDB+N
Fe*^x5ZKePK

diff --git bin/src/main/java/de/framedev/frameapi/cmds/MoneyBankCMD.class bin/src/main/java/de/framedev/frameapi/cmds/MoneyBankCMD.class
new file mode 100644
index 0000000000000000000000000000000000000000..2862924263617df3cd3b3dbc55cd69f3a57c1d7a
GIT binary patch
literal 7213
zc%1E7TW{Mo6#iHzQS7-*ny$NF*lb;$UF==DJuF2rBu%jbc3Ui2fp$-{#MrDQQlO}y
z{yF;<12$lL-;Wx0Bs;6KIJKR51=8xlGG%`Jc+TND)<^2kzkdB4z;%4>;T*&D#QKd$
zDBXB04n!l6jeRR38OVb{L&U1#M?unP87=!;Lie^?w>&H`tmXqkp*xLx?Z?u03`=pC
zc9f<@vqhAf3?=Cs2Ctcqru(HEN-KAhp<Ek4HXbl6Y@0xOIM1;1lyk>gW0$eQF0B5j
ztxQaKAOr53C|03x%4i;2(+*{ne9J54y{_be^h03@6brv6I+CvkvVQ1I{m`3w=FK_}
zj7+#Tjz_}zUG8YSd=irvqvI(y^(;2^%&hv!Y=ik#6dUWv4DJh^QMV;OG<-%xK40oo
zI5(iNoq9X%^^_}+&jGn@qDbgq=ZW-FXY3dZcZLh@`mrQl(WU`$D4m=H&5C9cB&)SK
zVD6Ab$|nbtG|ucYI&n7jGj|3BU)$g+;i(SfzS1(N^H!R;tc>zuVV^5~V0w}ZnxuP_
zVLC@n4LME6aLINh`7>!1hS&+HU1yc<%mZ{k6#a=t%@1_Tr1Z}^K73Oo&b|HpkP>35
zsphzVCw6S*b^1f9wHWW#td%j7gVR*w%r4!}AGFUewnc88)!h1j19o=va4OK&$xrwq
zk6)xbo`wAxNii?!^%55C4DzdjDlS%0#u~%rTJ!0iaiFF0J>^Q1;&(TV+S2Z28O^ZP
zG`<KQ2&=OD;g1Whs}hE9ny1+Y(|)#W^w4mI?`q8>PHZ0DZXP%Br!iJPTE<(f{PPsM
z-9oAsa-xu`g;agPa_c30>J?J8$m2q)o~@!~IB)dGkuAf{e^h?Wrb=9<CU;dw3zu5r
zd^iuz8^=3tZZ3l}w4N<9XH=OCm0gosU*1-ks=hd?lJl1*B-HQd?EIIElG=T*q!rfh
z_B~u>@P;#axJJVLUq|O2HYngnZ1M03Dfi4j51&yhTTKrQhQ)kd4_`1;N6*wfe0Ah~
z)gTlEYN;fl)*ktg;0hQ@0M20zi&)BA9+v65L_K9x==w_j>a0XPK;<`7AFf^a1*?DL
z*h_R>A`IyBDqX92yMoJjE&uIxyfMPC_z%OIV;JgV8Q#V_gnBo}zBh*H{o_omI)<r4
dzGkR(d;sJuAXFJ2;v>}XF+QdFKPS|ee*+L*bn*ZI

diff --git bin/src/main/java/de/framedev/frameapi/cmds/BackPackCMD.class bin/src/main/java/de/framedev/frameapi/cmds/BackPackCMD.class
new file mode 100644
index 0000000000000000000000000000000000000000..3f4f5b99b41c65abc14ef7922a3c94d3b28f1d7b
GIT binary patch
literal 7085
zc%1E7>vG#f6h51zkz<l3O-L!U6gAvz3O4k@r4DHuCm{iaba2Q_VTPHtw6V95b~P)>
z6Z0Ir0?)t<%)noUci|Nn&dQfKM6DHSYSOW1R@UXyw`Y&eIr?_>$6r7H3IMmjGGL6r
z%|O{jk8)9bL>si|u;RX=9&=cuwL^Vgv^^&%u2TEp0k-n?ngJ68=3=}{MXk6~eZ=gL
zK&Fb<eQX4#tW6r!x2a#k{R*!M8b*o{xY{|tY&~#klc|!mB^peGQZ-8}2%gyIF5)Jw
z4gAOBaeKc;U?Dy%OR>*uk)k1&0<TT_ZdBt!qqlJc`phyHJY2y(bFEYPJ)|s4hZ(Ry
zVD`x7b)}@rz#^IX{cE9EAl(LYOj~+BcVm9jSF-9dFSui7r*`YibeQc@g&;jbT4Uyt
z!wMZ|6*|r;XlE^%j%0x;WN3OcwCiSw_p?JEz0`X@y1t-YU(jY19?#b5pL@PkA(~;@
zRA}ldGdqT#5+PNsP>l`_csN3yeWZ?_!!)1*mxF{wA$JpjW$AfTIO~VZjxezkFlH!C
zYKBdpWv472giNr0uy)<(gK8C(KA>*J8AzA9GCe&+SF1#4o+x~Mh#peU?T3FFi;g+c
z^IdLZga(nXy)H!%s>s&Qy!B4V<xL)#k#N{P7tAS`+ffkeN*LefHcc)X@_?BXJE<RM
zNM%3@$m-*BXs5xH;)&(5m!Tcb6^6s;7g}v>A5<k&T+{{uN)_+V81w{>4<S7V+U04J
zvCG?fm}{)U6sIo#KGCAn^QTDTt)2BloB1iohTzY%xKy2<rFa-}+&mXS@q{`v1gqCI
zY!hq0o1U`l%7Dc;{>OFqe=D8_*<}{y;iYMqg-Zk$bJo#Zua!jcTyWMx9r9)5RhinQ
zRXx+3x1>$oJ&O5-$L*67VVwsAZd?CicC2T-QnZBtfqOaYn1CpC4ofF3{5HYpZwOre
zDiR_082W(+91Xm$y%6U)8kw~^I;NC?B|?5kF`peNpJ%Lm2uugG!8&0=;9@Re0VKbd
zfw#!mjTBGtjOXe|Ne$MY7+<cW&QW|VcH=AG6JQy5hm8H1BD_YzY$VK{4`GJye0&>g
zp|#pwoxYT_5;RyW5YAh@LJkwANXU;V5@sa-h8>=$geo#pHrt55Ak6hhvUq_VYvPvB
z3rz8PW4OtgqROr}4Y)<XXv-G^KE#0e#{#AS9}}24CWZ{SgDO$?WWX|k3n%j2fE8qI
zd%=KvC<?pdFkqFyLP8iAutp%$Sr9c~1N+cRTn20sm~1)AfX|P8d}$RTtpD3Q2ykx~
zeG$MlATSO96WGqdBpw;KHwGEpPC*v*?**8~?L5rD`51)*hdJC{h(8aFBN`z43(P;9
zfAJ@{_*;Dc%ed8SfbA9BPRILMxC~d~bFacxM7`EVnfTvfJJ)5qmcVvBk?nPOqsN}{
zF2kD%44)=4ybZa;5#<vYwh|ex!@E5rdaq|hM{I=zw(k<y#^L=K^#R<7pTHN`uAu*K
X!fp5nK7kUB;x62WGOWXAh~D}eF{T?&

diff --git target/classes/de/framedev/frameapi/cmds/VanishCMD.class target/classes/de/framedev/frameapi/cmds/VanishCMD.class
new file mode 100644
index 0000000000000000000000000000000000000000..2f88e216f659093d9b0adef54a4461abdb2abbc0
GIT binary patch
literal 3588
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

diff --git bin/src/main/java/de/framedev/frameapi/cmds/FrameCMDS.class bin/src/main/java/de/framedev/frameapi/cmds/FrameCMDS.class
new file mode 100644
index 0000000000000000000000000000000000000000..503ff34a9562dd3bf1e5235a5b626ebc3c9943ac
GIT binary patch
literal 7102
zc%1E7TW{Mo7(L8Qj+Z8B+HT#Q&AQF$HhXP%ZL;)|3l_lH0=O;E?TMBcn~fwI6lEm)
zW5YIJd*A-kuupQ*II&ziotyf>50WVH@bKdyMIBOq|NHx&0KUL|2V)F3Bjc6=p~BKr
z(G(?5mUfK@q$iuLglMRe8+cJ^Gr3#aUavTqV3<$Qz6fijAFEHLYZ=Df-5SHC@}~0T
znhtkWEjGd`9WFCWdcw+E3=8Fo3L3s#r`t_!0%0jL_o!}uk;<m|$GjD5R9K_@sfHid
zR7i>PHU*kISy7>~s|?eH)}y7z3=?bGlMXI2%pH?#7^6)Nm)Pv}N1>6C_M6h<t_~W?
zPlMwPqpQ9QqB}f4{je^%CtY6{0yTuYCu))}da`(=N%2UNVxq|+_q2?7s4b_KxOHx+
zyxeb)9PQ;v;bNk2F$t^Kovl?r>7$LMFt{tigt{vEQQ)rtk;ZK0zU>PbTjifWP@7t@
z8t?6?o<WX~LyBC}K_EhJV_&+l)g}YOt>%K;gN7ttQKbSjk676YN;6SpP3#hB)C1Zv
zarM9_Gf!q?PS0^Yc+Lt>=f%NtCcqbKZ98O(>QpZEa1=L^jyaZ|w>}buC9WbKho0P3
zq4bJ;JC1BJW2VLY1FpiR-jiHVCH0dGeFe}5q(Alg0UZw6ilpZB9)&6P++y4D#X--Y
z1_z=~Smujxe`l*l$=-+u-6xHWrVM+H?5;0q*Nh?2uG{l1D}#z9Z!yq5IrnCFmA^Fu
zXJ$QTDD0#b@kQ%=X~aW6`i3Qrv%UpG65g=%)&s45DF!tL&#9Vq9n;F|<(E0bhdPgW
zT$#ZIyv}f?(76~*)|qo<@-9EbK~);^p}tI3t=bj-V_{TsfB101)>XuCyL{#aHZ5?S
znzV^0W4K&c>I@@?_Za*>7PJF%6tvXV;h~TW_X_0`qAnlZE_cTIbB2mP<*>+{fBI;^
z$YhO7*2rXyOxDO`jZD_7?yZr@>RyK7f)3lZ<rp^pr$;E4Rh0Z4n69W=C~Rzq^T{AM
zS2{CR$x#&;wx4fE&ge%N@)aE$S0?+4471PtUHTt@{N+}d>~B#-^nv|eNh6F~KXC9F
z*}ubT9F)j!p4uCAaFf(N5r~7^3^VOpoesWaxY)6y>ELT}rils;zNJ*soeoIl`O_PQ
z4!$GG_Kj8tcTfEHX=z8GZ52h7dPt3qa19LO049*fB&H~phl5;tou&g=z-yRE5!4LK
z(s?fZA2p7#1oa2zpDZl=ipzh|-5B1W^Auq~$5lGdr0G1~#9Qh0ZM<{Ha3ihvh~eD~
zhQ*X&EaiG1yshTRXXUPClq+P^%<uuO6Y9eh`%wnd#~Dn&WiX9nDMj7DCu#im=(tK6
UeTpJJ$1P(03g6%kRtUNJ9|U+WzyJUM

diff --git bin/src/main/java/de/framedev/frameapi/cmds/PositionCMD.class bin/src/main/java/de/framedev/frameapi/cmds/PositionCMD.class
new file mode 100644
index 0000000000000000000000000000000000000000..50c8824e0edbcde6dfc09e78a0762c1579882fcc
GIT binary patch
literal 3170
zc%1E4OK;Oa5T0$?xH0L2LU}*7<&|EX18|`T0ilRU39Zyp2{>)+ZL*EMYpvH&bLCGV
zfdqGc6k=>Aw1GqkRZggpVvTpd`S#oK%+CJ!`Q;k`Jc0)n%n*1OX}26OA<KuX!^$2n
zA7~bEk9RVIg`(^RUR2&ukuXBZO8u1uvjmn?yw7B_yxlnDt|5>Q{kSP48nrqyZldv2
zNMW84D3r3HjeP>M73FaY&JkET=Gf9&>3LWn`A_ep=8^I{+@r1vLgBMyT^efD@OcnD
zp>|=f#i_?#pJ@bz%x$wKr|TYf`r@6wcqb9RPCdmVDwUxDGj59-^yfz*sy^wDp>UE=
zIEgH0G+Va52tuU|%AhWj33Y?hzVN9dQbj^d38r+@X~gZeFlWe9BP%KhnDn-exEmX#
zhhV5tlu^?Sxm`%Ie+;A=guZZbwI~ib@+lb^9lHs4R$-+LDk2(7j~@uhJ%`rg$Rv53
zy7^ryWJk3*Ww=OdkYOSL6F_>K-sLD_+?IRTF{oXmg=|g(wBxhxSW(jhO{D3?PIYMV
z)Rdc@YNvDmxABaz!?a*{f?}d=ZymWjoM8Q`>@Z(=6(tWuGuEl(Nqr{@;>*$XHENF|
zvUHjgHrTLK1Phi4td?rWT`K$LX%}0nVGX{Gg9g`oNmvQ2Bp=n^?}fQHIBQxWBJj9&
ziav`Cw17rdMg*RhY6IoB*?-;qTj9qcqCd>T6_P7V&|c4~{H)6V|0*Y7@2Xh4{Iy6b
zb@@c)r8hvV{i;lQsE7=g=8fQ*X}8t2;3fg9m-iOj#<Sp$yMP621QrIW$bvg~7$j0G
zxHoWn&N7TZu`Z$rtvw7`1ZzMbhxc?mR$vbDXw9H)!8|?->HR&2BLMbSu-~r~Kf~hp
z6muS*dBkL%0L9d{;R0Mt$5!Fe35L1f43~#6Tpz-agR3d(8qOxa`}ki({0+DT6xMP6
F?l0eX30MFC

diff --git bin/src/main/java/de/framedev/frameapi/cmds/EnergyCMD.class bin/src/main/java/de/framedev/frameapi/cmds/EnergyCMD.class
new file mode 100644
index 0000000000000000000000000000000000000000..276c4c54430f9c65982f3cf9ef42a86b9515ef54
GIT binary patch
literal 3538
zc%1E5U2oGc6usWMW)0m3gYiA^28`|{6@n**5Mm55sbxqTlYl2Taa*s69XU?5{xT$x
z;GMs~e?i<N?Y2TkJ5iptNR4is<8zN=_gwq?&(B{0;4wU~V1mHINW0~L30dA}ZC3Vp
zxvp8jJ>Jd&7K*YPcu{#%a^2``R9{+<BQT$$eI^^_?b<$f4S{^<#|<Gds8o?}9fPMr
z3iFIWp_DbP?GearD34okfxz4m$EMawPs0q!|9B@gkCfl$9(7d^3ZEIFBn`Ey`8<f8
zP`j|(<kaJ?&oqKU=C)Xa(-n_9J?TzQx|2v>p`PLqmCDe78MjFd_U8v7sy^NyKZKKf
z2q%%{oXnQx7eT1BK^fF#GNG<<+7o_CgwhSC7Pnf$oDt-P3IZm*%>(YnM(F_<Y7}ME
zbV6<yl9e+AvK55Ba4}mHhaCBojEs)mggaZEr8O!d8cUDYh2)+?t8rwKHIR1mJ5<QF
zYH`XiNwc3}BmpBpx`W=~C}P-<yVxP99ixS8j05!6XPu#<#s|u*WC&=xUiWdX#+UWQ
z$qRDqf=+||S6w54wxr>Wfl~g%=>L}NEKijUHp~^lf_VaqrOHwH%l@Qkd7P`Dm^X1y
z<9e52#Urp#Q7-fMm=?)%w=rj$A|mjpa_aJpb-AEq*I@`eFID=SX}$Nj{-?f=10;W#
zhHE6ZIzrVxH^6fPJU75IJyitk9TjVrzY>Xw%^sRky5~ky+>*)8OGJiC^ICAtwA<`h
zutdP>T7m_4&?JA`L0Yg(V5ZMtEVzp<ne59fxZihP$qa!&u_~enqg_-M!7>n-#B&k)
zElfckqX~>Hn8te{JugjS3xNFv?Dq@BPcZu}#azUD9x+)@fMOcka0xD_ZHsW_7{k;d
i!_@%{O9L1t;d+X?0XHGJR`EBB_*-xrD6HW7d%pmqGLLis

diff --git bin/src/main/java/de/framedev/frameapi/cmds/ChunkloaderCMD.class bin/src/main/java/de/framedev/frameapi/cmds/ChunkloaderCMD.class
new file mode 100644
index 0000000000000000000000000000000000000000..898c78220440db42b222556a1abaa9a1493a12c3
GIT binary patch
literal 7969
zc%1E7TW`}a6h5Y7X-lE3<9_wVt>couAcPn~h%&^amLY8*4W8V@ZA}w9a-3@WWk?{w
zJHLQmgE&cBpwOuW6|K-#N@6>oKYu<xPJQf8U*3HHfZI^A-~fR;p>|3>6SDM%wOPsK
zrMhN5cX_*$V1Xz(z8jXx%}BO9#ayn-)yEdh5jdJu@tACsHfnFUV+hREg~tiZSDxT=
zl|ag=HwY{y*|L&#(TFrNLP>l#A9zti$QWHk0ddKFA%%HBAXDrVt-M6avU0fvc>?+G
z?X798bQ%^&{__i|d8oWLcd4WNKzIp14YaCx+z;>3Y-X#;smmRYX#@q#X|V>U%PzNj
zeYJaiwd1}nQ&;hjN@b|ejMJnB>+_ued-!90w45DV&W>f-d$V=g7k;3$K^fFxGN!I^
z+7sS~NZ5oL6HMubU5i>RVWtFGR=&@qySBrf$S6GkLye-0n%#hBGqGQe2h!)=W5#bY
z-y4P>NoYK&hCtT+z!MG{H;e*~=2J2>I&xxDb|!gog^G|y(&cp_xogvE6q<N?B-OlK
zDr8%=IAz#Kv!7uk0V6=VW4y^x#IO<WVuzqMjTW*o4$yOt?G6<+KG5HGy}ylrq?E_m
z-VQxUTGyrFje#Tb|8R})5n10@+i`d>9<s5wH*>y!musq=Z@-;&Y79M_<&(uVbG~Ub
z+#bvNy<cSE2rTB{5F8_Lyjb}j`*)V%$=*P|f+5JW$ggp|#cJ`+L!qJ^=DlQE#QARF
zoN0=Xz}?E9ZFZ~@$SBzjBnUh#R{8>v)n0b>SCOv==zf)kb0n7@Vc%jF=S*zevftl<
z*`Lr9e@kc1_iuAemGkYlvrdhnXR~~=xMt2bjfVT}IEO%XQ$^b0Pm-h4#s1hMIb6g5
zXkEtVC?Ygmnx}$mrk&=l1xp01?#kbSOBfLSbo^z(6#|F*;s^__VMG)+X2A-9g<nR;
zf*S~k<yvs7@07O_7!b%+MHpgg3ws>G5)eoM;FW=cFpsGWSdhkN0aICg9zet)$l?8P
za`c?S5`gS`II>+h`W6Zw6U=eE&m#u#I)V3GlFq_OIF*#0hBH4f9Q?*`b^yca0SqZP
apP(+lMTmcPqA(2<mf<p7g(6%>%+0S3maoYG

diff --git target/classes/de/framedev/frameapi/enums/MaterialInID.class target/classes/de/framedev/frameapi/enums/MaterialInID.class
new file mode 100644
index 0000000000000000000000000000000000000000..7b9ef47ac642929904e69422b17abdb2669d6bd9
GIT binary patch
literal 54906
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

diff --git bin/src/main/java/de/framedev/frameapi/cmds/InvSeeCMD.class bin/src/main/java/de/framedev/frameapi/cmds/InvSeeCMD.class
new file mode 100644
index 0000000000000000000000000000000000000000..3ef21b5d0068f14d67bfc1bb9d488a22dd5f09c5
GIT binary patch
literal 2451
zc%1E4TTc@~6g~rmrE8&p;tekY-pb21MxU%PDq<vQ#aJX!pQgJ*J9KwuGc(&z|Cos;
z`tFZ1p53-UwWOFB5~EGJJ$v?>Z@!+}&bRNMz5u{|SaV>4z+I#La>Rrz@39Um2fVzi
zS;Pb0=@~2*Wj_i`c~f@koUhlOIgleTpP@r0o8_&>9``MQ={QW9LZVTvAzuZJhe8Vb
zh(Ny7bFJ+V$gQh@J8*_T@sMLfYo%vkmgGLXk(wJ7c6dO26~!WCRwzkhtr{VZ%meD?
zw_BVB+z**XP|W-`YjV08aBm>p8%Xz3>8mtQ+)$}3jhOXY)Z%)+AEWA{>oE{s8VE0y
z<sHw~+h0Vn(iUY<pUITE!RbKw5JKsu*GSrJVgG96x{4wugN=ReCsyeZ7-|(|)OKU;
z=F@DCfow)`D16+_Br!)mC5_dIpK|vqs<cLhp@|Imu8=(NXe}`|&0DrC>{1~+s?90G
zO<KbYClYW1$X17IEk@?}D6AiwI!CSJBGbo?LDj7mviT=KuR_)xE9#U%PmeFNW0G<z
z4_t7eSO5p+2`rVWhtsJS=xllwt5}OKlc>S<Hp78LV6m!v7Va=D()+$MXIsJ$xL5t{
z>55}BuVlYU2s|!ThpMYGxUKxE@BIkL?+7fvPNWqP$1Q{rDDO%7&$FqD65Z;c$SX5&
znM^F4VE+DZi+`ytutw@C(LR4J($bzgDAnvmiLJ6J)6px8<<h<oTr=&rx(-|?;Plh#
zzzVj`Pp=RMZV;FqDiQ~7Veh0u9Jn)d$mk`NK%pj#L2DZ$W?%&fOyXe%yAY;e8m$Sm
z9hkvuK0D-0q6fhJ4DQ>-!bh0<nqe03I*pj#N`OLUyKolHWxgdikEjcM)J6OquuUDX
hT^hl*Jc4Z!y(#JnT!r*g!tWg7uK|TsxQWki{{SH92u1(^

diff --git target/classes/de/framedev/frameapi/listeners/LeaveListener$1.class target/classes/de/framedev/frameapi/listeners/LeaveListener$1.class
new file mode 100644
index 0000000000000000000000000000000000000000..c4b3e4fa1bc09100986e33be77d872213b04eb1d
GIT binary patch
literal 1796
zc$}S7>vGdZ6#h0Bt5F1T18KvZCZ=@)jgmsSnQPoo(kcXS$_zi(^2S-bUU{UIi#vUi
zz6CSfnc)E#o{8yM$sJ4!A*nT9?KykS`My0Dy?OWYHGnhtZ4Bd>b>X4p;sm}O$9E_@
zm~%0T(ikoClVrE(VhKN3tJ4n7IQWsFV76pZT4Y!V8p7X<d0R9@H{bA%^p#AE&>~L!
zK=7^z`eKDVFG(%U6^5nq?p){YF^p8BhG3Woq!zc*c3s39ysk(y8AKsh_joL=+*giR
zk__IeCjYA9Ng_yG+!btTi8v3(siw7TDeS2k9=6tarw`&O-mW)ziA-!h%H<%6n|?iQ
zwWRTra7#2&C1QU$Q`}9pwr=@l3{P4NCwAn(;MSrv4#f?b-*=GY!UNvrl$I48swk1V
zxhBk3)NpXt!#SMyum^iROkmo<1rHZdad64QWl$B)eI^-pZT9>s@9<EXDE<f1!&O{k
zC@x2lNleT;Ib<?X!1W@Q=~XS_kcXeJ;^2mdpK;T}DyFGpc9(vJ*&XDE;nZ%zGB}aW
zH01a}#Y9(V<98JA5ytK8btjc(#j3NaeK}y9bD%6Vg<02%nlksGE}JgT1-2@FYNYb3
zky0WwGSXDY{U6g)J0$WCk#*TB(W7=UvQ6^TK$z=s%zO3@6&JtYS2`@`r;6*Qzg~Yp
zv52HgLmkkh@h}t}qIc{AE}N;&5D8o-X*(OreILOf5}Q%H!ow|w<K=Aw*t`@%u0x?5
zta-SFJ01?=5W~!SdQx|zmhgjYT&P?4CJ(8hdJN<3_mYDe#R{URm3A234&JXHAaAsr
zTsM?RO1Wiaz^rCsnt;lu95;F$@&68U$nAaS{(D;GO4XzhG;|v@?K`>;!_n>SaGYxF
z(YKiui*~wcH%$Kt6hSRYyDJ!?2XN<4J^`D5hM`9!4Z(iT3uFVN*hlMExfS-)4%yB|
zWAuED>3*#HWMe&!KF9D2j4=F#saF`i{|tr4a9-jI;3>u)WgKk$y&0F^iQz*W!Jiq9
zmq+O19LQ|hk)mtcqz~g~u)yg2Q@H<T`*0x2C=OFxV1(jXt7DW6D}93*Own$VbmPc>
U>$r>Cgm<#<eTs0u#{&Gn0W(YF_5c6?

diff --git bin/src/main/java/de/framedev/frameapi/cmds/MoneyCMD$ValueComparator.class bin/src/main/java/de/framedev/frameapi/cmds/MoneyCMD$ValueComparator.class
new file mode 100644
index 0000000000000000000000000000000000000000..26c957cbc97e06ff14d353e1b9516981937a1449
GIT binary patch
literal 4807
zc%1E6TW{Mo6h3T|DDl!H%a(TcvT3$DYb$4$rzR-2q-kfsUJ9fOut!>=Z8j1qkW>)=
zvH}~hz3)d2JCqzGU3{H{WDm6=iI?vje&_H|;^AL^|Mmv}d=KAvaD%`PMhCT+30Zs1
zPFOAEwYFw45BW)6V2P*&acF8yC3$bJ`E28eMJeA?al$mSN_#LvU?mfdnC#RJTCaIv
z3Cy&Z;RI$IO_ppESU40N$!w~z?VfAfX`IU(S}kN}yYWn=t%z?wMf{xY3bV0A;M>Nu
z44w3jkitGC@T5Auc*c11h`>g5EKvuW*;66+V1>Z)IdWfXrRQOlEWP+eYHn0?!b2LM
z+eE~yP?9EEp^n%*p_PSKT~0$DL`)+nVZkx$aJn9H|BS1D#?^OR*J-G@p;B2IGaGcN
zMR|UjpyMyfqvgJ{+;_D6;o9=?MVu&Ykp>NzbgEmNo)MoCp>)S@rN_s@zC#X2X0wu7
z5e)?53X7Qx_fL6{;xZe6p;l2wZ7<=dmbKiHjJW0Fpjn)kfx*Zc1F0h;5uhhbnmArc
z8mrU5nUlXJs+&|8n#z#3h2)`6o2jubk~6WWM}<65$DA@8r2Dppi3t36$cT>J;j?=+
z%KD*k$kA`(X1k9agUa7)Wq@8rtT&cad7xs%Ckyn0c00o8oQO}^`X;h(XrN3q#E1y|
zzj?QqH>Mfsnw?V2(5vXkcR*J%>qRH5q<JsvyIC}T3dY7Yyzs8q;vcnUy*hp>PY+Ui
z(B4(J-7x#70Z+1R_-L(H80N*SEb8MChK^VhMc34nJDGmUS&k!<GSm!pTlr&EU>QDK
zg!f>Lz*_ZkQtDFC<pxIE&uQG^8Z&|jbM4iJ3RrZ+v~cx)<BUtL3G7at8~;1`$5h)3
zvKnfAFo4tmn)P}3oWS$ZS+PrsCvgga%Arbiz@H0e*sU|7S;|Y`BBMOx*lwJ&-)ZzY
zxdVr_x^&rvFqTXEli-@^pxYy`SeKIPy@(mZjRzY9wx;zO&da4klLyHBVttdqTpmmw
zJS1=vW5$EW*qBrFp!U`&OWum?n!*??y+UUgpn#G9a09Pdn8TWv)#g`LU;!#wnP3Dh
z;xq5L1xwjs(9KM)@;fa5y88Yb_~6g1_cq?07QpKc-WRiS1wMk0v$jv*Q@mf+@Y!Vz
r<hubHX5otrb+^xk!aZ=m^$bJse;>ZY@)ll8sOKxF!q@N!NAmvx?OHcH

diff --git bin/src/main/java/de/framedev/frameapi/cmds/EnderChestCMD.class bin/src/main/java/de/framedev/frameapi/cmds/EnderChestCMD.class
new file mode 100644
index 0000000000000000000000000000000000000000..6d3e40ce1a8151b0568ef5bcdebec137ac0bbb00
GIT binary patch
literal 2463
zc%1E4TW`}a6h7X%WewdG#%)}@aqC{v7Z4If2q;5LY8hf<67b|EUh6fnBipG~{umNS
z@Xn7yoTM#Vp=AZ_1wo~zC-&#hUyr|Yk}qFBd;);mu<pPFfjdU~rHBbx+GlN63V3Nx
zvxo=0-3?eQN`4fW(uNGUt~9x^mD&>ras(E#6(N(2(pG(+`<B3T93~ARF{sv%vy8!g
zA%%TFAYbebt?v@ZRaC$oI7MLokYht@rDtH4<leoKnj00ic|d&?#Uf-@C`n_j>LHKJ
zJ?iFnnw$pQ51B?#%={K>aJm+7uP@*0%lA_GYcx>YP^m19nDv{~;(C4%qw1sUF&SQ(
z3@?@Cjb`iaFQQm!i!!LsWJ+D<v@d)Bp>)HmC#{ySe>JkAqKL_0<AD2#ReA`9T16SP
zotV4%^t6wGY({Y?eB8|>F-JZnjn#>ta(5k7T&Kd&1g*CxBo91VON>p=En60LsE}>d
z;*{Yg%|V8-1dIXMYICi{&@(;?>*Z#fr)4r8_88Q*)j~E-0`wweonu9v9B4#Re=#u@
z?c>qL{QVtAO}OB~d;uI-Ah2Al9(Jd0qO<NbUqvrIPog^4I}95Vfu*YQS-8uzNbh@t
zIolM5z}@N}by#ejc_n*JA@HzR9dKB=e_Q@p<J%#!-w;@NnMf-lzA4+n2$c9J{r6dC
zMVW53Z}jpETqF~VWAxzvrSUJ726|*$CEDjtMdtYdyJineESXK2wqRi_m-d<9nrXk;
zao{Qer+2gttYQiM@F;QM8iCmXqd0H_YbX`tz^#Fojqbq`DAa^880}yV46FiyNqn(E
zWiSQP7)@a8zzkmV*$dAkjsUnH!F|0{cn@=*Gt44hrxDX#2~fyl7f!>OY-}0MBI;ZZ
pbsm5FY*XLaE(~E?8NxP+qbceVT!!>h#P1y9uK<NLxQ_ETzX2_V4I=;m

diff --git target/classes/de/framedev/frameapi/cmds/MoneyBankCMD.class target/classes/de/framedev/frameapi/cmds/MoneyBankCMD.class
new file mode 100644
index 0000000000000000000000000000000000000000..a5c53c9b4e7888f9c442dd066ca7b08261cdc84b
GIT binary patch
literal 9577
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
UHPEFTQNOTdy~Z+L#~V2DzeJR5$^ZZW

diff --git bin/src/main/java/de/framedev/frameapi/cmds/VanishCMD.class bin/src/main/java/de/framedev/frameapi/cmds/VanishCMD.class
new file mode 100644
index 0000000000000000000000000000000000000000..e0227a2a4a284f7a8b7422964dff9030a38be085
GIT binary patch
literal 2603
zc%1E4+invv5FOJd+ob7*lv3_>%Pr-S2*DGnDxefmDFLLEO2Ct|>n3h??UmOXHD87V
z61?*nd<bH8b7?~p5~RE!h_u$Medc&(_GIjDKR$f{fJboOf-?jj1llfmOvu6^YqEmF
z3kRBc+~Li(!F*A$JtrvaGbw`lcKNvl(*zb{w990z@Va`)Z9^dGyJ1a8G)iUUD-uZ5
zg~J^Jv!$n6vsOt224_<hQIpJsniE((UfC=iQ&x-?vR2$ebaGQjVYbjM*QVXrCosLO
z9B#n^frVqI9j%p~fwLsB^j2yfD7VQSYAeqdE;B+&>T6YXxfeX9>C|4GQ-|9w(+KjJ
z-C#9N*Bzekrl0SopO4aCr;g$QmC8_$8M{sm`tu_nGe7B%#mq;=%tvA6hqJZ!7oM-Q
z!7!-JWJF!%v>SLIB4!JXa7O`^uH~y?qan;cg4|Y~$E34!#O=^1Jpe<EqKulB&(o<$
zKqDYMJ&wS&B|0IpUC(!gjVT79&oK!l1EWJbN~rzs%56{)&`>)3KuGT7X*onv)L-o8
zwy2Oz)!>xjCiQ-Xv9cZm(y4TXV-Tb2+`&$wgkyo;xU4lYsL6pQs*z{I#r>P5As=k`
zLK@~_DFd@`j=*y6bgzxt>Ou*{^(yqLT<<aLlmxORWixl5X%W45CZ|nZ1Oy(I{`lyK
zy1$Ygbr5)xEA^?W*nKUYj_<>Okl)Y16+*s`(e3|>_pcT&fpkTM+U74rB*6KepyG2D
z1-&byj)zHcX<iDhnYQaK3)WC?y?iaWPQdDXT?=la-hVkgEVxZzu1_l#Y@pzyxGcEa
zckOA{hd`z*f&i^OEJy%rKwt{5S7#s#2}q)ad%_HksdzSx4_=5MgX3I$4V%Ilfb?gW
zf0teS2-&YOZW+fUVj}<ZIA&ry4J&XVp1TN_PB0{T43`HmtPEh7f~zs=8mvO}yNAyr
PMoM8FZon<bA>z(Y*=#z}

diff --git bin/src/main/java/de/framedev/frameapi/cmds/FlyCMD.class bin/src/main/java/de/framedev/frameapi/cmds/FlyCMD.class
new file mode 100644
index 0000000000000000000000000000000000000000..5431a15ba68425094075c42c0c4f7c10114bd4f6
GIT binary patch
literal 2059
zc%1E3TW`}a6h5ZgvS!_dv2nk6<JP^TJn+O2LX1sJY5{3u67b|YUh6fnBipIgUxow{
zyz>M2If#>_Wh->*kR~J~A|*O@K7an~^ZEGe_m7_e;33@i;2eR#8eWT;RJ8-vWwlV$
z_6>_gD7r<!5?SMMXlq+hZ=><tg9!o)IW%IbReRMu5Zn=%N}{wS6$bSNlC5L#SSsnB
z5GYrRuC+Y^6B{}d9?TG!KjPRlMw@AvC8cj~lo3`(T@g~Q<3vWxNv&vNbTbmMeMJ58
zZd=e$@Q4`%C5(4iOVHI&1Owf{KzESoUZtTHmMZON%p7l1hvUUzf~t>?$6W}rT?jH+
z!O3jJ{4!3oaVUdwrZVcLpabDU2yI$HGwpPw`=^l`I*yqNHxC6*oi-yd)M?77>m|Z3
zXW1SD*^ZM)a-7Yki9kNBtTQRkxC=*B*Qm5KRiW6IN`wJzq}FA5%ZEihDpgl^1Z6l$
zdzj%=0!{(xFM3Cyh;d8qW5=L&oRO+^7NFM=>x~ulmqE`?^p6id%vZpJ1p>>}`q9ZR
z)|yv_`8wwLWg0hy*=2ax2`tt%XVD%rGHdrcCtO=v0uSncR<^Jnm9^?;iNMopeJH!@
zgXa40;@*$Y`)(R86B3`ITKzZCS(%7{zoS#b#g@#BFjFKpuh;0RZIx93X`N8+g%pMv
z-tKvDgMioHRu68W%YLb39;^_U9ZHf1x6x)<eemG!&|Oz-DuGHvT8q&xDz>l!1WI_J
zqG4eYrZ75(u?N%mE$0_)33~wiPvE~@tbBmEFFEEsey0#qj0C9Uu@4tuDeqf`i^muy
je==Me!LT%fp#)cQ)K$0!*>exyImBOwn?PX||KIrm`D26_

diff --git target/classes/de/framedev/frameapi/cmds/InvSeeCMD.class target/classes/de/framedev/frameapi/cmds/InvSeeCMD.class
new file mode 100644
index 0000000000000000000000000000000000000000..4717581c96f1487c5cea82885fc0521412620a97
GIT binary patch
literal 2259
zc$|$^T~FI)6n@@(*dZ9&1}LPZ)O>UV(&CNLZX=9sghJT@WecOD-IwFM1Vds+wnIVM
z)ujCh?shXFRlC{6C~Q)-^`ffwlO}E2c^wFphA=5UK0aUXInO!A&R_rj_6)!nHlpal
zSQ9#NJAyk=yn}b6cn{+;QV~ovL&Ez}OyUE<eJIFBGNz(XFcw7`(}KGj!Hl@i3iZ7R
z<|6o5C_jlHBV%61f{gnNQn^?um==SY$#ZSh(MvqfH>-?ZHnoy&TG~936xmLgmg!A0
z^e4_U9$IDyrR_XtxR5a|zECOUxU;0^iX@3;Y(p<D>y9a&4}~Fb&2$-V)Q@bG@~$>#
zZDu)7&ree>O}3S`OC{aPGpr^uwo}k@m5mM4(~PQEJ5*=6mFG^Xfki5_u5apEQMU?O
z)^kj&kb3mGXy_pU;OS0*dkj}jhU1oJdfVD!QQxM6d`JaHjO(Ax(06`*46<=lPj{na
z8Nx+9$BP2S*ODX{DMNy>txg3DEm==DHs<xRk2wt!Lo{nw9D~o8q6e)tghzz8f^IA-
zxPq%xi)n4ToP0i2@ENi)mK1yr>T=gvNKogG+BZ^lR`38{$XHSE5RVjmiLVrVjc*t_
zPv<&SF^hzXjBgbf$SdGjrP)xQ?;0z1MKyG5&{HX*x=q=u_G3$>%;|L7+3r<P5FTqV
z8G3}r5)GDG%}LGM+!elj%XGb72Bs=l2Vp)SEEkJhcez@jORJ`=PE;KisE|pr@Bbgu
z$#C(wp8L6VZqUT^o!!#ATimEn>I}hz*qfflyG1>t8LSQeokX2ktv5i6{-Pg`k$RpD
zL$k}h<Lm|-t=W;8zxgd|y1U4olIgmpO$m3@%aQi!(usIe{*4x!iaQ#hk@IRhy?P2c
z*Cv4>k$A=0JklIG)GWnn*kx{=aGgoi_dNDFBXrGR+2oHYaI$eX2WEswaI@mYqMUl1
zvn=kUi@NJ__YfP0ubNv7?NnQx6_@lf6+*qcRTsN67L6Puo?R9BZMX9C+;#N=Kcjie
z)npcI(Ps40hpGz<ak^sSeL)|w0P)?pMzn{XmgqS^_x9nZV8h8@5lF^@dk78hA^eMP
zeVu3wA)=RwcA|+QwoydYm-xPPP9NZN;tbke^kblU0{ad@$fSFj{1eg+o+tl+G#-wJ
zo`rtIPCOiw4-g4p2W#<AaC9F{<5FCDfmB?IhkrsxJRFw}5M?+(a{v!^F&Pj44rS#j
zTK3VphYPWbMD}p$0I>jeas9Nq?G^R(X>~i1eRMRAaruNg_%qcK^idf{E75CIT@PAF
z(oUGDgvAh{F+vF3CJbir23AS(J(BnVH}M1-USQNm?;d#$VFfqHMxqD@7$hz%u&N>Y
z5(%<lJ~vD;0zP*Ww<rg}jZnN0-t@7T{=uw_x9HdNH?9T-h>-oL-^I6)qkEJhrRh(L
Hj;8+r`CVVa

diff --git target/classes/de/framedev/frameapi/main/Main$1.class target/classes/de/framedev/frameapi/main/Main$1.class
new file mode 100644
index 0000000000000000000000000000000000000000..0e1bcd7dda6c366df9154d096143bb9f0d9deec4
GIT binary patch
literal 727
zc$|e&U2hUW6g>l!g=H0NDYa@T1xzY6Zkt$NG<}fN!~}e(g!h3RVeB$%W_S5TCi-g9
zkE9R%0sg3_cLov@O(dH=_ao<?duDcj-`(5-c#Y>ptl^1)r!Mk%=3)nR2fGd$4DOtV
z?PRJ24;a>aU-_K-Ay*TBV0&*F^2t=j?L&q}FA)A0&1WJI^F_kHNq@$r^7{ma`%WsE
zoG={kuOk1u>cx;D*Np<fQ0_@3KBcpf&;vdSg|QZmc{t=+ntIvH8EXvQN2P@BhCGf1
zmCY5a+ehRyt5Zd|Z<e~Bqg0Q@2Wd2mhVsgoBO9k`97eHJlfFo%QQ%<DLladGMYtXu
z6g-qrb<pzAMwPB;)n<lPq$mC;JwKO;ACIRZNJF9h_qK7CDz!LS{r^G?g-D$)xs|_f
zl3^`QxK7ZZZ=R=rAXBLrvj9bMZaVaq;DO-*WnHSX6w951OR&z%OJq9N$o{g#hlF_|
z0^d<4tl8l*Dp&_>W+WLs8>lV?-`E-`bS{v&Lhg@}Yo~vZou5|CTkw`@S!`Nn4O<j*
Oc#Lg4vQu;>yAAhHf1lF;

diff --git bin/src/main/java/de/framedev/frameapi/main/Main$FrameMainGet.class bin/src/main/java/de/framedev/frameapi/main/Main$FrameMainGet.class
new file mode 100644
index 0000000000000000000000000000000000000000..d77980daaafa384d5ae5a75ba1d0a02c1275f5bd
GIT binary patch
literal 5132
zc%1E+TTc@~6vxkSE3F8M_xpe*g3<QHm<VcuL=4(u6Hw#hboWq3c4yX^DS>a}w=mH}
z-~CX=GrLqUAYGIQ#<t1qTz=<2XD)l0^Yz=u&j4^2t{0$(!F_9jN-U(RycKJr5@Kc9
zh!{g$%Q7O7S#yn&8*{$O=boY~Kp%q>sZ}IYv+|<x76Zp%;DJ=qJz~&1G5Lx?->eR?
z07V8PTkI2Kv>AkB?8N(*%AnQJ8iqX3aUvt(q*gpJx)EV)r+BHjw1PauAQFb4L<Fm%
ziF`c7a@*B%+tspnb)1J9Emzv{Sh!$?JF>_1guL5sPXkZ!vUjWeYqhL@87JB}a)Sp#
zdFcl7w&PvmKOxecBK6V56uKkL*>};Qa1Ph=IoNVCpW@+wIp+B&A=)&{jn?X_?2=uw
zOCCPC*h&&A+1J7-shV~dh&#;%cN+<oiqGh|RF7IssXBmFX&ovw9k4kW?e>n{Co)r?
z|6}60bTy&qJFt_>xxqTRPScqKS#*Zh<shILW5kAEm%k}CuN-!sD!<0FS}n_F%Vb~s
z2g|<^any;=x6=+|4r^L9b-q3Kn9ee&!hCQpClBTh{bv^V;BGhn435#Q=#V$jEzkjS
zX+_$JNxp1!oSr~E$Nkxv?3dA4Z|&=2X|2~!+q1s9az{t51cPvV2>M}|!I_EbRtzI+
zpY}11k*ZX<(25&qmP8{$2BTFSi0G9t(w8?Y`yBbfV7mI-F_&ouMH*9`+?MMMPESnk
zbZ8LHG8o%CtTM$*q-3|0yy}9kqlvTncD}TzTP8q%D^WwO9WG%oG_UA=KN|^a(H7t;
zgWLNV6$$(tOB(wrmXr;Jpjx&fOSB*s#(+UD_+LNe`eA_5LK@5Jr5r%%6AZo?Eq#EY
zFI4J*5lRQr780j)D5KycjMB9Tr{MIa!mUl+OySH<g`S(KLQiUU4u-ecu|4hXY_mJR
mkN)m$v%9d5{vQ6Y>xGMH?h;&1N6qMe1+J0aIF<XT#J>YlSDuIf

diff --git target/classes/de/framedev/frameapi/listeners/CommandBlocker.class target/classes/de/framedev/frameapi/listeners/CommandBlocker.class
new file mode 100644
index 0000000000000000000000000000000000000000..668ea678cfe5f115b6252d6a2dd4bb77711586bd
GIT binary patch
literal 4355
zc$}SAdw3jG7608yn!Vi&O}a^ALkmfpv?NX1ZD|EeO0h{PEo|D@#1>i*?(R;K>CVn<
zXJ?ZJC{THpN~?&9_(D_^K@pXf6hTEn1$=_|1fRtR%3uD8ex8}x-Fvs`!<z5Qz32YU
z``mlaoqhg4N1g_-3U5ZS37MG~fE7g+b}by_BG?th3}m8kk>~JgQNTFIL@jn>lH*#A
z>o~6G*u!xH$Bi5}aqQ)IFUQRsw{YCbaT~|&9CvW+<G7P!Kgatx?&3JWaggKv93SAg
zo8yBV_i%iO<HH;u;kcLMqa62fe2nAc9G~F$B*&*X?&tV4#{(Rn;rJ}a=QtkZ_&moK
zI3D8oBFDoVk8pg6<I5b6a(sp3F^;cte2wGleio0{;t&qUDCMVo>S>N|M)56tJA!8-
z_)Y}hWvIzng;CRHXicPz_=qdAM%ow;36V47Sz+4o0UCNqcC~4n-WrCsj#CMDZe^(M
zchUw!UBa}DO@(aIaEC?GA|#e@Qo`CQT+?3{!D?^J%rnG~Z`m^Qo?#nqKHl$Sv%*gI
zSxzcrxD=J{*kodznGfx(>_|B7XgpcSWK1t^j2pHW&sk#9aN~o)R5UPT*y)RXZV)RY
z&E==7NVz40Fw#X9#b2M;DaJ*-;F(rDK|zyHQ)Rl7xl+pQ$H=Y@*OstH<3pZn+M~T|
zNdJr>Poy#fA{VGd@GL{~mV)h>S!1i2Hwjy7+m0tZ)3GUnmg#8(;clP+t)OCaERjv7
zMY~$K_T_|kOb?)QJMDWup#6=T#%G8QIR!UmtT+9X8Y;JEnJ=$n3!c+4h<8QsJssc2
z4<dM8#|wCo<Yficx~`b?%Mig2b^HiFrp!zGziiB~=zji0$4@b$;5{M!td5`IB`SVd
ze$?<x&&V=F%2Z>SnfHY2B@1a{DR55(+)$SG49mzlu4lNEtGcKwizI1(yd0fjpJ13R
zJ>|rNopq87T#`~RZP=!frUI7;HDO_q!El;YhO?9TU6$gZhk`9)y7cNNP!){zN{qB^
zDcYh)nW{?q#v2t8J5y%XR;=n(<35M%lqs37=L$PN;unWYQnDvZZ!GPK31UmKUMWY;
z$(s~)q)f?zObFMna5z<j6GD+P)li}18d+zYGKhvmC?X3g(pkUz@e-icQH)S>Rl!&-
zf~j6ih{+Mx$!3hnq$Aw4&ml<F8nI|u6^wGH$AxX?$7rWZ1RGbA3r}cuII)T#yd2%>
zs$i6bOj!n<RUhM$Y&dqWJ%>__s*4(05TWB`{5*nJbo>Ipq^$ZJ$D=zgas!4p=A`p=
zHTYFMUZUyO^%&9d8~j$st9XrK>xtlZI)0BoFf2W-PEBrP^Vpo+X{2a-o2Rv^L{Xjg
zsIoay5jy-%JzG)f3nsEmw_q@M#|DHgMt$wJj!v}?hOb<_LWp`-%PB-C3fCC*Lvn*2
zN>#q#IPXg-=-v~$3?7+fr}w@v%nb7Kc?|O_6C%FpO%^pNles72(J>nn`9Z_Yn)y7v
z5dMiyr;lm&;eG_ozLtE-=WH%{mHW`|SQg2V74q14Je*<<@7Y?5T1#`s@s&HbNAXAe
zDN5g8fA(K~!{6T43RfcqJCKbJx<=Ye3C|#xJhZ)$o`3}%Cl~fpsXz9$@~?|yd-Q=q
zsm)Uh&_5>JA!Ap;pqoOv5ggU=I{vQ1@ZXz-QqZ)=os1Dr1TQFE7cnAIp5xMGug%I;
z1plDRmT;U*fo`3?(Wb-EZ;5=~AjdDNj*Irfix)o8`Swt;clv94B1QkB;{RiYE>Eu8
zIi1@tENh6`Rc{3UWLWe+<->6H$>p$s4#XxfY^ML1|G_|Cu2n>D!4QqZv>K+hMswqm
z!(dCg9*6b>s+M$3p}Go>5w79gG{#U(<6Ih>F%xH^0rRkxkfu-<+i*D$P`(f9YPbU1
ziANr)M`^AiL$5!H8CM)e%|O>7L}GjjGd0`?y*n12Lal~v0jx{-3<aJg;W`Dbm+))_
zj!C#dfg2?}M}eCp{5A!iE8%7ZK2yT;6nMUb&r;yCi}0N8SW5_Z$66Ks0;#r8f!ie9
zuE2{VyjX$Hk#L6scS?AP0(VKcTY;BKc$osnCA?gLS4j9=1zuT%&*_e>Dy94O5^-LM
zIA77YKpJ|70{6(e^_J9DEBp&3e@%&hk-~qcG`m)T`y||d>LAuhCl{BTtS|E~q3UfY
zl1H!+n8KyB^zTfye`nY%^b_3*j)inj+R%bUSc=6s4;@&CPP&<0*nw`O5vO04%W)mf
z#XhXW-6U~8&c{RO!C~~$&&xIR@qQ6~S@hv3*?bf0@fI#&Gq8btT*l@j!4_dNTZuuo
z8bj<-46`9@V*;16o!G&4<4U#{SF?k-hTV%4dk|^%C`Q>+7-P>N!(N8PUWLQnK#u(j
zyV$?sYBk7fbtq_OVO(2`-P$TlY8T>KZ9T5nhOtMx3O8sYxJmP{SKEV|wf(q7y9c*v
z58!s~VeHeUaHsYR_G>TTF6|W@(2n9@&@WoUPEhI>MD4(p)GfI78m_{7s8d``uwF*4
zAw&?;hWT%yC4yvA>93_st!QfT7cEGUU=69Jf%>Tb&J<hR3NpfIjx32?b_j__%3ZA{
rfDZ(b>7fWlF&6YlGmzSeztJ2e-e2$r{z~2NiK6Tj$sECx_{M($caER{

diff --git bin/src/main/java/de/framedev/frameapi/kits/KitManager.class bin/src/main/java/de/framedev/frameapi/kits/KitManager.class
new file mode 100644
index 0000000000000000000000000000000000000000..c5c055d39ae801c014ceed69a9f6e417fb6e282d
GIT binary patch
literal 4549
zc%1E6TW`}a6h7|8(v?Bk#{Fu>WgC~2%bpnGfdNuQ%aAsZ_P~RixSd&IM~*YGSAGz$
zNFc#GKMHZ2tZN4;3$O_!_E5*MzkKJ|{*I5`FJC`=0)RP~bD%`vPOQCJ$b_uDX6vlx
z^IBW8ko$Z+tFTDa)`W>`PlahR$vRv+FihY`3J;j<)D~N>xo5D+OJbwK1tr^}^F#!k
zz(~VB=LwAU_Ys&(+q1VsGb5Blkb{OK+9YtWQJ3pn8l^X|edNB7!aN`_G&B2>!0>|d
zxdT-K)t(cNwN|<e<D~rHh15J&!8-S;r@}}CDL;+0Y6U!u@6pQW@+zl3_X4I76ftiN
z$3>@n?sf<7b_eg;!B0_N@t8_wXvmDWN)3L`-$Xd<{_k-rT|1Sob;}*hmf06!q_jad
zsK=zGZgJXmd>bNV6Ka=WN_X5=vWAZABfmq|!zd6QcE(A>HHt^ZMkgMskY*a6nWZA8
ziS&6}NL=|g_F$bQf$2xPw25k`8HzG#rIHc%fhwam1akbKMo~u1M#MA7wkX*FzZEq*
z;2sX1gkLrJJNQ3`G%?Huy1&QtdpSEREDZkg?AI3`zwvlffDFTF2gH)mLhb~59<U7?
zZhy{XLp|hXRr$2T%|c(w!N_fE6{Z`v#nN6nL#8&@vE{M7p@?H^DMkG-y#*bq8y+qh
z%nQ4OYcj*NU_t)2B@OT7PGIp3VYeOLZM#J!`IC*Upi31v43lGU5RMW!Hq+>xFtUZ8
zw<nNl12^_(N!a3gnYHXeXQH7z7QAG*Ncg_lIBZr$Okl3@>t`%H^;Ex;uytoP=iF3=
zvjpB2IP~oC-i4FkX^ukece)H0NU2)Tx&5^8f20Kh<v=kX)sE3|E+@tsSxUfIE5jvH
zdRIU{`<Z4x)BGcuhQPQNaHetLx11}(RRZ;&>)6V;;AjX`mQ<oWo?Wx6J&mPzPY14H
z_OX2q+(37J5SIfkfu1o3Zs9FEiw+0wY`fiOD#ROnGn4Bw+K=HP;B6cLe-$_YBUr0|
z17&<7FV+ED@fr_fSRP9MZWzKEqCUdmm5C$oVd68smEahbBWVwT<5-SmC^!Kp@i_{o
z;PfWLwbWjh;Y<$0bjnalxy}u+d_L#9TRD~q&~%JlhM_HnsT_t!ISeJZJiv!5ISj9I
V8K%>62JWVP2VfSi!%e8c?Qdo(y;T4J

diff --git bin/src/main/java/de/framedev/frameapi/pets/Pets.class bin/src/main/java/de/framedev/frameapi/pets/Pets.class
new file mode 100644
index 0000000000000000000000000000000000000000..78dfe2a4a156fc8414d4c18678d0f0fcd297b2dc
GIT binary patch
literal 7602
zc%1E7U31$+6ulcKk?o{O8(N?#6g8#b(A4I;P=`SCMFMi0HlYl>t)-2<jkHo%D}#r(
zKJpLvCCtDKy!S^j+?8y{Aquu<+)OCWOyt$-?AhIW_uf4#J^SmoKLFrEcwoR7fu&H|
zC697ZdQ2O%<gn7dq#kovBPq~;mjb53(hgn>7$<N(2D((#O82XenXL$9@F9VmwMD~v
zg$89T@A8_UDw2%AjduOAb=Y)QNiJ$-YeOimn&lO2GZ6-iIRwZ$fyreqxLQH#!r~(W
z<7>Xd445S_dq}Y%r7yE^ft>s08zEWfyA9@;w(kYprHcE)45VLmnHSzM^SQk`GaY8T
zR3a##_5rOibHQQ7_I!)&`4;tj7fi=zp(%W2dQ{nUQ(=4dV}SGRZjaV0YU>sCu!<+M
zCH-?R@TJ0Gm^Kxfy2{M<z>gqewn%YzXh2`qiq+`gfU6O5gnX{ZZ7*=SjSs^pU=jmT
zgi1!X@}-$1jKZSHLo*T%+vftKX&;|pnMSVaMi<RW6zXWvD3b~uehG0GD4(-<sF=_l
z9UF_Oe3P208L)h=m4kYqlC;zVl;o_T^ta>E=9wG%@Ia?M^1jTOFzsRaj4g)Y^|$K#
zF2jgP3(qyl;*EJ2rnG!J*=heB_K*t4_l5yllXPG8IfFs48x1DZ7LLH}Ip@SM4<fGO
zMxy{f)sYYCr;6WT{rKs$C(`G-Jj3=)_|~b1LU^^A-1TGWGr6w%3e%Ib>Je0|j2=cp
zP&|C}0DtRC*E#KIT~6$_l(bptX_~0Udri7RQz7|0%)m?2Fa;M0Tq+zt|LMcstcCjS
zUgTAo+|wo_FsJtw_Ysv`-?u8qRh@?fiq;?}R(%we%)=xQA5o_YR^n;wI18^4@}!TG
z<0yp>bL8j{Tj##SAvZe?u?}Tf`S?0n|6V)HBxG|~4*P$rKms#AQ1?LjZ3Rc*<$~4T
zl*(<VtZS>kNyzO!tUl6}X^VZ*7g{P3xY%Cl9pxA&zbm*=DDJUs(cmFRW8T$t@#Hbt
z%~;(Vaybj{5b~@KUyS7Je<DKT<)Ia7*YfBH)_99567uwU_<JOa2lLZ~ZnYa5j=<G|
zb)p82o%cQ=^TT!Ci=??x2-KKbrB%+tuJvEGTH97^!jB30X;?e{NWKp&-wEV*{Yctu
zlWPf{(~>&=)PZV#Tj<xY@yl1W#hIkit~U)p#ci}KZNO&)vh9#I;B(A($)F9mOW^W}
ztJ#1x?D<fk8L)w@t?3)^C9<~P`Wmo}tcm{(_!>_W|448KR63QNUCw~}M?PdF79}uU
z;bDj+-DwEdfItQS#vlh1Fo}0Ye3ykh*5t9A#kwh&#_PHGn_31-0Quix=DWG`zrx&~
zG5!)>C*vomvhX^cpx_mFHLkl1^IZ&M9fm6@47XAlUWcn)3`U3HjTDA*D#JBc=wg`Y
zFkDYzuu>Urz*~rVyM-#?@9`Nerm#IpWxEMWJ=t!hur*WJO7Lz^w)axlo~E*WfGrPg
vmFX~il)~_H3PT2N$EZ)>Q_z1q_&<-BJFpBZ@CB^GI&8uge1(?Iz`ef#xQ>uc

diff --git bin/src/main/java/de/framedev/frameapi/main/Main.class bin/src/main/java/de/framedev/frameapi/main/Main.class
new file mode 100644
index 0000000000000000000000000000000000000000..9eaa2c90bc08ea1c64334d514c312e496e1c96e9
GIT binary patch
literal 7951
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
X2>~p?BD@K2!@KZ4d<Y-Ir||hdvuEFJ

diff --git target/classes/de/framedev/frameapi/api/SaveEnderChest$2.class target/classes/de/framedev/frameapi/api/SaveEnderChest$2.class
new file mode 100644
index 0000000000000000000000000000000000000000..e36e36c611c9fcbe949ecb0030300e84ccd8076e
GIT binary patch
literal 2054
zc$}40|56%P6#lND8(<TOR-4u|O(Lla*pS-vS4`3(McBB21=QH2F)LhU>$;m+7H0gb
z&(LS+6Eu@w#+g1q9xBswcM;I&NQT*O@BQxi&OP^>%h`AD-~I>SHnu{Tz^s6;!<fX)
zFjBZB;hPZV@NF2wxE;ZF_+CtZ5b&dbp9I_yFfZV)fO`V&hw(Fhi6D&yA<GE(RYF$6
zB15RHn=#(zmdg;=Y-c;Q+1lAL+?2<qo|*a{cT&sV>w#@pSwYV;jJOS>8M`G!b)MRC
z^j%)(ZGWIYGg9KI=xv_0>fFgRc+(TzH7vuu&#<BltQt6`_$os%W7j#usAgEa*xKFX
zPF3GDi5b)Enr^P@jv?k9GAPc#Agh)|yP0~k$!VG#G_=?p9Vy_nEJ8)>9x^NuiS6t$
zT<wp$%cs=C5lO=pyXDmQq9I}#KkEDDpL$!TgJi9mX*UgPyTILsU6+uPk%ubdGkh-N
zQ(TfUg_wi~GM1n*Tse7Hm+w|wy|yEvAft$qP%TUNO-30N8CAio2v`-cCg7ofbpgK%
zc!ZLK$1?uF6A2qKo<f(giJFW$DE#=qIb)dai?La2@OsOnaxQp8xn)^?ab^be$PlqD
zaSIj=N6coGkGe4z`;7e%DC;$c>n>M&)l`);%9*!K3TR%9pI!FxK8pfvLs!zIIM(uN
zHM>#CuV_oz^2S2xA;W}rf+=~pq@1`Qj&n-=dnb{a+!fb>A*QIO1bcW}Jdb0ga=Ms1
z7TI_qoy!)h>7(qVrsne1jRkGxnEBXxR?|vrN6DzB7LM6Pm(}9ZF)CM1ub;ThhYK?U
z7M}j8+uZd@hRe#)zGu0HyVsG3WS_RiaGt#MU&QOm0OgO6C}UeL5!7s^mH4Bxsz91%
zzb2-fDT%M*Dt$dB>1#3+jfy@2(3_fuVCb2`WiWg}qYTXh^d3zlUxFoOUt%cn8i9X3
z!z+X%WC%RQmxPm^c$A!92fUGR$>=wYnD3BH(f3JM9kA%s8w9mv-~hwx&oS~E(mu`w
zkPP}ns7nm{M7T?g_(Y^jNIoHViE}=2zDq<qnhQOqBO2{79aZ#@NxZ<&D_q>i81?;q
zj5F-xlOgmDKL?rc38?2$4xb_p9e1ejEuls!sbd!$e_;!MV;ldVfwwUF5_Ql?l!O<!
cfv+e*0nB*574ifGkw6mHXcVTk2`{DiAEG%T3jhEB

diff --git bin/src/main/java/de/framedev/frameapi/enums/MaterialInID.class bin/src/main/java/de/framedev/frameapi/enums/MaterialInID.class
new file mode 100644
index 0000000000000000000000000000000000000000..b3032a66c392b14c296f969ccf15627ec9d68e63
GIT binary patch
literal 11949
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

diff --git bin/src/main/java/de/framedev/frameapi/enums/EnergyEinheiten.class bin/src/main/java/de/framedev/frameapi/enums/EnergyEinheiten.class
new file mode 100644
index 0000000000000000000000000000000000000000..973b82464d3672df497c495d1b3e963656320e2c
GIT binary patch
literal 2309
zc%1E(?@tpk7{{NE!N!~p5d=h~fIl|HTTFam&=`oBVaWzYCdQZDUAGnPdb8~<?k_XZ
zMBn>I8K3Jm`E?SayfJafU9aua&+~oSXHUQX`1}<Bo<KPRDFRQma?1e|vb@iFtnBe}
zOR<1^yf^q@T~X#T3Us+5xoY<-LUy<?TxK9mV9GA?nQWJLn)}=}1k!suwFZIp+Mj}-
z5t!JlzplKg5XjZ5wd$yoez(~`^4QK+9Xk>k1g2|;3U-YWvK=pHK^RHYLaNw#E~GFo
z2$YJaZL0}Gr9Gs-3_YHKYXl011{I}3m4#W7?!1+X>(K9UkGf&d6+SZ}l(ehDrq2Vt
zPIHru4yUHy<unF3F~F%{xYT7*hK4pd9U&ZAHB@LSq$d>aq2I@;7FS%l$Zx4I!2X8_
z=RE4TKGT}EgwJ)Nk3kd{?#1Ic6i;=Td%)V9u6W!T9jG%pP{$tV3iU#+Y3x5>#_dpp
z0RFLyPLBdGKb$x}94r0|+(3aFN^Ml+no!Xb8B-hty@s)w(jY2LO=$fFLhE=#>^2ST
z{`3Bp_uC|kS21gwo2&+1U%0|h9d)@n;XewFJH^C|q{mxA#+h1=w23puuE#_bvKJn3
z%FtWqIO?2Q{#BzKOv79r3NTM#HlcpSwW?6VP1}xwCRYuH<tHwRq09U|rbOHy4yH{<
zXabowH`}&!&J;_hfmv80;Gd(sU08@HNslB=qPWdr?H((Zs#&;0VEJq{C<Yhm!-eUh
zE#bM{Fj6jmCF0;`PGr2TIk=@&8RwGFIApd2S4_E`eg+;AxN@ZKW431C(XrcZ5E+4d
zeenNiU?_UyF`#a|Tr(RBFb)#{*k*=pcGyl1+g#k@?-Jx~dl|0admNtvOd;p0y`;zN
zNbU<vzn`A@1lPY|F9i$uo<JMG=LWv>_B#iQmPz0y+&V%azX-Pz2y=-93iC$@sWS<S
piG*cXNz|~KKv+s7+=Y9I8j=XB34}4YZ>@?@vODZp>l8eIwVyKnma6~&

diff --git target/classes/de/framedev/frameapi/utils/Lags.class target/classes/de/framedev/frameapi/utils/Lags.class
new file mode 100644
index 0000000000000000000000000000000000000000..ef5293e557e8b2d4e4a460333197a4bad63bc1eb
GIT binary patch
literal 1073
zc$|e%OHUJF6g?kPX4>fp6cB1_h2jek8Bx@Q#FU^W#qx-)#KZ+o+Ytx)%5+NN+PHD!
zZ_vFVz(QgSKfoVlJm1%$uyYo3AK$&_oO|z|zrRiaEaI^V3$rHTxD(@VPR}hueKNXh
zVji}h`<m;e?ipAxaNocK0kf1}dAYr^@p`=^Ao2qJGEo%hd%G$SD=ZgF+cLvP#`==i
z@PelT+VsqpKxCy^bp-|sUc+7Q)XT14a>_Mkh6~M#Q`>TUPsU*~5`6I50@*^<wcq<r
z-L1O&UB_v8b|>&^ZM)#?w4ab?#|=uGMaA=sozr<~`U9`BM+7}^d=>~8Zp~@6-KxN)
zV&GKv)|^(zW%B*`*`sWi;$?eY!UbNPHJaaP2t=1EwQwl2*zEWf_k|}BVp7WduCwo0
z7{z4^X=E%6V9>%45(XA6Jj5dl!x#~m_|HfJLlViZIgK5AqrB@@sDAi7^{UfobcJ82
zD}HPTZe1Wz>G;0e2uf7F=GAI)iQLO7vb?1Q4iAlYr8IS4s#BK2Xm!3*KL2BkY+6Cv
zKl>BnkWL@Q!y+JpB>z^o09TMwFlk&3o3F82e)>@L1bqke#D(s-s?CJ8pNJNrojZb-
z`VM0hkpsGsYN~n!{j{}o0)tN4c9&D1C+lBE5p7CDO(Bkv9~{TvFmVo&<S0`dL+YDk
z4RNVPj+<n5f}Y^J$+r<|%qkoq1x?|4D5y+1vN0nCDGlGC(WI0dJ4Zbe?vI{=0acvj
zHd2h!ig`@UpTP~qJkGgql24rR$;I93ZF-e_axF>XA1S8O7CAQM65bs{J70d6N)C}_
vJayp+$?ynK-0tBnghxnd1WEM0`5ixo9y^A4*t<s;P^SQcKv8C=71_)`H-@U(

diff --git bin/src/main/java/de/framedev/frameapi/glass/Cocktail$event.class bin/src/main/java/de/framedev/frameapi/glass/Cocktail$event.class
new file mode 100644
index 0000000000000000000000000000000000000000..99824aa4416af254b02bc012521f50762263fbf9
GIT binary patch
literal 3483
zc%1E5ZBG+H5T1oXUo4;~_<}DBVgg^TF)=ZUG0}>lNvlMV#E;v%ZM$%{d)eJ<B=K+f
zTTC?3@BS#_?3GGQiailSVrY}=_U74Vp52+boBe+9`6~cCfO~luBk<5@zY;MaE4!@A
zDgm#wG>dq^yS)L6MWr1wV=7hU?^!0oW!~k|<{?MmVmc>evR!%I+~vL{F!@ACVV@Eh
zUs>HDkgKYI=b=bo<_Np4wbBK+K#CvVO3jT5yF8%2ieeEmE0m<MR?Uz{<}oc5w>z8$
z+z**XP|W;2*5-66;9g&-*B9!gLYHWuxS>*68Zqm4s6_()K1O+i1h{U`t=n_Dyx-9E
z6o@ER+M*EZGwHaSoc5*vf>65cHIuzPVb780$P*xImPcC_({zZHT16SP`!UasYcR{T
zVBxW_E<-bxTdBCIT=g}$Wg|E<1G9?k5x!s<J!b}P<M>P#o*7tGq0)bq2$@|yKR)R;
z!=x?b$V?gvIsKG9ZQL1#_a9ZtS$KB1Gw~b6q3|(rO%ih~6(x<;iEpuNdR@oLDiww%
zGT<#Cac&DOIA%#`2hkpFB*wkM9f~sPnt~qj0H{=~3uC$D!)kI+)w=6~Hkb^;k<iVM
z?Q`vxTSZ4n#M8N__t@T2xb_UV^;QdaYc#L~1(+(s1WXf{Td5y4Zd+Ch*<N#v-Ao-f
z@l_Hvx!!h@2+Y=%&%&KUlEa%h+YyGqqxuQk%r)dyvL<mam~Z<w0t+kk;k%lOTX>U5
zD<WQ#U10<YdFED}ww5Snx;_}YwE|otaFC%9{f{F~poEm#=P!ke+Ejm|)8-hHpe9|3
zq=jKO1ja)9oqYo3n#4k>y0~$ZhuZ}1|8blNOdK9476}yk#g~V>1m=ftBl>L!V=xol
z+ugt-;AsQgXADOZFp1ZEdc+yW5kTn+6yD92K0*0gikZRdWNN_^3|`AU6kLMY^xkE-
yf~dJe)I9$7*~WgdT^+*qVF+6euBWIQu#hUenc4_`Z^0cX!ZQ9ZATxy}82<s~+Jm70

diff --git target/classes/de/framedev/frameapi/main/Main$5.class target/classes/de/framedev/frameapi/main/Main$5.class
new file mode 100644
index 0000000000000000000000000000000000000000..c2c9d6f74ea145fa619ad4ed9d6fb0469759a5f1
GIT binary patch
literal 1304
zc$|flTTc^F5Xb*ROAB>@ra^*S3!;{SEFvIs6U7@zQ6r>2pSDL>Shl3y5_$9+=oc`&
z`Cv3Lkr*`b1K=0%*{I<CipCe??4{i&V4I%vpZT3LJ7>;hH~&3*0iYk}D$#%w*3cJ1
zBTgP*-#}oZ3HD=IgMo>tV+AHUiXv7N-9^z`6n#a}UlfByG31CKP6aU(#A!nLiqJcj
z2@Q#CZca@V78f;Bm4>OAtLimftjgR7Az;pH`Ho&fG?9_&&74@08M)#Jv8<^}LNnB9
z9;~&anxUEFgt6Fui+6uzXOiHb%w{B^CZQSfN?|D_bF(6)vnP_sriGpqInA<Nr{7AE
zpiCKt%uVVdpO<X5?~_8u0B7vW6$~C@)=R5qOp#uk7Rzqf&`h?FOUsLzWmH;QdKScr
z;Iu9nX+4|QjJauP&Sx`03@aGHsDf5R6*QwoK^x*hj42q$83hwK%k|qY9YWZOuj;~>
zQ?I5LWZL8dd#>vR!*DWd**g>=$j6!$`9(r=Z0}0f??wp~bJ9%66{*_=n&JZIr8zBb
zU6w*O=eg{$^PNdVxqBNyXhK;yY@Hq8nG3<aR>uD}v@<=-YLaaq&o%L`bx^!}9cA&S
z@IAH{TFo8cg`n3s!n)4hT!W)<y1m8@N&M?X+zChzIGnYkHU0!;8}M@jt|4L>wJ6^}
z(1-g}USeSnRyYvb9;_(AkPBaWFjRty3m<t<DZy$N-t}O035H#0dN5pq5f|R@V59_V
zT{!H)+7hgDVY3J8*0{trthb?6V4q#!Bo1=9-k^%!qKV!iPFwsP*v2J#k0gCShCU)s
zpKzN#;|_hnJ^G4=^bODHJ2vSDUeQl%(J$=K4*BUfMd%N;&|mw)6z3}33+u8yp{C+<
ah%@N6FZwuoc=kg@FOIPa@xBJ<)AS!C@EFkm

diff --git bin/src/main/java/de/framedev/frameapi/glass/Glas.class bin/src/main/java/de/framedev/frameapi/glass/Glas.class
new file mode 100644
index 0000000000000000000000000000000000000000..45a5cda76b1b6d504846e0d7906ac158909854fe
GIT binary patch
literal 2063
zc%0o;-EPw`6h7{@rtLbm6~^yi-eAxUmfUc~5H~PTr4}wWCb2s=@mjA*9NA9AcmQ4r
z2_(4ZNq7pxiMwt^3Zs+YW*0ejd_I5Y$Ih4UKR<s3fXCoEP$00WmG4DN#NHtrFfZWV
zfnpI4_+U6;iSW81)7pE5)`4jP3l<r&xa+;?9CF_fnAYM0CqSA6iU%SLc|c%>M~OMY
z#eD*0VR*D-nBONb+iH$pwg^-bX@rd1+%SBxu56B;;!_a|^9+gV&1Pc{gFKf3cc4aK
z{xpMarKBps6*BelZLGMK;eZF!mr)`@mNC;r$xg^4{e)J^yFE?=?uSevD8UR^m(#U?
zyQ8ArQPHj~dW{B>YZ^;KBWC;_HAukUCs_120rt?%dgx|(xo6M~GZ0ZCm7!8~-A>x?
z3qyStXE8dQj!O7H$dk_Jc&U+;QFD~=Auc<Hzrms;6h6k%X~GqDJ=R90zLAO!Z$`aA
zg{Em7@B<O^z@_a}o2-F$TX;l8Jdk}(83yV7&TzhDC&9Iu;YzUZkFWtlH{O-W>;K2?
zya;p^ScI!pxCGY-EY(}5U+RugBJOTwU-EnlZ^P>}>TtE2HJm`LC4Cm|9Us8);<V`r
zO~7lNOQTRa9HF;|;xkom?3ZAL!0OrRfZ~AhGU>8=Fh@tmFEC*gteH+KLKL*QdSgtw
zN^qaRj|nvALYyjU^NviF&tHn{WXf5it=c)TL7+4W=D;I#Hc!RA+7?>lvF{>@hE>4s
z;?HLW3iuRpRsiRCEJ4|h6_~YS73M6G;8mJOyI_A>Q+9vl3oO2?UH$}1-z@ez+9F~A
zpBreac3y#-aLcYO!|gE!a>8&YhhaIFf!f?BW1zVVYv*8C&t<p^_i`E5a~L*q7z*&f
N+B$4nTmc&J@E7mWKBxcy

diff --git bin/src/main/java/de/framedev/frameapi/mysql/InventoryStringDeSerializer.class bin/src/main/java/de/framedev/frameapi/mysql/InventoryStringDeSerializer.class
new file mode 100644
index 0000000000000000000000000000000000000000..537d3f4a3fd40b7ab4731e6eef3e0241d3c71af2
GIT binary patch
literal 7415
zc%1E7|8Ltw6n~d?wUdQ)>)2Ml_Ez>K8IbU$3|JA;x~)<~wj!mQG)+RfIG6NR+h^|1
z)q=#|g#;4(ju8J1zapOPC3QEGIFL*$BtKlv_UAr+_ul93-jjd*^T(e7U;}PgP#|zy
zE2r);;nyFt16J?wdRH-zclbflVS%W7ef_OlZ}<n?H&XRmMhU-no42?U%oX2pWx*nW
z(=ma|{9b*h{g^w3z|t4O7v@U>3zg~v0*kj~hg(o2uzZNUqm)!OoFwJn?)!>s=^pS7
zb)**vml+{_8YtOzxu<W?QgL^W(++oBrVtb`XP@;rUGMPP!0Ot->RN2|I_*fVsV@!n
zm~r-~K?43HK=aZB=!9D2gj!@*Z3JCnf$##U43(-^Ylr*$!cd3#(L36l4yN!wK=zsE
zj>E+c74ikZ8eZTE2QAlOz!fUU*G7d7DwZaCtW>GcH1s>XD}0Q87oT9Cg|11XYxHiY
z4NXv#`H@@_;uNS<OjbdLCDcgDsObm1RQ%dyeXfQpXAHXGy1d8SmSKk9dE)ROmjCE6
zxy*<>=y9_rqq|#7^XnUxp;1-ZRnm(WMues#);W@QxzZ7J1owp2(aYmu2^uGnbF#<D
zf4M*n!##Ypvp)kXxB7<PREqU?LKB1r?cvOu#h7^QC(Gpp42zW*9SSOQMd$U-%;G*v
z;mt!jZI4cM=V|Or9LR=0aU3TYGRCp#cum0ik4EKn^w!^J5_vbvTQ1Z3o;2GM&+Xho
z$Q`@9X3Qn?ZzYrWaGWx()z^s3oc?U3RRSAcDZ>dkMc`bed06ixQre8_q2(rKnD;`j
z&DAc$5{JM_Q##Cjz%b#$>!&vt&7RN%wwu!^)iw!S2##h|yH8U>0+%bzXELtM>hq=(
zC=H#UEx3Ra%-pVRc#V*Dj-u{3rGhVEDox;Q649H=lWGu68{Q=F`+v*(1kQ`W!jCt@
zL+R4Wqvmi^$WpBhl#oBB<&Sx?e~dCi0=5|nWv$X2xx3kLX_`8jR}jZZC#7irPATR2
zV>=}t3n~OorZNH>u93q19MYLrD)UNZve*$=J$mwOr-Vwggql7MZK#pL_j!aluZQOK
z(2N9JYROPJd|N~{&8XBk{s?2iM+6SnuLT>?<zSW;T*vb1nWWT$&yIYBN|*_h?<UFh
zF502tA`n=B=x1T?1T0}|#UI2Lum@233G9a}r5~XD3tkmq8QZ1!36f)5PEc?LR`9<F
zXW>;uox}bjJ~<zAT|2_Hn!$A@<|@Ptua9MTBZFZz#qbuqJ%(W|gJCVja1qwWFuaq&
z@JWi{GF(Y9T+LvpW-xq}Vt5zc8^iE^2E#W)h62>%_5=7F|4-rbt2mPn;bXM()4u>t
CCa|0U

diff --git target/classes/de/framedev/frameapi/main/Main$3.class target/classes/de/framedev/frameapi/main/Main$3.class
new file mode 100644
index 0000000000000000000000000000000000000000..a8ac439cda296d8806b8abaac3f2f303a0d4cb48
GIT binary patch
literal 931
zc$|e(U2oGc6g_Ubb`4=ITj}^5rR$*WU;)8f(U6#!)Tx6Bsv#cT)U;kxXL6EC`&aP5
zhd|;7@Q;uX;yS4`BqZV}*Y@$b=U!jiKYoAx4&X6%N+{u`4I3Lp+_GVzZsR&`FCl69
z_XcVdu~|g3h%E-Er<BlpJ`Y0?G8CeT44V%a>iv;$-)TM*BQZ}0{8YL#E|q&orc2x>
zQpsqSVY8J*ZXYw`_kxjNDEFljFXGuy=m8)4gsk=hkNd}5OEX`9d6Ni3BSX3Qh!U}M
ztjM-Z6#I1$YftP;BT_PyofAIi6!*FE{2-KSd?=zxFe>7XgS%)sxQG=8Wvo-QtYFQD
zhS_$|!M1~YxKD-3@?of$3|yb9vHNm(BD{$9d=9;el}h)#@qa0XYRKo}$meH5hdnhH
zDhl)&L#@^B|EouZ*~&T?DxWFZg|UcwDvY@DD2)cmWgfmmH6QSBI*>D=8J@QKfgZcV
zcsiAld+Ntyq8=q(_u!!Y_hRTx#3=TKcAq7HQR$*i_tplb0#>P*Bca=xqrZ#_p_gd1
zOLK$Ro$ZfcozKX9NI0ux3&a6_VvTGqWuc18$(^?oHAY_z>kF;@g-7)pthXeU|AM7b
y6@^b&esiw6LT?55g=J=8jpY+{C-qyXTey<2ui~0{UG&m!5Ci0$qy41KO1nP~U);(7

diff --git bin/src/main/java/de/framedev/frameapi/glass/Cocktail.class bin/src/main/java/de/framedev/frameapi/glass/Cocktail.class
new file mode 100644
index 0000000000000000000000000000000000000000..e5c3fdd971265b97b227ddbdd7cd418408a07d87
GIT binary patch
literal 5406
zc%1E+TXP#V6vvMoC%blTC869en^3@MsZB4mkc0qn(sscv84@x>9+;7LWk<<gJd*4o
z@HzM_%)ku1^Pw1y)|YH&lw=KV^UywIrQQAOr@v(B>{0&y=l4GW;4VD2AV=Vq6ka8y
zJgOYgF0J^i(iAjgKI`@>w9PB6fJ#}Z#@?}_Jg^{7;AZA#5AjN1l7($`LVz3)m}>GM
zU_Rcs1oD#q%m@^?Vxd&jJ0>t)bMa<Z->jiJ;2~2ev9+Ym6eTcI+ldvABYlSw%NIO4
z*2JlG9&xpSm6Gcotn4Gd8vD$GmkG=#P6HaXD%(QD!iHB!;n(jY!DJkCneTXU*yaJ%
zV5cqOMu3i1onm3{kU2i{0xD3{Mpv}OoMoSt2SY9ohFngDyzKZflTH*XC#1?dbQA*E
zPi^L@GyrF?tY@&SeU;C_^&If99Sem<9FInt-C)kZ`V)#+w91Xn@iA8~lrNP3K{?!g
zhPRH29qOo)Hp{N7Q^f?Q!I`oy#n-sqiiOi{eE~DGFssQPaEoT_IkRvN>z6X{%))9M
z#NvM~gv?!Sp1tUHf=-J^7p^3uWc*8Z+`3Erd7siwxs0COegg2!`wiOx_i*9LPMhIY
zi6f~*$5Xg%zHJ=gXT7xIaOrd+pEY@eZJYQ8>$DT7w7TrnJ5qnbwaTH9P6~S9l&Dy!
zaj96uOnWlzYP-uK^@v7(aG`W3peIb|;a0JuPRNqB;|trnF^)ZhZoApU*}7O*ghhC5
z2Cl&C1g@59r-|FH!c4EVrW3pQ8cyQlPS{{#Pd6g4P>Vep?Drx4hk13#G5@?%8#&L#
z#L^b5rGE@TV4}3LZ^IISUovEjPb<#pJXvlHl3lcPV8i<amd>|?jtCSbQ^S_|Qj#0n
zT-N%@bpc-w>K2#Vy=>jar~Rsh-#pzM8|(BPTeO&Z&`;#iiQ8igp5#le?!iLQZj#_z
za!{MWXYOgXKU-Q!<@+|=Cm=FR@t7kt+LBM$nk%JT>7h*bZTC(fbLcvC2C?CD0xE;;
zu?J5yCey~|OKD%)_++EQ1K);CLe|GPvCrLS0QV5aIpHx}<G74x2XP`fzv23EBaGQq
z9YUD2;30wgBZr)8Ovhz?TGpinU*o14y0f5$7EVWnUDmmj7!P%hDPak4BjU*(kM%GK
zQ&`Jk-A>9vzbwLZQqJ_>&%#_%&L{VaNVozo;dLST55WZFu`K=pi$5$}{S99IE787z
z*D2Hh{=JFUnWSEXx8Q9o3-AuS+b3L4{0s<=fp8-s<Pz30yqD^k4BK5Zv@08WCh!4#
zm?GrPCEPX=N+Wo<XC$nQ;9=EBxITi14I|;k2p%?#gpY>5;l&;v7zsB=Ak>Y7GE_1X
zzB3X&hFh8EVc$r&J%Wb=BjL^n9)2_u?!qTV5BCg&hLP|od}j1uA~cPJRai56ST_)k
vjD!vN!sx+7h>V0U&zOg=3<O~yOh7eJZNYZ(l;FxG@CYMTJ!zK%7ryxyRxZJ%

diff --git target/classes/de/framedev/frameapi/utils/Init.class target/classes/de/framedev/frameapi/utils/Init.class
new file mode 100644
index 0000000000000000000000000000000000000000..1687760fa49c62376a3444dca645b6b80f0567a5
GIT binary patch
literal 5788
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
PO=hUEqla-jRiNzu`jf*;

diff --git target/classes/de/framedev/frameapi/afk/AFK.class target/classes/de/framedev/frameapi/afk/AFK.class
new file mode 100644
index 0000000000000000000000000000000000000000..ef33fe9dd489861eca4c1d71a071f6a1b8e23910
GIT binary patch
literal 7072
zc$}qK33yc175-0VGH)_@1QJ4U5FvpG$wV@MLL`Am2p|a|AW032mcC40k})%H!kae{
zTv2OVX|=W51-oloN=qxE42iT>?QUzWU9`4#uiY2B*u}Nyyf-sUl1YeP^MyO-o_p`v
z?tjib6CQi@!G{1`K<z&4#ythtg^w%vgbyxf@<|yE%kU{5j^NW?e8z{P_^cPV$^3IZ
z+>2vA+=t@|?)PCj9w@{KB!zQQ!LScAF;a*JaY{I!FGK~tAhI8l;fpdntl$x0KkCDL
zd`YM;EBK16d{x2My!g7XzTv}T_@)nM<6AOiY8M{&;@k51go5w*5Wqb?Jc;iL^*t}X
zFOwh0<S9Auv==`Vv!C(eM_&9`1U)Nff8xbYW%4tb{9JbaLa1N*@GJaU!E-(|irhy0
zM!|0j@H_lo!5@5R#vf()lMhY!vn>C`i@(a5=f%sv$?$hC{^7+x3-JP;7Losw;oma+
zM;!fcKAfM@G_hKYebI}Tym(o`D+*p!@EW0@r6;0yhNHSkP+JT`H=83`Jg&zHo()5~
zVKJd<y#w1K+J4>Kq74#ewq2nOX~BdQjs!Pp@qT7Du%M1`pP^X^Qzxt%zhkw-ifBe(
zu){LLMqk5tP9w|lu`;p8R#o?U1+~ReVmyP9L|@n-l(+Th!Cq5~>OK09LuiBHU{nhm
z!7V)S-oi*Mq*>vZVe4EyHJvfDFW8+J7zkUe)H&`bUL7{VRwH3y)tNL`UrKN{$9gzo
z)7!#^-kykd>t?6c9brz1NR3>onPHiym~N{-%oj2*w`7i7uxaCFHbP<2;vf>Jg-|@0
zu$=qrj5YNR*j~=68t;?X<8wB)Yf;;VaeD}5rXGzA>CV25W-OW(=^M;CI-^gwn$oaw
zSc`J0%%!0u%iatWW{*{ySrJtZyUBqLq4Er>Y?$!HhvS)p6NF?JBRgg^$D&cq=ppo0
zWnX;AVFy#o9lFt@n+=of$btFYxs`gHU=rqJi{pF@Tl<5K(E_%(t&*_d%w{nvLTNYV
zPG%z^KcaQ(5r&&)_A%UM=CF}4t;5nna`QGext0=Kn#6Hw)x;+6%8j}_D@3SjGjuB$
z?b)+}&l-KY9u!cA`ZX)qsqeGcyup~k;#fCHgiKwF$2h~)aGdpS(c^KgkMDk(5wlLu
zx%xB9)VVMj8F(nMNRLBNE2AKkFin=5T8oB_geCP)iR+=5(G%xtNho5FwPlxySyk0J
z>tJIp{_80qzK&SJ4Cx!glJH*6=UO?d;tKW@z3Ah79w%Q#KX}WVWaxpW5UG?$uGD#P
zOd+>Q`Q%YaA+JIOD*32TAyuVmRK&$<vVv0SJOpCGbcJT9R7@o*&7@M!=}FIJ-WEAJ
zOQABAX46?J`Du<yXVYAj&Y^iK&8KpeDyW=Od2E<eT0jd`s-$yOTEy3dqR~mL(qgJ2
zoHY^PIA&?9YS}84s&PP}fJ!x@{X85{aXk(YIJCFnom^$c8n7-Aj&SxUv_z$#oLNfC
z*bX*$xy;U&;R0A(B_z@<aUNA#fvZ@t!)T9LOfbr71DEZVU|e3y>Q{>9_sKSo!&Iq`
zE>y7}SE;lLmWnH3DO9gggKSzfwaidywV1MS!rhy=f|~YiDzrwWi)byOdcxfqxv3!V
zEwW|QMC;@}n^js*8yI4{olvt28|h+|HVMdDB(YqN9<JkRULKB@8?o{TUzcu{b1=#k
z+N>fjUS2K3wYW~DHo51ew1tDqxkphhQj=k86jru&U!jNC@dXoCwGI39P{N8aAY4^a
zapq0_HuHUQ!Z*i^-Y_TJ`JB_EL<>7%+BqBS<wOliwl-(8Igx{}^9W;sb+#DR1Wysa
z<UZS|R1sg9^O4IDf^Bvybh^BkpJ@-HHLhEyL$-LbS1-NIF66~o`_|bX>GxU0Z_x}c
z$)@y1qYQO=wcw~tY-hy;9aOr{5ry;5AciZ3srQBBRtoowtqVuLPr?nh$qr-8<2_2A
ztxaWDIzs(=Pa-0st46yKPp_n0&+KGhn$F<MRC>kAspum3(`z03jnH;|P-k=*eVtl-
zK#)AKgIQ?Wo-hn~)f-w{1$G6Q4vSEGCe)4XQHnE%CCE-ISXz~{@pEzGXW!4*)NUBh
zsUFX=dje?^$Ml+$op7;r+#qCZbeaIJ5nR8NAuW>7xAt-eRMncJeVlIU@zLiBInOP=
zuJ~qs|ClUJ8^N8+w0<qVO*f<Ac-&6=ITI%r8^NZfT55f7LW{&(`iz*VH*0Zb)l80>
z%8kMj>SFOy9X+*g)zo{#`#5mg;Giz*mQ1NhPdx|?j*#}4c*8G&6?2yD`eF2BS~A&`
zUQwc&#rTx|%G9~Z4e|Q=Y^BZpn%Tjw>PAR!n24VfKE?6zNINfQgrs+h2e&)=MR2;(
z&q&#{O*6GVQyc8J+dxZRSwdh6?`maJC{@eTL_x=<tzCOMH|*$SYbI`S$B7U)hq%YJ
z<esalcTaqD9b+N8JKix#Cp})xlm$x(n#RF6EkY{bR8-kVXQe{xBtlo%>R+!}8lg1@
z;-<pM34s~iW=!h|X>lt9z8TI#9*=QBOnqCb8T+26bI#s1_G{DPDQ@MfmLBI)DH`0p
zj4m0Y^9B{zh27lFUIsUO(zi3+4ImF8p7&(Ub(BcgZ`1u*{4lqy#0}X1j}hiP4h1g$
z90;5Q1!_(pFK`O3ohRWwf&3J8KRg*qsY$|HQjmmiO-)H*5^5lcX~QTwh3Pw4#EhB|
z6uU5tlA2SPxie665~Xuzl=k0j4<neRpzA){kSLD<HX7`d8w*f?g(yWO=HXmaVG)*N
zF;+9R1=VbB00!?YcT7bLgZ3Y%25c9J_pZWTm@KtG`oolKYk4=f=qNc3ParUivJuQC
zBym=j1wQ@+mY^85wg%NXfdq#5vq0MEl(ahDDQg8HEeZcPA<N)pLrx1Rz`m3a?#@#}
zR-}X!Izr|=jI)nr#CYtb6<Hz*Ga|0e*s+bHC2RAJLrHlxmpI_(h-1!t9^tfcMRv?q
zact{x4jQtg&&x=^CYP5=PA?nT%ZqY)$?f=fFBQkj`D49Ym(xrBPL&d|JSD>G1giY#
znDZO6&U;hm2{+(I=RA2iN*?AJHIJa;5c+E#Mn!$TKfh$b2o~ny5SE{pM5O@u+(T&f
z=Z|2K1aa{p6b1bG?vkn`s@+GKbfri?CqsZ!pk^3+a!E-o55oxZn8eZ%EX#xYs7tJL
z*;X!R+knlSTy2=f81|!`alMuK+xQMH!5Vb151rVAE=Knbwt2VhQ6pPD4SR4C-VFH@
ztdYUGft&Fb+g}53#oO%5FmMZd?y{+acsu+24m&EYm$62{t-cpIr%1k`I#J1cg6;8g
zbdCicK%V6B@+8i$cc*6;$Si;EAzH?PT9L%cLpTwru|tzYUA>377fLu*)#ulw0#=qL
z>POI!hxBZ<KYti&x=x{yLv~TU;#bmQ*7}uGXxe!k>rSD0r^7vo^+{|viH%8I%sMuu
zrL@S64WqSd7@JekFKOe5r)4cE*}{Y0lfH!ZJRHVTX{8>&=d@DKq)MmcjSZjiwjD;#
z|Dkbfn%L%diw?Knovp(y+*UgY9b6scN(shC5f}ftT=dJi=m)siujESD#I<mTUF^e5
zUBS2+;JOjPU3~HgBjjGj(lg9`mTTp6TrHnRoTl>^|3yep5JR*QSJDRTqs`b)?YM@z
za4mJ?I=TVZ(?J}dJ8%Qtg&XMzZlZe`je^%+E(<Gh4@(?k<PNgtcj0zM*>k)il!vA4
za45lD8qG`z!pWv?!@C8|Ox<Clxrpw@olLp8u-%FGFqLoPx)`ok@T`LO^6yL7`x1u$
z^2d-=$#}tj6M+b)=p{*PZ>mWb$2xbJyIe0tN3;}gh}L<sW_#<rWuAgN@4}oEz{<Qy
zbd~IIAaxiOX|_k$JDELd!?Dc8l-cQe3#ZpX%;Z$8V3UKmHIvkAS0<GscERGtmoM-A
zT#NGf#7@4ZL+n8X7mW`v<>Aw7@Ij`$w)3-*_Zrs`kAe@e`)>XLE@z6DK8%mB2nj(D
zWLJoM&glHHCHMBMl9`{f#pww?%KtuQQ+MNy{JDVbn8}^S<xEfK&pmwRNgSbC$p1Ap
JQR7<w{{Tq|RyP0u

diff --git bin/src/main/java/de/framedev/frameapi/mysql/SQL.class bin/src/main/java/de/framedev/frameapi/mysql/SQL.class
new file mode 100644
index 0000000000000000000000000000000000000000..b5ed672ba5a1160a18772f0411dfa9828c79b10b
GIT binary patch
literal 9102
zc%1E8TW{P%6h7mm*-Mg!2Fe{e4U}$5@N#{iK_IoHQpE;nHx#w-GHajROye6f<0ySc
zNc;#MkdXKZNJWBop7}k9GxlcJMJC;%DA`cw!SU{#@A&ha?;Fp|`j5Zv{{{f>!h1Dv
z7_4dKwL>AJ_Fb_n+CH}XN`&a+Zhj&X*$(gNZ-RFBMyCd|44%jW0}&0{pY`sdXBf<V
zAR}o$WH8fOy~SYmYV2bT8Vr`ku^URost)sP>4z^Og*py)(dS+qCNdC4#t~0c+zT+&
zmwB_XwT;|IFA$1?65;KL0rC|e-F<fMK07yKx5E7xHIHJ$Lt(saZYTlnB}A{7fNs{c
zH|ttn?g8m?1~N=yWrzs(L}YXKkndA}AR<-+x0mkhNb|7B?80<~sfxQECV}*byiOBT
zRFp^?m3k&tJTGx;l}pXj$j82ns6+eILgyk4OflN!o2j<_Wuv%=Yz6Yfg`j4mYm|%z
zB}}-9x!~qrf{zq*C6$41c^`7@VFZ1yFtH-;8euTRs7xTmcw4d%&35eb0h+6E6jAq+
zJE#JE6^EIwZ6x2kO@^cteN@^eunnQq+EU5_##o|yqqDK+VUqdmU;<bEUB;W_oYID)
z!i;a}$m%x*GCVeUSBm|gE4GqfCBI5Em1w3!G{>f_V-?LLw|)~fO|`rDFp7_x0`t|$
zG|Kewh#&Ear3rOdT!2$>n!(vtXS{&V!RvN`zto}i-KS~TL$xJn&CX!C6MG`KC6u(E
zhhNT`ZK)Z!ok!VYSZ6TrDI`k{v$RS`d{xG)4o@@Z+X*%oPQs8>tv^rjxWu3-BaO;@
zER0}qxkSMeYx;TS{CNzTJ~6A<YW8?yJ(4Cqb$ITPPbTunB;Q!myv&>*r`0r-11bj$
z9dO3S0CNXikA~BoixU~aihPARUp`K=ol2TVD9t(CliJYi{r&$qFt6UJ!)wg>X<CQj
zY9FE6M;Oa}hAP3}>%*IbbpH7(`Fb5LF}5~=9jZ-@QCa5m2W0kWtiu}&t{vQela3|~
z7NyRzZVZRH(yfj=G)e8osq*lew9n=``67FDpa$<e@FGMGV6d>6+jEO9qTxJ{u)zK`
z=<F2C(Xp1jdoe?20L@>aetWt33oQIjpBz}C<6PE4$?3R|N5L6brvKl=lkn6q!zIe#
zj53@p$*`DZa5CI8@N5A$Gr~Prg1a!nHQ)t!v4EQ$;a)1ieN@1m176DWd<pJm0rv{L
zTFUc62@VUmi_j|Nxmtqzu7G<TP8V?Fima93elFl#Xitp0Kf*ciW_Emw>Tg>e!oK}C
DuP4})

diff --git target/classes/de/framedev/frameapi/enums/EnergyEinheiten.class target/classes/de/framedev/frameapi/enums/EnergyEinheiten.class
new file mode 100644
index 0000000000000000000000000000000000000000..2f2fcbaf651a7d0947a51163cfdf9cabf415d844
GIT binary patch
literal 1831
zc$}3~U31%15IxtHEm>6?M~y?0Iv+p+w$juDTD}rYOmL`MJ8rAg8Bcjp9Mw@rmOHkb
zfd~Epe}owxs7omW1Jh@I6vOU~8uDRgh#v0lJ=#6@?B13B`un#(0o+6*1qGk$*g#3e
zl8P^MOk<OmFZoTGmn{u58otuWz0LcIhOCA=?B3NdtD(wnO~agqZFcJ#<~7`7_r8h;
z0!pJ^-4VE6-FFL*drrsQcMp#o=c!k4gF&ZXC<kt@{cYI`4qPvEgEfI<sdlgYpe&%*
zD%HyCjj~(XA+C7+c8xXxaR`{zC(fZ$@SUJtu*04gv^m}BbO%8wASwdtVxv@jShfXL
z9$iqyq2mwSzCa<DzhJ7e+1)2~V^uG3w+Ed)x3}Z$`GlyFv;J6MBX?eU{$i(?)o#o2
z8&1z-^5}%*x)*q1Q6N9!fXWCc-ypr=fk%a=Y_A<S;h;x6lcUl(R&BfCwru`HE<dXM
zYX5aWW>k$tks^vxbVu=Ao^C1C{})km@*Hiw<wvDZ3<1RxWMyi}`bD}`Bw@PU9rRl6
zmdAaXI1_P$$qg*>x3FZu2928a{|_)=;h}*QtQvR=ZyQ*^n>_wqKV<ZVff-!m$?iOL
zd#-^j@AR7IdrpMRGNSA{AtlVQAFm&D49v58<#go&iI(3D&Rs!$?}^(AsnS~~8^7s0
z{r=jhX*<ojwy{dz?KJ%zw2f(&3y{r5b~dtek)3Bt57j9x6%C|kxPi=o6yCwR5Xi}Q
zLdNJrh+hzUh4@djqY<SwDc`9SZ(%u#zloScbyKl^MdB3{j*p#+zfP-h6cuTRai3{r
zhOZGvf~;vRXI~;|Wt10Ct(6zho*grpR4uPbTqULnj3Xmi7butULR6tC`HwKJQo(zY
zW0g*SA0I@T3uIYM!ulE7S-Ddu<R&6wL1o^Gl8Y1_<7jL7ltf*kS<0D}43kGu$I_Bg
z8Xx>2J{loJ{qc;Dg^@x&#wX{5T%(4a6|zV<OaCE+J3}8WKE+zZ^#h^&eD^z)rkRSH
z`Z&ISiA&F6NaV6&UKx*NB{C+Fbiy1@?@Pdxz}2KVk=7-Uk-(&CzLEY$0#n)_gv5t1
z?4~lrnB7baVcN~)5E;9v4l!jvhj?~8XfskyiY`&7LM~D74Q$~uc4?Sm(Uq>_Gii(e
E0Eup6jQ{`u

diff --git bin/src/main/java/de/framedev/frameapi/mysql/MYSQL.class bin/src/main/java/de/framedev/frameapi/mysql/MYSQL.class
new file mode 100644
index 0000000000000000000000000000000000000000..a1ae1d698e94fc6e26f5bd549921c2e06e41286d
GIT binary patch
literal 4937
zc%1E6TT>G;6h0}1mQt<)-Zh|TLEWO`lQKStID^xA<1)izx*OWS?q*GPEBrD?ozZvy
zhQGi+;CMDIw2W1XTvetsIoZv3zH@StoSg2L?;kz^z<s!vf&>9eD?9Ho;pf*_mE|3t
zUscTG4zJcaED(8bQ@?TZ#g&Cug%l(S3>c`({Br(9X^q<<fu7<fj=ofURcsI#Dl`xa
zp%Q-iA%SE?YD6X@%@u)kz_flVm4jV}g{;Ih$H71<#B|uwCy*`7O5aC%A$`<O;Y%%D
zM2*G+ad%dF9`l_A?mJw?kY`TGUV2?1&^04`5k5ky+~hLy&Ps=;V1z(_!?QW1q)NkC
z(*1SGR~!ke+@ZGg0^zdQC=HY>x!ltaXr_Cy!l}b;mnj4V%wA_@PRAW?ZN<ylikD^L
zHBKGLHT7jkJr>#(8X^JT2yi~l1Q>oR4!;%qW&MV(=7I3y2%#g?W`4|F;&jXP9SB2*
zddGr`La{4Qs<Ksz*4IV2Ph@R_wHTtIq>P4}0dEsj#C7;{6aS!g<NWQy(CR$yqVo7C
zR`lRN^IqTz8y(hB5YG)K9ID6;rJ}VQn46?R(+Fq2Dtzu(v>53yKJZ4(-K4^=%5_c|
z8ma7L*ju0v82ChqDpy73V>)WJW=9_BwmruSXKush!D%!OD;lS}tpS|d;C6(ERqroT
z?mO+Zzs&nJb&T8O5O#eAhT(h`2H^sMk=)M(YFsAv7cg}{kGv9Bi>wrvnnML?Gk2LO
z5kJ>oCc}!*1f~mntDUhx?Je`LF*gEzxyj}tHx1(?@xF~>^z;OukPLYmjV562KUxe;
z!vsmtW7)`m?~43)Hw=MJ+m)K9AxGfb$xeHRaIOes7G$Js{#3-bO2%9g<~u+NZsT*q
zWC|<-!>#^grC@r;_n2DP31o{xYwRteAq`_dpaTH9@z)7mrkASAbX|7WWu`8B>M{$x
zDAUjf{YDO$_eo?NgduFtn2$*v*aOIXgyEH;(RXm}Gd?BYBDP&-guo?ivo#c4hAW2q
zD$qK^l<{wiVXOtigkeY+y=&W+cj{elp*Pc{cjFg&H(Th<Z|fys(zH`>*F>NLZowVM
F{{WoOPeK3y

diff --git target/classes/de/framedev/frameapi/afk/AFK$IdleTimer.class target/classes/de/framedev/frameapi/afk/AFK$IdleTimer.class
new file mode 100644
index 0000000000000000000000000000000000000000..48e551f95484dcc0b61976a9b5a602ab36b7368e
GIT binary patch
literal 2195
zc$}41ZBrXn6n-uVY)CE?0<^SLq)2NBkwsgzO0Ci;HV~keN)=ykl1;K?v!R<^EY{a*
z{R<B55Ad@y5*t4_{p@!~o$+ndKjBPAJ$E+&(gs?Y$<4jzo|or5=iC#%`{$c)0i3{R
z?HItxAP(cHAfCpgTuue>Oc1B>th{?pE>lu`CWJVi58(w&hwviK$|a#-CWu)iL+Hd@
z5c61&%Q*!vNy+&jdax)JF397{0W8VGMXB?Of>#wRD|n5eZPjpcy2&t<%xG%X5=AYe
zt$7=<s;fnzo9Y}blMIT;7Hqw!F|Y(#+IhV^GQlv|+>(^lsp(m=YdfWzx_z2qDzdlg
zy&#M(G5F)93?bN;)J<*PDW){*f=C%82`5WwVJrztm*<+$FF`W2Co&`==oSM{n5JgM
z4N)#@bhS66ku5{Y!)G}}lrJJ-1oYYkkul@aDAuL-L&=hrQ&Uc%pxdfu+Pb~2o^$WW
zLC2yk(uFy(>Y`KdI@ORNxL9(mv^K3vzyS(6z9QBH$1on^7{R!LH#pwJTO4mg)HGyd
z1u2d+G8{uV!ZC;kIW%My<T&!s6|8U+U{Dy2B211FRvG$t!>8a9hlMhS4M)Km$2+*p
zv5t2cdUhB|nr*#A{;uFXj`yX~2l$ZVBYeyNj;r{D<5OH?ICg*3GIYs|RYRCLbs@E)
zrEMzbw&=WLnzb6cLdVt(HDPO(uuEh-xOdkugmRjlFw3?u)8u0~GJ5Y;Zzq#@$;|3G
zhT~+gBmcB3b}W|!HA_`fW$EHO#pFT#pC;5pE=)?jFOu9&e$lpcGdDS!@IWnU)|zCj
zuMw0drm)?235i{@TQCiJFkYpp>-))ko6C5~Fo<*ycyBYgZ1^q0_cs{V3n2$YUX<sx
z%eMPSmg)7G?xDA?zoWpUeR!|#VCW>&^<JYV<E6YE_N*x9Ni3t1;=GVAu`y7MIpX9l
zE9wcViA}XG&uZ&;FkS;F6Y!C1YU5_N%`yt@fXr~9u|)L?IS{o=jxeYUA-(LCWGY+O
zrS62HqpaDUnm2G-BQwi#2Kj`vnuzQ^a+aGol!mJgrFF7NTKAPG&6@%G*<yGAK7{4q
zf&8N>1ax)DxkaZI`i$TxX&s|oo-}>*Js2I^1dD!+mgr6RD)5I}D`?w<5{+#l@TF__
zFs)(uY5f81_#XZEks|$sh#SN8f>FfWn1gOK=I$hp7TQ08aW5+4<fWDFZbZLApn~=)
zf(%uJ7?NXEaE1+BrA-IJEp*P2602Zetcos%3c5Eidxt1|3q7>&mHWO8#60;;?7xm7
zQdPQo^ViPAjyV1*4)`IBW4>^I1qU1a)IA)!_{G0hWXe7_<zWP9{h28Hg{JziFz_23
z{7z%_4}6Y4aUFkcQDC4KDkf-mlt%WWc+92yMva!^^y!B0Ho^){+(uEs<A38IsXXEG
R`y|HbJ4hT2(0>F`;6GX(JdXeX

diff --git bin/src/main/java/de/framedev/frameapi/utils/QueryUtils.class bin/src/main/java/de/framedev/frameapi/utils/QueryUtils.class
new file mode 100644
index 0000000000000000000000000000000000000000..2c500f39a519d0b548fdfe604c2c1cdaeed5b108
GIT binary patch
literal 1655
zc%1E&U2oGc6o!wxu5ChDp)kHb%&s~v5{Zu+I_-jqNk|<CwVQ;*jhncwM`A~|Q?Xx$
z1QOiyqYx(!rA4czGVPK`aZc<fuV0@W`^V2O-vHnl&^lBIJT*EBQzm41%%&`ic{tK6
z<uRX@0n0>~TalRXUC#B%VG-7$O5lp)6DG&u+u<>fEP>jNkizZ~SnF&b5vcB|nAgE0
z(3-Qav{t$Smq=xLC^a`Knev!MD$PW~tWc6>S`8DPnitgf1`|$W9wkg8l(Fa|8*{o9
z^I&E&n3)Wm$t@ZyZm3k2rp!hYYEgiH%Fy1T0IoSG)*KYRf-~ew2O`asw$#BzKaH3y
zrWkTMTY>MrPP0Tr!cvoGT;qzQu{w{e(zMJ^XPXK`a~boIkmzQFBN($hv5Ry-4{~E^
zNl_*X`=#&#<a>Rqg&Z$&Lam~V+LMg?-kwSloVm#A+2BfQ{{X$rMG_ZTxM21IARiiV
zxe4pAL144fn^$J}akr@4Ru6OkCQpZ44;U6Bfp$+tEIDFY6z{(~t9Bv`f#<z*?4d4!
zhT$30%%akhPH+CNx=T!*?jqpz#aJ?%YZTaD6xcaU@2)1=fLnxoSYc!SFTZm_1pL0r
zb;S2YQ9`YGMYzML4)>6lC$0_;{yJ*QDF`$VgfSQmP}9I8z%v($tAf!w)Ud6)Lw*e-
z0RJmA-naeF(ERS07Pd7vg5uaVOA4++8=oFrgX>6bI`)QBdW=eyKT0>3C~Y{Uio0*S
O_6|IBqZPOd_kRHwXa)5E

diff --git bin/src/main/java/de/framedev/frameapi/mysql/IsTableExist.class bin/src/main/java/de/framedev/frameapi/mysql/IsTableExist.class
new file mode 100644
index 0000000000000000000000000000000000000000..fc0cfb2abe025af133c3ea1381da75ab365559c9
GIT binary patch
literal 1463
zc%0=_O>Yx15FMv!lPrOLK%smbOiwL`-3thbA}&>tDy1MusZ?&x?j&*9wHMo4rAK}h
z5=e08M<K@ER!ODOBE*fAc09ZD{QPFd_K%-mz5&2vc+i3dgD2LcNg<?4j>NG@GE9a>
z6qw<0?TAt)#fklxC%blE407C=Nb6eAWUv%w<U);-*MlQW9fO7EQc3rM!Q95?0fXkY
z&aed?28&bdjxpM_;TmgvdZ!FpogZVyQ(crY7fx!$OQUI_!an0sXMc=5!!#F$K&41O
zh!OJj4C6DI@tMpx$Xw@{M$46UybvxOb4LU?DM{We0c9QgtYfb$zJ#t;Ad6BP#{-!D
z@>D3l!T|YM0{<SjTa>v>rQ^0L(NKYub*4(4HoPwP#wM4RS1QAyRFvG1BIJuIceCi2
z?^V|E8pVb3)u@SQKvAdfj8vlwlyIlH;O?YE4-yUwRPG9#&#^!^))^n6+tx~vUTQ5#
z9vWSQrg$XZJM6#d5ycRV^#ndpNNc^60GQ5=I&aZZZhgFJb)wvvq*#W{bSX4~HeBz*
zJltTgy3w0%(z+U3eiJYDsBW*SVt^(b00t{Por?TG80o)He>UA%S_V&he|4a?7__7f
z?r)U5Z^LcI*8bqg{Fj|%5cPFsQhX_WH<o9M8xDC3?wz}`>MAkl?$sjqiN(T0pt}qF
z(;#mi7Ra{3bvZ{KK=c*bhbz%%=zb5FMY0PaLgZw-H42ttg~krtgj=T!kIpfyUcj&v
S7#iWd6YLt?r?E-VyT1T&H^yQB

diff --git target/classes/de/framedev/frameapi/cmds/MoneyCMD$ValueComparator.class target/classes/de/framedev/frameapi/cmds/MoneyCMD$ValueComparator.class
new file mode 100644
index 0000000000000000000000000000000000000000..3ded1dcda43247c46b1b82dab74185f9abba6d84
GIT binary patch
literal 1412
zc$}S6T~8B16g{*3SX;KVBI36q*0TMOg;GAGgv6AXkbpka@IGzFy4dbE+bxD);)8#o
zFD8P~2g9>J%6MnCC@m=H!|vQUbMHOp+}Zv9<Lfs7C6r@`VK$C9Oc`azkV9TaA&v;1
z=$MNWXz5tcQPi=>5U%mAU`TH7@qKRfe7j}s@J^W_R<)ZB_j?|lE)Acq2iq2RnpV~K
zY^Pa1g>1ULT1%8Ss7KU)V|UZ@4C(ELuwHw-EgE7!2zbY~>g`6?+HoCmP}$j(`Rlf0
z`x^|)=4A>-G-r3oPQ`5~JGLWU^x8Gyz2c;XVPe~@^VTl+Y`GtRVX2R@cX_KPDsH>O
zJ?^_6gR$i}!mG4+w<{>2bO|--ktSqkYMAq&bHcl7{?|aILA|aRsL8DP*Qx=M-C|%|
z`ag3-2Q`L7)#vrMBx0a#sO`(zo~ZlfvxscF{-;D`>-QwiaVI~Hc-8HBb@AMmtcjB`
z&dFQ@DO@!$fsz3O2^~uYma)Q+8l8%PRXiQS0|o>4a9_t7L-F6QZm3`2jA8OTYYZV%
z-b!NVItgtGD#@HP%IsN)VXUFdC>g5dCd16dx-m^Za~xC;jedTb6vg8dX-KA0a)uO#
z2%Eq)!X|0gq%}lqGM7ID%YBBHD;y&9Q6*ld_qaS}3y85I#@QmK2%8Q{a09mi70K32
zMUqs*9YueFBnb&*+$D@Ig5Hw+9m1-UnfruL{tLnyjuAORRPGC>_U}I+qV>c55mhTl
zvsGl++9_4$FI6TU5XMyWkRlB;f&EPC8Hso_5V1m#EKKC`$IuJ(9N|h|sg+Do*?|=l
bL*OVeU<eI7rSVv;8Qh{(jz5NZ+ys6C1x!xH

diff --git target/classes/de/framedev/frameapi/listeners/ChatListener.class target/classes/de/framedev/frameapi/listeners/ChatListener.class
new file mode 100644
index 0000000000000000000000000000000000000000..42c5841137de0cafd71f00c7f18408509af7ed0f
GIT binary patch
literal 1624
zc$}3~NmEln5dMY)9)>3f3WytV4@7vbxZno3h6GU%OKy{73?na-)O+)&!vEpHU*OqG
z5UKLu(Z6JsWzQrE8j#{L)7|rR_t#6!_n%+B0=SA-2^_@v1X394z%bGdE+jC5(GGaH
zm_Qtt%yHS+t~j`wKmzC6an0Og=H<GPZkXeyak=GS+`(-JcNp4kOC|MPhSRBRQFw0x
zUKT~MQWtntdSxz^m!o5RXn`R<RVfOFuB=pICMxGeFwgToS$eXS0{0hqAdTKI#`Tg6
z8Ai5`?8{IKC4$hKTH-p}(8h^V)sIS2F(h}RMA(Wl-VB#g*-B9I^3n3L)Sg%oN_$nG
zuZqB%2v=2M*2)I^(7f4dS}lxWbZ@Q<`{y(-Ea!N&QRu*nNNHIX3o?{sm{6*sxt0}0
z)eklYw_%=eRrGDWiMdJ?6vQKGLUnI##^_tV!d>*@u7i6n?qkBiq>Cv$U>Mq=H;R{j
z_cT{m96WUK2#*~+aq$!x6L8u^7C9F)c*f9g(s({sC2vj#Qk5nn=@&)7koxwq@E}U&
ziBIxf6uc8sCrhFnX;Dmm`<P!e`W=$ST+HIRix-$P(!7h8CeH$<8Pa>0KEr`cF3<9B
zMS;dM(A2<9cr0ZG*}VlZX)g*?5_;AyQlkxK$A`8KqrPU|UmzOC;4Tn`&Onq5gTM}w
zW_)9t<@>YHJEpWdcwsNA$FR><WsD5R{w{~!rC#;wuT;n3o!%H6iZVlkU^qlE{+&Mg
z_NJPxhOHyRoEg4t{33%J3O&VDLHNEg##4(1)yAt;p-3OuE=-fDv2EjZUh~rMqVO40
zVdj7Ec3r8P7&<~qm=j@06T(UK(1%II(eK$pcQ5+r>?ds+F|q(%!)sul(K4J~M=XX<
z7I>J>P6B`&<K)yyZUdzC)m?A|M*%Ax!*L48Z~}w$W&*!Qt3_ot5PzMnp>-W?3~O*|
zX#aq*bi9Ur#=L>V>os)rxHar=hIZD_Rl|XGbhlVeG0Ulk*nqP4QU0Tp`zht!<dylu
dD}yAJ&Txw4R<IugJWXO7na<G7aMqT2?iUO3w8j7c

diff --git bin/src/main/java/de/framedev/frameapi/utils/Information.class bin/src/main/java/de/framedev/frameapi/utils/Information.class
new file mode 100644
index 0000000000000000000000000000000000000000..5ea3ae03e9f6da771a361019bf9db1508f642b22
GIT binary patch
literal 4291
zc%1E5ZBNud5S|63cPGk=3W{$lz8$Eo8ls6B6GI@m<j@$A#E*OJ-m%i|Hrwq5et^Hp
zL=*k)k1|g8IOv6o+yN>?K6H26eV%7#r`zf5kDp(@0l+*wc3^<Oe4>3XVnTW!S(AAI
z_v)HOJmAgNfW^W~jR+I3BI`;=%m^hN7$Puc2_cgW?@jF^_YHxex(GRe;p!6h&j}3r
z^#*}+_I5$Zx@e@@3gDd6<T}A2fr;vl(mSJtY~b|ptJJJ1jhYg@AW%X_wi&}OgcRl_
z8Ys`MB4j}Y+<^%KqdQ8AS}R?E^Q7?fz0^EWVUq{cS5YiN>jRCos)amCp3zcqWsTE-
z`ytZ^ikZL88l27q+-*n0ZAZhk(U_ru;t7??Pz;H`Mhyz^jTpm_7r@}US#aIVFZVZc
zEe}K#D{asb>NA;X*Ensv-hoiM;nvdibz%Mm(k@1*!-Qo~=nAYvaVUKBDM@3l@%_of
z=+rk#)7Gvl&r*@lR0g~*B*q>$DF(34($M75E?rKOEVLPlGMT-smT(SKDrP&iiyzb|
z%Bb0ldC!oJ{k{kO1B=4F@I4uBeLnv+Xc<4ZuHie1&i-Xkzx(n;bZ^mDTC>fnNV;Xs
zKPJ}iO7?@_15$ajxZ(5os2i`yCJRN-VZTRi3C3Y^1kS<~feYo`MM_qBj8^e?@;Z%b
zT(7WNR{Ts<mCwRerbTwY^>E0niG;wD>VB#%tcFSrZdTjX&-wD~Zf6Q`oj}+_rE_T6
z1iebOy(+*Aflr5J{y;gLKoO(WE*~8nzqS?Rne1t<h@3?4b5X9y)*dN9nGC+|VI{{W
zMI9f}lVp0NjUOPHVzzjvQtk64dqf<|eR=k9<iLGQli8#LE`jk~>vZ5@$C<OW1qh5R
zizLC(3R+3v2H>F(kGI26fK%84_6}YEB`D&R^{2P`k*)rW?Hy#Eg;8wB?D2RIM>zWx
z#y?D)`wSPp<J|yUwA$GWflJtqv`{b&m$5Ix6}Y;kFlYT}D_rZMFliMAERVuej<;j^
zMi<_6j(4*Udo;(p)d%l(j(58c-dv7%XFIZ;yt`d^-ZpOlW^FqMkL;TqgnRG+yk7*J
BMuh+X

diff --git bin/src/main/java/de/framedev/frameapi/utils/UUIDManager.class bin/src/main/java/de/framedev/frameapi/utils/UUIDManager.class
new file mode 100644
index 0000000000000000000000000000000000000000..d8a74238b8e3aa5dc683eb79282d53d4a7a997ed
GIT binary patch
literal 5436
zc%1E6-EJF26h4zUUE72vaa$<=L&}fMk4+&IXhKSx2Fa4$BAi6(<#=~&PqRC-nw_<p
z*WiLHBpw3^B)I1lco)Q(b&{s)m~2|hE~1upJiGJFH{YB&JLl~D`S-8C1Hc+=doV{}
zEzy1>VnR0Vvmt8)ywTGv;sGCyDl8U_)QB)??Cv&ix0z&pu01FaSk5|xO!gahyZ5<o
z2rQ(j2oeJ4S}l>7bpoZ1=u2i&%?X^(9&WTO&-x}d7J4G&7W^&#<Ndtf>l3(;-EJw_
z6a7>(Bb2mQ%WSb(Z>($xDa<C0P#rz0?ICDO1>A!R1eP9Z+tym?B3vS+A9tnZi3*22
zpuUP?5oYW()~XxwD7j9{rJVt%0rx|u5fn3jAE!%K171I}O8v+x^~@@(G*CRDQW+XC
z;}57o0{$RIbDShVBiF5w>sD9&U+6{(L=-D+Xa*LF`b^pZx||;Ae`1&&W%|H?pN3Gn
zU+<>-`@&2OX}!_WK#ih|nuC~^OV+baf!x%Z9ps?0PW|+dHu{irGLOA8rx4v^QFt0Y
zm!cddYDRG=d|ZVjjk(5GPbNmEzEPTvHjZkIiiD;z;5{LEP^aw_?TK$u)-61sLJrkF
zrwj)fJj#$uz^ozVQs*EsJetVL<ye#E-R%cHk8_gEZ1AQWvQPw%jDHs4)6_a^7dj(k
zGJD%(SkCHW&$Um6<xU!g-zgyt*Ll5sCPphm1zui+CAduBQnmFkbL$u_WIxO7mRcAX
z?xazd>mAm$S!1Q8d=~C8E$sc_!-5$IOh2!+o+PQotg_PQlA~t+J(GcoY$JhUwKhsI
zi$Dqdlp~3pSui2sC2YvIY#u#dt?d=z9Rfe+P&~^xfTBai0u)_@_X+&<jLUtRutlKk
zYmWY91r^}~0zc%O?R3|p&&@7=Zx!KV0)uHeymj8uxcIGT-Pm?%%8{wAlDYZG2zi#a
z=>KwfnTdAXjjeAYt~1)056>CO$G)9-aE-u4SMVdSeAwgo5TXcQ5weoQvHo8n84cP|
zsrIvd3e9#RN@gb*9(;|#);4-@gTTsT^d8(qfYt877S=|Qbg?ax1Vj1`j*-CIfI$iX
z3V1ERIlS|*HU~w#N>I+~FTf($--~b_%MxOiU>VDm>;!8b5dh`ipmMKr@fUdMkF3ut
zSXwr~>s2flvw9g`gV(cXZ@`-;7|1chTMmZH4u%3MUv)BEaWGIP!@FY`-g7Wioeb46
z3^fPCRi_<39Ak%%91Pc;4D~T<;bPcyGBn08eBxlZ<z)C2KEs}CnN0|Me&|DAIOg@G
agR|}6oWt4Lavg4GZ40o0>c2tmTmJxo4RyKz

diff --git bin/src/main/java/de/framedev/frameapi/utils/Init.class bin/src/main/java/de/framedev/frameapi/utils/Init.class
new file mode 100644
index 0000000000000000000000000000000000000000..25fa58409e12a205f75ff511f096b22d31f183d6
GIT binary patch
literal 3575
zc%1E5O>Yx15S?vH(=35P`Tmj&r*a^<Z~}xxLlJ?52Bj4B=<E)O8?U{xy%G6kNFc$T
zABC9Rr4*#5YYGP>h_qS9d47H~_KZEBzr6nl0C(X=4Hg2pV@=dbxKOP<KIN?#TW<_c
zFve-w;HhY3PDtD8DB)_b6u_ARDY+W8wuXBcxd4_^nT>>^Mz=>?_o?wf5dL8R_4Tsr
z_D%pxZ5?9`P6n`gz_DqJHY;!{Xw+XRgI3Ea#w^lFDkOJ8E0!8Pl$h9iEUa&jk;NEE
zZU~g}Xu?OxZpGN#m)+c#-7I9^VzEZcly)rPE*djO1o$>3**_AH7n->jnz^p#5p<;j
zk)+x<62c;`a_%9red+%Z{|G{xQFEA0Cc^!N$hKD2nJjYJ*h2u!X~vnGr5M&bNh(D|
zJT^<wP~?3d$;$X%zs-bYnTqj^P#8B^FS9NWqGFhwF`=e<f{fE7<DVJAdLH~00z4r7
zBER&wqG&Z0*o`CnXSf}=dygv^UUQQU#7G_Hxv;*e(2Qmk6eXy7s;;mORi#aBPN_<e
zLp|}OzmD&yIZG1OpXBL~%o<d17r00Ljt^9N_^GXvgsXT%>S$7F{U&Wy(;lOB)x;e&
z9UxZYHt4A6)APH#r>7Nq*jvEnvHap}8(ewF{toq-wXdzn&t?zWxjRWn^b6>@6zy@Q
zCQ|c!wT~}khb!Te6&^i#Ub#u5iQ_^ZI*rFdRSD>Keq%HIoF4cL&2u4T*{XmK_!JLf
z$^%@oT8b@Hl(ec0%ZK=4w^CGF`7z@=;HWIOJ9ychJABHG;B@iyPSRZ@JN{&X_T+k|
zh5D1z4kTjgNqC$yr24!MA%xWi)Zk127uLH6#lpZDp+-e9vD&4}$cro)qS?-uDS)-E
zj=0?Uwrt-zm)uy`09xH&Ds-rV2?she5$0)%s+hd9C=N(aN98x1!awe*K*LQmp4H$=
z0F587T{XBy)91$0A3b3$Dc>gREZl?u7O4m$$#4Rei&j9^uF!YAD9#pPf!^T<2zS>S
u@8I+&`n3RO>3f+l<w$@=(GKApoTv99TqsZ%;S%JZ>-4Np?`60Oi(dhFdb1M%

diff --git target/classes/de/framedev/frameapi/queries/CreateTableQuery.class target/classes/de/framedev/frameapi/queries/CreateTableQuery.class
new file mode 100644
index 0000000000000000000000000000000000000000..4617bbc5ecd618cf2d32ad00294183d5d9ec3403
GIT binary patch
literal 1851
zc$}40T~ixX7=BK^b`v(Gra&p$vP!G@fTmSGRFE2CXel935?bkWI<q8Ox-}$mv+2lB
z@n7hSv}$L(^ulX@j^p^8vs*xtUT~3f&U?=LKJW8>ZT|ZA_dfv4qL#oIX5$#eoQC-X
z!oIK|m(MkPk${F-xqPW(QSM7a_zKJN`HqgSbrf{0=qM)e4N5vzb==i(Ps5r()U)=Q
zwm_=<!g^`tn^tQ-U-ew4wZAAZ<UFgiz0wa(*Xs(1#{yct-RvE-C|&dodY;qFm#IMY
zc-7f&Szga2-t{xjOa1uEG)Z(^=fH9g*X=`r*pkz7yk&vWbia1yp+KbAZV-F8?6mAk
z?_ke%Yj4@N>sIrj<vLOhE+gJ^heY$`hMj-rS_gK+e(4{qj+6hsXS<Hw%@<wU@_dsA
zygDSQ+v&`?ZDM|61a<~+9}vyC9q3)#^JvP5ii6T~ZoueX&uKOUMi}jY+H30Bb_K5V
zJ+Jsr)Jj%8tNz`F)ltxFMV7SM?zwe))sZzAJ?r?U#4=#wzJV*45V&;GCk5BF4rQ|#
zcpo1axQuau%kOY*U>#*PrD<RTGa4!eHnC-3QW_<T+oeLSWY!8R<&r6IVQtl{Y}U-u
zw`<i}l@}p1P1|V=4-9OhN{i{O?X``<_O7{J+Ldn^fthoqlp}FMb#w29UH1gSY1y|i
ztJASt%=OH`%Dp?iy4Uuv7{dSOiO^P~ab{F}uZtND>WzWirFl26=<dj)YO9XrG7y2K
z^r@LGwwq02IqlZK?(Mt6hy2)#@oN=9NEVK#kSws;SxpFBRp)E`O{(`O?@ZbWd_?If
zziJ`w6WP}g+3*oU**6I9zDDE-(QNJrv7eRw6xT7@0weS_gg6YIM(Jw|*VUUs!3}&2
zsFP&Ff>Ps?z}Fmg1a~bPk$!$U22LpBYlNRvV1}<2fC;3L2_S6J4RfE${(|TmXe6rV
zULl@JaGB=s6^4F;5yGQB_$*`2DR|R|IOaM<2jj}+6t%_`%Sr0`F7HqdDb~zJvJZBS
ztmjXqKs$!j0$71*%miS62kEu~?&VzS0$D#|IH4br$fbs*l%p7vQC;LBBTc>cD^h`8
z@=r|UQkUN9CDkD{a(ZJDB+am*Igg}@g8xVu#tLZ`*%Pa*%3a*TJuKipmO0fWlu_YO
m?_dj0IGraUSwToTc5xGVhH{Hi9HD=3Rm1HCUVN&u^4WhH=bq{S

diff --git bin/src/main/java/de/framedev/frameapi/utils/Lags.class bin/src/main/java/de/framedev/frameapi/utils/Lags.class
new file mode 100644
index 0000000000000000000000000000000000000000..350a7e5a48d96fde4f7d00754722875a7ca7dfa5
GIT binary patch
literal 1298
zc$}S6+iuf95S>lhCU!$p3WajtmI4V9_6tw6LPDj8K-wbWRzf^f8+)5<vDen_I-=je
z2O)t3?|c+uylL7zgm8J;+nhNwXJ+=t&oAEq;4w5SP$KY1tI$uFkp3|nFhAn{kzxst
z_+WTonecNXV(qtCPgh`uz@kOQO!oY}?lBJy0XJxEy*}L9+uscckQRa2;-N#J^!^nA
zr~RxG92PHV#QWT)kitAAP;N922+VAy5wAd<K>eI~Td7o4;UXcQ_NC%FjR!oUVVYzj
zW=5ovW-9H*Jkd|6>jZsHBOb;~At+<v2iD_sE#lrtj5iYFSutxgO1Y*oH8f!+>{EjT
z{9}e<#tE=CUQrvb$jh5T=Q^z<i$y35)p^DhCMva2d1z8ahec{Msn9f+5kC?VgB+m+
z&n%D4INGB-xi)l&qD&T94T;A<uJbmRlA(MWGFhnTa(Y%IlTt>_Nyc5LbD|ATCV>9a
z<iY}6s=+*5Ca~OSpSP=Hl#soRqMh|NX1<#zU9N&6MFLChG-UAsQ=+(^KF*lF&;<PU
zKMmjpPEU`U;7!L)&+{tWB(OStLU2GZT%%Q>?-1DhBYH{!aMUsUcFZ!(qaiB}bXnyR
zEuA!1A%7tXc}|h7og1uFOBT%&NGi=s!4*?s|D*yB2vkRnBv9KCT4NCd?3{*GKwA8#
zWpH2?=J4b|1*&#;z{PzQ5%W;P^@9D+Wjq16Ut!_h(&A@W`i{2}EaN(7Ed;LMS{tI^
zDy&$pYjFLP;h~K;Vz@DZp>7#Ur+&A_{LUlap5V7K=0~lvzw@JKegxKjqjZwr`UItA
SxNA}CaL=l2Sab>QL-`jl0Y5?j

diff --git target/classes/de/framedev/frameapi/listeners/energy/CapacitorListener.class target/classes/de/framedev/frameapi/listeners/energy/CapacitorListener.class
new file mode 100644
index 0000000000000000000000000000000000000000..c414ccd06fabf058b88d6718582af857bb5d9334
GIT binary patch
literal 13348
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
IovVHR7aKjFZ2$lO

diff --git bin/src/main/java/de/framedev/frameapi/utils/ReplaceCharConfig.class bin/src/main/java/de/framedev/frameapi/utils/ReplaceCharConfig.class
new file mode 100644
index 0000000000000000000000000000000000000000..4eb59ca92ccdda9181a05f57842310f8d2786b72
GIT binary patch
literal 4944
zc$~#p>vG#f6#mw^D0WQ)p$*U*+qATH3pP-$NubcAffN@QYRd3)Ep2QSS*uyCGw=jF
z1~bg?3NQmR@Slg^Q5aSi%Sy6#HHl69LtbgmclP_vp53$3-~aypCxExmvQQ#e52fAg
zGuLlEVf(D<@aCRmeeUr6q`?BWIZ&<_HoxM5$85gUV{%LQdv4dlJi)Uu%wvAH`9<dm
zw-v$Srt7=vLxQ<l{V~D(mT<U*GQsl5_P&%tF5wJW_~&b1@=$pD+@ZGU2d>AID|{MA
z(eZdcT&I<CyT_@+ZI4N96fpZc*5!1~;f*2J#*k|x=DJ25!9(f`Mf*(IJ*u<={(Ye7
z<sE40jYxVU;?<bou2SCZ2cB!YiiU%LOHI@dl^obgNSes5)u|iOf$#7=*VlvW=^ou?
z15f3x8}#8IR5Y=o%#T<lj&nwp@*^c(ze{cAM;bbuW+767GOB(EctN9kLU>${GgDWS
z`?keE&*W2_k2TV<_Z9C(L7(Vgyj4*Tg@SOrVG0JJ5Q7Pkn$R`9jGCTNv1v)x*Nmp6
z5YIvk#(F9^_k{*I-rVnaf<4W1q2b3ln$T0h5}v7I0cQ!$*IJ_rki=^vsu0U9y%~N!
z=y$kmGcAH(r6p|UJ!aC4?$d|!s^^9To2}!QtPNeTWb*J!CRtaqphs}S#OvszC9D#7
z1<KXbRtUkWE(`lys>Hf2(tVcTvXOJzt*Krh_@w~V(=QJrjp;gVizJl^&eV46t>i{4
zx<b$?py-6vW<)2kX^WH=LAADBZ>4vd&l-VKfX|7m*U==%7@3n`MDa$kBsl%@sP~3L
z8izS>$tW>PidzIfPb(>ASADg-bk|9?*>7Cc+h&RpJTS;B^2E43H3)wFKewk@Y;;M0
z#^rd@dmzW(oMw*C@~kn+@u9{fGKcC<Cebj#?-2YrtqDHiq2{O><BHAHWGi-kiYs<@
zXC{Jkhvda49D<8Rb#bQ_r(b%1Dj@DO4`c+DM`9ptzT-x-wR+@?6u%8yxJO{6W!u8G
zeydM{WnqV4A@*+JQ*D!GyoCn`J_ZbPyZX=#!)Qm>d_!CX!5pGrRks$fsION1HDXS;
zfXW|O`gW!A8>)ZlyAqc5busSI&Qp}O!gE;B|7ARnbE$`02RxiNcqqpnN^$E2ylBL|
zWWb%x;V$Bm5qH^uTgl;G2F>A08Sbh9x0=IU!*%0$uNZI_a=4qQ8F6(3?n(}K8?WYY
za~bY618yycYvOg|cyAbRH*>f<dge{Iw+*=4Io!K=&xm{9fNSP(8`w1BJ}}_!WVjOU
W#@CPVS)31x_!wKbk59CZ-TwgIU)g#9

diff --git bin/src/main/java/de/framedev/frameapi/utils/Config.class bin/src/main/java/de/framedev/frameapi/utils/Config.class
new file mode 100644
index 0000000000000000000000000000000000000000..519a2e93a6eb26039bf9e370b11ced4912e8931d
GIT binary patch
literal 2188
zc%1E3&2AGh5FRIKezt)?ApBlTPbr68A@xKNm#RpWQhI2q)T85d5;tCZ<@HAG3-C%v
zAi<rd;Rz74yG<LUB&2{qLhQjiUVroXo7wUB^Vjzu0bmOr*PuioNGuN`CUtPiCM*a=
zFt98Vp_mi~i)D~HsghvF=z$#8phDnQj#W$#gM<F5;Eq7`h1Al$Bv9^d9uuhSm{8Q9
zL7;Vo-L=-(I;@lOmp9sq#Hfh~DK}9p6?4*P8e7v>B1)c9uW>XIG!$Ghi=deCF&hfH
z5ek1Q(4PwQbAcN)G$NteI2tj>N7NyKIEzu<ECI&rXYu-(E`JGKp+H8lu?~e$&UD7z
z7j!E9JA|=Azn_lB()|dTZ!FEP!1kh8Nse13X)G+JP$$l&+!;%YAJW~VGNGvs#XxEd
ze}F4!vsAfRv`_cbB#SOXQKqwe6~r?jud$E$nyceCF1(UzUXH0Vlu>sci<KY?=}%as
ziV99`QESVIu8Uu|@u9O)4}aGCuP*Ez?4EHEuMj;J|8j%}b-2-lHMmKj)9qdLgd#oL
zS<h(oun1qLQD4|2hHZdAyJt94$IQxXe(|y5MlvDrtar`MwN1cNhK0qf4jlq-S7<|j
zAkhSxX&f>qrqUje5?Mjo|0DA+9~msyLz7xAvVTZmy-00-ZNU@3ix#q{jMf@dajfOH
zdNv2}K0y7X?Y)EMC!Cd_g<~~e!OI)RW`Tm+(8hNI?p!iFz2Gev?#^Lo<_x9W@7@Bx
P`*Zv{mwp5u=GLQc%rUi|

diff --git target/classes/de/framedev/frameapi/cmds/PositionCMD.class target/classes/de/framedev/frameapi/cmds/PositionCMD.class
new file mode 100644
index 0000000000000000000000000000000000000000..8a3e39998a1a23acc95c9ef8af627f06022af920
GIT binary patch
literal 4327
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
F=YQcbp!@&;

diff --git bin/src/main/java/de/framedev/frameapi/managers/ItemBuilder.class bin/src/main/java/de/framedev/frameapi/managers/ItemBuilder.class
new file mode 100644
index 0000000000000000000000000000000000000000..8317c3d99c3035553e40f1a20c96ba1b6c4fb42a
GIT binary patch
literal 6226
zc%1E6OLH4V5bkkouOvIRF$u2#85|yK9ukm1NMw@Ou}l<JawyxW0#2jdu{F`Yn4ML{
zM~?gg4jlLyR6!L~apXr)^sX#fs!ZgKrPv&-Dvfq_dcOI(r>DC$|NQ&=p8#+TzA<2e
z!1YMlC65We^oX@t$>F74$vp1xcISbG0*8IJ$7NKiD(<bt!gaVbV3NQ>I>%-HUTL%O
zh}()lUZBjDVs?wbj8*M+$^>%BNR2B-ppXtE&-i|NMfgJ9B5>ZcYD{q{m|I?cNMQ1A
z;BW)Z6PQ0-ry^w_b1+ZxfA9E`M}gbs4z&X>6fRRD@M$Q6hReO^CN1Q*o18k_c9}$>
z5P6^;bjjhxu9C&BlEto)OVkN?MEyWfk14xJ6=LwmA!^r;fo3ZvW-BJtio+2*JcJhp
zQXw5`Ge3cEaN1R1Kq8QP#YWs}33VoUvXbdu#!9%O3HH2RGfGuJ8CCls@5m*G;3zRK
zbcK!Vqd4Reecg|gjBOQ2+BtRRG8GYxeTVM~pF2fbizAizY&y-|r^0UsElwFO(i}u6
z<hw^M1J|rNjZ^omaL?67r=<LrlEU9RVMC(ahRepdY6i55Z#S8*Jnrj`=rPt^RcN|K
ztaPzfD_08~u`7~&A5Qd#ScD19EjKud>a$`$tNhMRb^WQ~=Y+j$RZ6xWjlyQU4t1nh
zn_<kuGU5Lp*v1c+MXnyZ?t?)1m>VjOZ62nT)$l26PfxKmER=Ku1(<~wW+4xY1TLD^
zVU^eM&9n-fw=iDUW3R#GcCupx7OlW$?!$u}Ja{>&nj#`_!#ZX?i-qW%*;lV7OV34I
zt&1ph*?t|T5~%4o9(%<cTq59SsA9)>Qn5fsrB=Nl_OV!BF{`7{zf7PyoPNSSqs!sn
z1?D*2gG->&*^Q(#l8vtr_&I}(Pb2T4hoQ=S$&bK&)9UM&tKW^H`g;VT462Vi`x2N%
zwR-6cNtjlzSFT!5B)ZZj)@&)SvNe!lN80!g2-(P>{aLAyVM7fJ8de~2FYD&_<BfqO
z0zaK>3>;FebYlLF-;kWOI*Db)9O(>RC2%iWjLfnR3r*qhzVnJ1uWXJ&?>d2BGDgSK
zsLlvXH4?7L<<N3pcFsYWkY6(rKdbIer@A9h*a~84^9_+4q=i1uOK;5#xQ*pVFP0gw
zO5oCv<Y2&EEE4*>-+&4_#z3Go;41>Tu7ep+J?JGyHsEVquV*6zYB<=v{xD#3;6Aex
zZ!neBL=@rEHd-Nqw}8Mo0GPn<6ih?%F(8NS436ZXfbC3ryLv8_Df|Jm-!9Jm1`B_s
zvtGn@8f5^#7qFd8p9^piUP|BP;pGt#UV&G&2(M`nE^859hc~ncZ)y<U(IU{)PER5%
zX%LpR2yY|uA;M%2;av?vQHx+A@*%=h58-_c!c`5zkMJRUq}8IRLAasi@G*R%Mfg;M
za9fLT4L<8bAU%Z7H3;ikgfEbr4&kN-;hqLz0#?%YOL&047tlj*!5vt`)izN6K3Guy
E58*(Na{vGU

diff --git target/classes/de/framedev/frameapi/api/money/Money.class target/classes/de/framedev/frameapi/api/money/Money.class
new file mode 100644
index 0000000000000000000000000000000000000000..d7b19b429335fe60a6b7df9e3125f21042df3cfc
GIT binary patch
literal 11171
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
MeMA#_bpGG>HwXkqTL1t6

diff --git bin/src/main/java/de/framedev/frameapi/warps/WarpSigns.class bin/src/main/java/de/framedev/frameapi/warps/WarpSigns.class
new file mode 100644
index 0000000000000000000000000000000000000000..662277a486fa8b607f685d85a03322a7008c5eca
GIT binary patch
literal 4178
zc%1E5?{Cva7=ADP;Uw!?*22cd7)N1S3d})>Pjs5pRUjg{fM_Y=<Hf!tN9{Z7?wqZE
z8Pbs8`^4Wg?L9jQY3DW#tAqrN6#J6*@#FWN_x0nuzyJB`4FKGQ+a6R1+%Y<ACQQiY
zOV(%2h&MZ$B|PH&V!%?-{DbM#G@s*fTXd!IV3xqS93C^-Z9Z<l<e?=n|ErL~{zhP?
zv9?QKc2h;%gBpRQ_t^VdD_w;zi1+T9)ZD1J&m$VDBo#5ULP?rx)sA^$?$LT}r^ji;
z!<cCVr7YZIT~1dc?hkYHhdKIrj;l0M+)$}3O_&XP)FJ`@GsX1A32@53o3iin@{ge_
zG7w3sw8cbd$fV<Lb2?0YN<@Cc%!+stQ0cDU&i3|%JwqNswvsd!AqGvBa*e$sjn!Fb
zm8L}}HrA*xG?NkU2#Iy?U<Ai3i|shtr(2nEMRO?1q-&Idcnnmp1;SV^-HrZ}3$=<e
zYWGuKul=r6%#q}H)V9?^b|-+`9Z!R23tPNY!J~8i(AcLl$NPOQ?L#J`cw)(&8E*E_
z)p&l<1hi}Lgxj8qsF0gVc0|{S&?u(4Mmt(1xnDUr9hoh1b+|T;$psT(j8i2C4d!t|
zss5jyM+T-4>`Bb_xo%0zH4E*>7HuQU-#14k&}UjOd=nLQK0zy-0_4=n7^sjPJG%n5
z@uW3fv5yMWp$cCvz#J?RxX=jRzwe7|*WG$xDL|inlqGGhcbu>UmR*|h?m+0lpR=|n
z41v4B^b3=90t@49Lf~>)F2SG$)~oO}A@e6#hkORchby{gxGp&;U)_u>j==dwaLDoU
zvR-<cNh=cGl6_$WO19y+a}BYKi@~@*pyHPa**<~dXEr?D1Bgm1Ids+snq$2#Hi8nv
z#hO*&DycM1w+Ls}{;66!y1=%|bjTkFXU~hHO60pIwELEH>*aivY#$1&zYcr*9{fbW
z8x+KY27&5uA??8p0xKmA<H0R_OB{NfJ@5}~HVci==(mc>@8E0=Tm{^9g8R(jXb$G_
z=;gcI85{xBUqki9a{U!7yv1J?Si<9c9zk+EE)*#E3YPI)gB3VGV7PIB;X(<+xtyVr
zU-!)v*L^#>4xd&0Re|pYu}gR!W?va`d|$$`T9Q41AK=PFHd?}Vr-W?=@8M9_;Cila
S6Tgdy{}FzMHMoiKU;YIS)i*i-

diff --git target/classes/de/framedev/frameapi/glass/Cocktail$event.class target/classes/de/framedev/frameapi/glass/Cocktail$event.class
new file mode 100644
index 0000000000000000000000000000000000000000..c13da16f01e8d2371594ef335f9af1fc26c10786
GIT binary patch
literal 2098
zc$}40TUQ%Z6#fnbhJ*tJT5M}8MQm#V$keu8X{$6$+ObK9kYd3LJxLDfkjYFsGePs9
z4_>Ql`2+d~<k>#Zg|6iTkNy(>fKRUFa-T`Egr+Ecn0?Oq&c5%n_x%3%FTVk}j7AJ6
zFcX803o*Qki&0#{Wwm>)AFtz$KD-&jTX<W;Yz$FcQRJ%PzSf6#`tdI26mnhdl2OdV
zP`gwVH*iz!Ohw*P<d%lChKz<RL+=&Kv4U$1-SNaSLnP^zB*T%k<;ZNkT995|6l_99
z(r!`M%fhqNxdldodzR18BR8cJFmTgxq?fdX?@NNG(j}>{d!i~!a<jP+HA^q6dp+qE
zD}k`=v!U!P8E_rb38W{ALHmy3QatT?WxY_ZRIES`S@oJN8q(8q;bI1|nsgn%UX@0u
zC=8-0eC{yz$ugrzE<CFphJmF(6e}4~YbE34V%-U>s$8~wi-0-DaRU)pB*bv0Q+=rB
zrf^EO^hjH5$*p@unX;6sfwp%u8)8#%JdaZv7C3TvU&A8D67m{ub1dTnjyqV<u*&fv
zK4R$K-4bnK4IguSf;EPh4v`3D<t~T7DUJe)3}d8fcgt?ykMC}IyIX~_47|Eik&cEE
zhr~KZ8TU9WY-p%(*r;+ia5dC8?!)8o5pdM8$?+*ZV@MqOQ7{at@O4`_WqqNrA&Uf^
z>_}wV@&iflj$!86YRI5bGzw*yh$r@z$Z`~e>os(B9Tu8uH1^*dO?~-BjVgG2zrKv1
zmu(64+KxU2rZ&ti<jn=@$I%1C`dhAMWFQ#MALMS8uJtw_iB0@J7sDXwp0|9JtSr@o
z;TWm^H}y+_XF28BedTCk1j+k#Vf$v;aXpz7J_(P;J7p8A6k^;oS5<pzt}{<4<ts{t
zo3&v$y+0)K)CwA{%8~682i;L>eCd=j()UIAAoI$q<r~#n&<H2pYBQl~rl}6?s8{<!
z1-%ER9(79Os*%l``IR-}PR>{~jcn3bTUfllmNS#LZs)>L`Gg3miK^_j<fr3Lwbdz>
zN-58W_u$6*de{cs$j%#!YfI*h>|B~2Rl0*m%@k#`EpZ5=EkRQm<&>V3>z2~gNOqVr
zlR$qT7>N@rUc_<wZBb{^Kdg&Z8dgM4(@Ce5(b_Zl80_cp`URrBA@~Kxi1H=_&R~L8
znp8MTTuS&)Lc3{wFtv@YZFE0E<R^UIJoN0Km-4J_qwgWCUlCmyDh-t)j}gmEZ=;`>
z_{hKx2D?DVBM*^Mi28Og#PA5ioOUBUcmh5;-2KN6jz#w1qx5j@?%=sDDF3@d|0fY6
z`XvVO6$Sq_X7CLz;#*wBcl6hNK!f;u8hSs_>Blg}agv+C3eMp?#YPdeqE)+>5vQmV
fVGh_|Br@4b&{UYN>5#rcW<W;inbHq_9MOLO0fjs1

diff --git bin/src/main/java/de/framedev/frameapi/managers/InventoryManager.class bin/src/main/java/de/framedev/frameapi/managers/InventoryManager.class
new file mode 100644
index 0000000000000000000000000000000000000000..e08f9c3de16d09e94a6ccc02c1ae188e45ea2cd5
GIT binary patch
literal 4769
zc%0prZF3tn5XV<ensc0_DIwvhJSZs-XDBuW3Zw~Xn>L{yoU}tiXLu>!$+nui(~YDv
z4PT5In1T0vD2BaL>^Ma!p4!tXeRDpaRzL0jwbDv|{r%e?0PrQ;^PogvQ>&mJGm+FE
zu^y|3yxvwU<{|Id7nTZaPFRO4U2h~ko*1c)_v{xBrU_gsIz}w%)bF<*@xTz66@5bj
zbIn1o4FU^;7A=0^1W04}TY>`;SZbaU4~!B?2RqJeibR+#0#knVA%W>TGUOgC5?DMn
z-cd@bGQ2`&)_+VC*D~tykOneNMZ}Dd2~Cx3MLgCwXl3@W%W24ih$%EmS#X3A(Y27*
z`U2GY0@V5ftkF<%O%rKo%uLXw1{wTuia`%EP|{j1X)SlH_H?54L&T|6hDz0`wX&ll
zVQ9dTe3%xe{XqUdmW?=#M1YMtOS!@cNVHK|fHO>OhWJ$~G|iHbw?%@=wXp@?Sr(aL
z>l)q5w4v6DvLu(<f`^Q7xPJOLoS{ZiM$K``E3-D2o}1CAZf&10<V45W&!Xso6p7(#
z=W)Q(VnIB!YYoHW1A`eqA@5#vyUFFngNPmHtKx+WbB|$q2o{}d)??U=d#K$HVs5%J
zq?((%LZ=wmKJIV6m7z-8O2)+&nX_r0G25AlLJVH<Hg0}7F>j8A*12wlneBWA-^zRW
z&&V4j>S)SW;3B*_4|A|gV8#D;CCZD>ViWhH{VZ;Ab(m|Bmn<2u=;4VrCm*LxS7-uT
z&2dUBmOc;VJt(T>ZNE_+k5-1a39LT7I%09OgYFmQ_y?B?<9a~}L?hJbiLE*U7m6$*
zaLXUt`S%Hd5uAUi3xLg#d~p$I`pv;A+ZaDXeFAC}c_&+e2+Vgdpwolv0w&7o(X|X$
zM|5klJ2JYZ&$#uyKjhVzTI1n;IA(h!#{+ibi3WQvUq(S3Cv#7C<<DqJ;GW;KTkQDz
z!&e042x3pNmJ%rMiYUrgNg37&x&Qnp`=u_wSU0mY!~h3klwp&=?td1ek!G1d<v?aC
z;5dhvt1D0DRB;#c;1*s^2TdMq=YRVidT<x-nRYM_cF){wtt_}0_iS*7IHrbGz~zFM
z=_x3|1(?CN5_nK9erKVAzw>A@S3DPrOZODM0aSj6i$5)0`W2S`ENoZsIa9O{c<rPY
zTEXk^M)B=Ucx#AI8W1i!2#Zd_JMgZP@ScOP>?Ewhnlp+k4#H(8;RE<^h%hxEeB>Zp
zaT2QVvD1f790cD<_!MeR9bAN~PC^|%bNb+#i)&88HTc{~aLvVaC*ce1>5AgIgRt%-
oe0|Pre&ZnAb`ox!<HLr7&~Ok+@NMzjg71p2({K|<x&u4^0CjbR(EtDd

diff --git target/classes/de/framedev/frameapi/listeners/energy/CapacitorListener$1.class target/classes/de/framedev/frameapi/listeners/energy/CapacitorListener$1.class
new file mode 100644
index 0000000000000000000000000000000000000000..90acae67a55e91ab2b52895733756d1ea5bd7c0e
GIT binary patch
literal 2984
zc$}S9TT>KA6#kk82G&6l@sfZ90nM-?tD-TwNTLX`x}XulhTKfE)4MzFFteEp1Y_>z
z;$!lZs-!9vUU*I_tT9xjQa<D%KPgEiIX$x|=n{+Fs_oN#`dq(0XS)CR=a*jroWPw%
zbYVyiFUaA=D7tYjit`xWh6@;x!>EFbQ8Y;Q7?KJu$;D*_sYZ-rB8nzlkqTE8ycESw
zoNK@}Nhjqn)qs~Jot6@5IlQ7^M$%UmycR_}UXS7pyjh3vr%Bdz1#c<f3~JJ{gfnb%
z*A*^9(>ynO=7m$>epXlvM^n0pXB|E#bTJ=Jc+rT@af|1K<HnQLys$jmSsV{J35G^#
zLP)k$x1C&k)-MzcFCOsX#+t@M-C@(n6h`EN)a$*x;r1M5I9=JbX}F%Sq;EOq7URRb
z$TJ4nNtJh`kwL>Uydj2fwW_UbHS?{e+B?lqJ8bKMVMofa#DqULE1W4lYZ9j=WoNiK
z%^gFo%gkB{4Z|jpJvpVGV+2ja@#$P6nsgu4eTUB)rr|9zuq5He=WJgd95bjECOw`h
zjPqjIeRR_Hos1YY<YLcb*86Ypc`B$KBUZ+=UBk+a3omc$3T9PgpsVObOvOPQQt>P_
z6^AjPK&Z$fry#Gwzzr1zm<)$1<|qH<%tivDU`~Yvn_=HN=&xk6CZT!N<cq>lQN-H}
z9qabj9f~LBf)o{ypbJmN<g1v+0>fUJP2A*GE<Wiwl+AhHFm>TjboZC}{bh5+$=YVl
z5k@B8IUP2P*O~Q&(|Lb6L;EV;!J-^)GHmZG>jZHhQ1LEqsdx|XtM~vPZj7ITqvMFL
z#s3jLrW3FFz<Z9#q&`t_Tg9jNOvUH;f?BI;dko#{Vs$flq5GzA;^za#HQ%zrS~*pv
z2dX;T3Y#R5U>MM<X{`ROH7|V!bHaPTW$4m+Q<aNmZI;-ytR7lX$mpbTQw05%4A-*i
z2t_TqnS-^eBnSOl%bdU?2kE>Wu!PQVU}GBP+8Xl-h>>6}zt>#X*TC-B0QQDfN+cz&
zyVh-wb5GFsi5fO?E_sb%cdEiBIoPLF+>quJcMXt9?MZMDU|YV6>Ups!ECS+)mU^_I
z6TOeI$~{hs?ecs!-)`{ikj2odJua9CGn=3Y87@?Gz2#KuW~FzA<60HUikr6=h|iGH
zDilQdgsU(-RQ3HzmyxW1j!j$|7FCKtH`TVFF<p;a84>p7|7%cCDqV3?+%2SJsRc2v
zOSx$JITF1Zki?}8{qgAcOd3g`lOAo|^l*waH_Ph_AWAn_K<Q4Sof`TdMjxooXf{Uc
zTB5D7!z*C1z7^EOj;tUOyNlW%0_lDl>q#2)^o!HDC$P|pqc|2k(OLt$bPMA+212W>
zk8Db-OOe60*iWb_q3#~)8J6%>dD(UkN)3L;t!Dk~DjH_)qLFqYB}9M2w)PU#_8}>`
zil&(#vHdP~w3X1D4p}=%x}{}T39b7}*xj;+CME1GVP85l{!~C8n0vZ}w)866XDFxr
zKck}+&y;W=eVei6e|4E-B*^hOdbk3kXu(CoaE#DP;tVcf5SMWUDcJP7UBCqH(CSM}
z;Tw|u9_av+7-f5q?&1?TN$3pXI$1kOc5Cn*PSH%Fw^T;#dHSn}{EZs+7ry=zbtHE>
ZK>7?4L~BX^EP80xLcFf>L%2O8{{hp&a=HKj

diff --git bin/src/main/java/de/framedev/frameapi/managers/SetBlock.class bin/src/main/java/de/framedev/frameapi/managers/SetBlock.class
new file mode 100644
index 0000000000000000000000000000000000000000..f03391f77488ef0dbaf22a78d86ff5f9aee2ea5e
GIT binary patch
literal 674
zc$}S5O-~y!5FLk*k0l``EeCEcr{uDGiFzm%2N0DirR^br)T85_BnGd&vb_=i3<)H-
z^P>>6yN$@HhuYF;JoEhgX2vhC4^IFvfx|X57)-pANhXv@Zp2z7DJBaiGE8w@J0e$<
zHe!j+Co>FZ+REEDG#PxTE@)wv$?y3M%D|xYO&JwV8SIS4*9@BHHpMn{84TXB7tUGN
zfj!2Ku8c!(^%_$yZI&x7g0hC^&dxPv{wt5Vmn-BcN-Z3Lav^U?2tQ6S-l&W>D&vjH
zW1d>{+}OY~5#)*o;=sF{6mD}+-EmoWTuO`o%@}omWVu#S1@4O+9mzF5xIzZ&cwPKx
z%$4VbNpYbJy|bVU`J&Ka8y)kXg%7+&abZefHSrcGil77i9_+$CgTvAEy?L|Xlv$pX
z%^ggM;a8E((OnAa7lYx{N};cXQ|0+@uo+g$Gx#$7pE;i}h-S8M62GgGtiMTAO@q%s
ylZJ9J+Plyq+phlB4tW64BXs@@qkHH*)2RUivaKpZzlUtEM!^9LtJud1_2~_H?8XlO

diff --git bin/src/main/java/de/framedev/frameapi/managers/CropsManager.class bin/src/main/java/de/framedev/frameapi/managers/CropsManager.class
new file mode 100644
index 0000000000000000000000000000000000000000..c2627a99e7ef13da5875f1c5432619a64de29d58
GIT binary patch
literal 7832
zc%1E-$!^m?7=Zt2)5ck#3zWSuEnC8pNQeV!5fY7xR4D;ON(%=L6MO1RV|%ReID!i|
z?z{sJfdmqqxbOr#4PtCJG(`?HRa&~(hsp1m-=F`@<H`8@&re?f;4a)w!w`adp3uuS
zVNQ9Sv`N{Z<uyTUYS4Bh5SOW8hnQ4&<%;00SBuWlkU}sXUStu+EI(<iQ(Yn$z0Vvb
zA0QYm6ju<WD%_xH$RHTo)Lj&U3k`B;oIQ60^|;lh2G+UlGK)yY9qbC;u&C|L;cRBP
zNwGn7iwLFU61}Bvk7o^9>R4LpSX$~>I*ScXJ?wCaZ6ft1mWn}NyUN0DhVs1>_+AQ3
zEB&1q*}-g=3yHZfOAWu(ViN1b32xJ%xZ}vd(Oj}!i|K06^Ia-b0vt~YUzc3qD4m5O
zW*+t(gRU`0MQ%-vD4F<{?A9*fn(s**X<_07p^m^^O4-aR7nTuY2$mcZEZ?{^o2d~=
z1tV5ZwKh@1sy4Ej1&iyg!Qmd7G!Xs)9HdqfkN+Nzy?3$?2bLtY>yivIsY!@;J;aA2
zYso}$w5vENxuoO{cF7%5)d4?A2T3(?J#l@<vvU?SIF^SIIF4YdP~F^&s7t{db3WLt
z7^|xPuaAAZLB(=#a|DxBt`loz!<dcElx#8&!CZBxdnfY<G>^*FCM6QVc%d5FKfe?n
z#T5-sA#`UOJ0r<UdW#l<oQmoKrSci)DzG_o^Gt(t2))~%F+E~0dR6@9M)7MfjnI!I
zEBhcTyOQXPdLAo8h~R0=m|e2!f6671JnHYrdDUO{O(H79p&DF4saJbn9EVgjSwbYP
zC$9gwV#u3YW}NE?7XLouY;(dvkgaoH==2c_mW&hK%fIk*QyOj}7zs(riW>7gwF+HU
zmwGS*2!<gza!MM3QPrlyZ+62<0?2*_?d4?lBjmrTvmqE$?Pxfn7L%&YM_MoelVRTp
zIN3$eeiNo*2)S6o={^Y4v4k@{2xnsm<ygY`9)t@qgi0*oVjo_-h$UR=!;AG;0`9|x
sx3PqoK5Td&OPK9JxEw?H5KFk)gK#Z|@GXWg1ck6I!Y%ciQe!uM0T6%7a{vGU

diff --git target/classes/de/framedev/frameapi/queries/UpdateQuery.class target/classes/de/framedev/frameapi/queries/UpdateQuery.class
new file mode 100644
index 0000000000000000000000000000000000000000..1bc88486ad2f8e6c4952c95a63c4704374de5f8b
GIT binary patch
literal 2703
zc$}41NpllN6#m*;W-O0c1Q-m75s67`2@qrjYz)R2Y;21~Uf5wQHTHlkiP6Z|WM9Za
zw#p?{x#XH_QWZ=bQmLHtlX4*Wy0su7Q3a)%?$@the{b*BKac+S3&0!rE`)9*44ev~
z1&LO?jME0rgb*k#&Z;4)_9jhCg}9h*!wk+T>b!vqA*?~d#6>k<GI80&6(xMN4cB0|
zVHPPhqzzne!xqdLm{+r7;)aQv3Mpe^!9+HM9P$d}mI2p5K_KASvl%H69=~BP+VPB?
zor@<u*U8TH2?Q7IOi@y*v$R|EoJ@S&$=;Od5xX!yVdp8-nsnx}wpVnCa`<U-{f+RA
zoB^fs_PlhJ%5`;61&@2(Pq3PRYKVR(>v#hKn|c}rdZz{aL%B4KT}umPqPQ?C-N{N2
zaw$7AZM%+ImzjQV-l09w@wALzckKn4mWw6A&O7m2Md>=S5TDAYZBL%zYMCbZ3epoe
z-9&#Ai=GEKn95~}3t8q(r$%6)nUBwd7|;P12+5^917C1*MEBX*G`D7pPKNWwp5A8F
z5s+EWUFJMonyt}nR=PtOyHHRG+*Fe-RzSCw;xR*`O1D~7HK<2RTdJxGGA~`*%TcbQ
zJ}t}nN^1I=sd(m6YfpN1>L$-=G<F%=#sKpcO6H1gN*;HVj&(KR+M{qR>_Jgr^HVC_
z!mH>J*zkCJ&~@!)Rj(Fe*kxfSUa_!<+XCXSg*Wk*fh7yexMSfU4pfjEqr%Wlojx`=
zIUKR@4&G(pBgx^(hyX0ShxZM9VBtf2L>DZ4j880lin|6rtFxsVB@3V9F1>qFmxV7B
zUmW5`Tff9Ts*TKy44)m2D2;=OV-W*iS@;^?Sojufvz}+IwmNmEW^c$8gB^Zs+^AQ{
zxUWa`sV`ro!2a3_FP-XZ<n%VO1lH8w7pkt)=_l@m%J~ayE<2x>s_=I=ZK|gitEoF7
zsd|2WrB}38vQ(kfF(~d-9qp(SuLMAK$-G@i$R$t5g0}gydQsnsRY%+FGE7hAq&FrR
zaFfJz>89`(oI6s(jSB2+nllAZi0fQUDU#>ehBj^D!Tz2aONVlq3{~^8XnLbHxh+gD
zSE8|lk6JfhMIT=<_5!IE)iV(2)pV2}8>PD5jUeegh;!UaPFkM?BGCsB(T8X`{{X)G
z@RJOX4Bm$kjopX&t3JJtV+Y?^HTwDTt>tekHe)*<$k#MiW8rna($JK$iPf(<v#c>e
zjXus+^f&lpyH?OT6aA%%9?}TioOf!(NJ+MeXyI**sHpv<S~T{7GWOB3H=$@O99ltJ
zBl13&#C>dQsEQmaBMWtLl<|fsqomqts}Wm;)q+OIezf6G4P<*2vK@V8$o?wikuszi
zjjf=)5$yyMG*W|RR?*BV+93>-(8M)5Y;f;~hgidOtsRer*R5bZ%{4iN!yIP98zxk!
zSFmvvn*<WOSJ5HxBL+!q7Wf-m4*EO&tLRkp)`I~>Z!6J3m7n#U0fqH~qJkRm#fhK)
z`%{Hv6<q>9p(7UFUeaoWBfn#Z5~6o6Dc}6sx048SJVPJOl1j2<Cb13E=;Gh0!#IaA
zoF{bwS8x$2T*5pqBg0h=SK-3O`}{|Ck2~Mvx{l2Nqcp}cQ7H@X<Q82FL1OLYca&Ng
zlXB!t-mF77#)x%ci78b@b6gjYD9fLq{0KQ=_#Po<VAQ}#17rW<co${Ib%rJ|sB<K!
JOX5hd^?yu$a-skL

diff --git bin/src/main/java/de/framedev/frameapi/managers/ChunkloaderManager.class bin/src/main/java/de/framedev/frameapi/managers/ChunkloaderManager.class
new file mode 100644
index 0000000000000000000000000000000000000000..b154194d33fbe688924bf0542607ae5ba35bda16
GIT binary patch
literal 4188
zc%1E5TW`}a6h3ap(w5!FHtv{l>$s#ZJW(_O8%RjmhS-?Iqno&$x5N&PQ*Hl;|9}7q
z-uY38lZ2K+0}EnE2<;)3V}Jg9u0Hms&+k3}z+GrqP$IA#X}1wDAsf4_%NibUv^5L3
z$GcgFg#xD~>u?=4R(4{!=PTxMy_StxFhXD|UFtL0X>7E1xoZfN-FAn-tn)<pd_~E&
z=){^Cp=6W5=zSrDSw>KOX`8^vit@MxCkae`<9V#L(iIpd*6SBi^GNw!?on3-q3}~4
z8fw+@c@W*Bwd&Rmryh5GrV$h}cMnCQiypUoy4XEk?4B-*)Kfg7QW+XB<L*#{9DF}S
z=?6K`I(A|mI}y$PHDe}+2tuU|ibGu{6Z#gXJq5l)DBZDJ@!p;={|hp;kx+$Tu@QbQ
z@M#eG!o|&^IOG~#E+eC3*C<W1;HocC5z$zBye%a9s*N+)XR&Vv(KcO+qr?vhiZYov
zHzOVZ)vAtivv?Yog&IW}H3uQDRX2?mvU3P%AU#&rR&%vmRWU|w?$kfN`jJvTXL)ui
zwER#=X2>qnf}xa0!&wOObmQ^9%fkXeP=IXcy!%tiAI<VmYj)s>C@&d@h!4T6$G-ne
z32C@4Y=S}EHZdEI#A-*WR8g)%8U4HNEO?p}ggyHCsr$Qv{bhU&YA`tl7EBSCt2^K7
zcxL5hQs*ZfJc!rhpvCo863YZ;5<B?YUt|00;E34~5rGHJpIuDwo-xlnZ$m%lf$H)B
z0D((&r{{rYo~#u(O-io{+&hko$8qsEy5fN;(&5HQAYO{bG#IZhIsFq2W4hMgF0$YP
zfm3;BIDzV>=tyQ_jR`eBNO9junVZYa3S1_ow*`XyxZ)gFoPV$4U@B~?Si3w~M_^&N
z0;Eqi3$9@{^gU$34FV@ptOZL1riXU5;1+>O&s-MV`R;j}xsbrvnusFoZJ{U;Tn2p0
z;+vY_cLGMSEo0w;3bxhstzAy%YVV=;a%SueOnk(@5=>(|n$BP?#C9x0!7Q9g$L3&u
zfT7%HSjb_R%w;$OXK~#*?2q8zdAOLax|Aao&Ed3jI7_gYwpVZ#U;>d>;X2geCbHlD
E0)u#Da{vGU

diff --git target/classes/de/framedev/frameapi/listeners/energy/CapacitorListener$5.class target/classes/de/framedev/frameapi/listeners/energy/CapacitorListener$5.class
new file mode 100644
index 0000000000000000000000000000000000000000..ff7c7290f82a5fe2390ff7ea843edc2aadbef295
GIT binary patch
literal 1377
zc$}S7ZBG+H5Pp_cj<$!bya@t|Qt?`l#g~EzqS9buQpAWt;s@jQZY@WTyXIb+^r!eU
zOaP-F`~m(b<LvcfG)O|4rn57%JI_2bJ9|HWeg6UAA)aNB#f%a+v&i9A2G=p0MG?2N
zn8TeM43v~8XK7<z!-9sp44JlYin1-;kin>VeuLMeX44LN?BjLEGn;%<$=8lB<(BfU
zG4zKAc2HbmSgl!-fAYnVv}C)hh?dPAI|!vK{eUak=<up&3DXWezn1JMkagR&!wm+@
z=o#grluLUI>8fW*hJ4L-<*VqZF8#Nn?vQ7w=9$9T6TYqN#F<tlGUzW|%2Rbj5J)oD
zdSzOyP{k=fa!DGB&ERe*%;vUeCHb<uUgVqdg{_RSGx3XuqAiI0mTNj*V7rZN86J3+
zhD9A5OFAwiuS3V6jshlh+{1kh4|E!giiTw!D|n<~RmWqj=~%}T9UFK`_t$ed46}dr
zJ}?iY6*<!9o3Z0f<htFuR(j09kc+SKUCR<7;mlunJXLo!>U3xyQQT-vb&f}&?eOQm
zFFGm#-No>K+;lg>vM9#r206lQ@SXahGzs-R!`#If(6egDknD~sW6CJ~!<=}99p2p~
z9^>cjF$~zjj_c60#xq0t2MBiG^Btl%@-J%aCA3@=w<|fsjk9OY=Th3k4Ai#+=qnV|
zECICAU?~s%3%CM$Eu>Y+PSKh#&!2#m7f#Su{)*I>_~0<femV&D0VAZ3#ld-u;wlhp
z3X;)p91{s(L~s;=<?=DuG1BEzT-qnS?-c#tpfP;LwA%XP8emBDQ)E=$RGfDRY0CQ%
rIun>=byS!YbI`l!35RR(c~&7Y8B?CZG_7g+GTtD%pf1pZjLG6RbW3k4

diff --git bin/src/main/java/de/framedev/frameapi/managers/MultiWorldManager.class bin/src/main/java/de/framedev/frameapi/managers/MultiWorldManager.class
new file mode 100644
index 0000000000000000000000000000000000000000..e2524435246c08dacd8ccaf73662e7a8090fe8fc
GIT binary patch
literal 9063
zc%1E-TX$1M6vzM5mYy^%6ev_hkwd*DUJ_AMq})m=T1*SrPy}_kCMT0*=*gKd=cE_E
zi;q6}0bEPhlI4RhKKKQE^vN&ba-S30^fGA=G=UWDS~<7b^P9c*-1hGL{?AXp062}W
zE%Y#)_qCI)a_MF7@kO33ifl>qswj%Z#sjZOD)x9;Xg@nscLRA_X}37j_++7v;b2tL
z<z6{^y>L%B0mHyjDCALnhQqmL`COo-R~~2RD@m8i`g2$5PVc==smw4Ey-q5xB+GTp
z1F1YJ>pv$w8C+mEn%as=&l7A?6@`UihT&%Ul-5coaEKi^am&-fSMH)H+K#H$q#Kd#
znpOo@RQ<Ddav)z3c2PJk*CbTq&H`Cyj}=8`)f<^rZ)8@zF=iK)@NG{8c9jQC#SVxe
zmTTmI^$hZFCiHJ6R4ubTv7v{o)|3uN9oykvh%X3x)qo8WN|!T*`oe+?x?3``T&h@N
z^+3A26Ko6&Ly;XQo7=%kO(X}xan>G@4WqTq@^^UE-AO){qSMuyD;?@7zg`oXW`XAi
zy6yx@+l?ukO54)6>t0cmq$i3Qd#3IO;b@MkxhuBx7S)2VIW<z*NQmk2SVEoEGg`SO
zwcsIddqo~WG?rlzuYGMkHTClJ*yUz)w~9Ahz9M2Zx`WK+)=O_JMJBZ7D>><#5RYtC
zTVXS_TRy&ByKACl!4+95Nr&Q}l`iPJZR$S(=XGFXd{zfzXBL`my1%hY?odArrK%#R
zsG?mK!KBN5f78Bdmq>{)o((J5Tf+X;cKi;HwC!4HPXxD93!RMaV)fOet2{BQg1LGv
zjD1CMYS|IBcG2?{t(JHprki%*%UFP?wE84*03$;f#1JKrIU4@6^=d)reCU@jeN_&3
z=ed^Q`@@fYK}Gru7jwJHp2NI16(+EQPB`yHRK_roO7D`Jz)K9@#YlUfULeGfPvs(J
zcFJ3nT6tCB1>?K7`~<_VaV_uKFp=RKlXr4!0d5-{HOBCFI~~>4aW_LQ)mHDl#_(HQ
z?{&Fnh6CY>aC6D4hbz!@D%Z$U+Tf@(!w)eW)h&4u!y%t9HkM-PHFl8%-e&A(3?rV^
zFt#%}6~lgC1kJ>XMq(=0d>v2EC-5%AUojlN*RwN*M4%dQh9k89Z}~rW0;d@s#BfD7
z=XngH>mnUlqPTWynMSyuz(<TN{D)`QlTH*F`o;Y^cl}MLDvdaOJbgETamN0L(Ifw7
zoO>qYWZ36~>Ez}m=3%EZB-fHl-@+w^W398#1THgt->&h|(JYr1R~lm6mEQ^rQw$?b
z%h&SX1U_L<u?`B`mobxK74BEU)5|CmoKD~~hCgFFb?>FxG{ojqT|44xbo@KIWu8Z;
zq!zA|U~^BmaFbH*u!@B_3edJRYT*_wXpIok!fg`Sk~>+r!_W-JEquA*;CglM9h#B8
zPfwwYkCUK&0ixeN^dtPUkcjRBNYZtfBnB}=*Zt9<dM|qDp8OdH?i@b&BMv{Hw;mj!
zYd^_=en;s#6g?*~iszzlgLr-&fjtJ{1spRHUNjJnw;&uhTJf@hFxG-#uOsxX5l$Ki
z=@x`nj5@q(Ae=H1UdJ0oLdrlmV<f!UqA%Vu5H1-B?;vB;A!{I9GZIeWJ);iq8whzL
z;e!@dd}tutH4@I?W1|&k4TOS$(1&w4Pf{16XNHRgZ6*vX*T|YAdz!2(2G&&r>%P&l
oPcd!u%{2pI$w25qF1pU(E4q);_luat4SY_0F^?~Zc^6my1;76$DF6Tf

diff --git bin/src/main/java/de/framedev/frameapi/managers/BackendManager.class bin/src/main/java/de/framedev/frameapi/managers/BackendManager.class
new file mode 100644
index 0000000000000000000000000000000000000000..c901707b8e9f0b8ec35a76beaa9caba344952d94
GIT binary patch
literal 8145
zc%1E7U2_{X6unB~tZmXJO<T%$)lk4Gur5&g&}KSAN(-4;V`h?erhSulm5rLUv?FOV
zH9vq?Uil}?zyR<3D2BW1I<bplJ0XDr`=ZgVj*iZiuC8=Pzy1E>F92`@ZhA07;Fi&0
zv&)2RK4E*T8S&<}W?dffy?%wI0-Gg^xi-yp7VdHxwff&4%n?{Bx+P4;&35Mr4=sWD
zG|6Hiu@bb9_%>G7gcSA;fm);gYxN<4xw|Uj9=t?g@qpu=)=F353_1Jl1F5-D$sUhr
zsJf|0m=#LWRI5(HyXF?H*S2;zjd++aji408p)9%*aerWgKd`|c*sww)#SN9p(k`>%
z4z<X^pQfmMm;-0U&u7KYrTOC-`#MB7RodoKX~<;G-{Ev%!6`r@J_(_8>~{=K*-7HE
z-Cbc%4p~fZW<~PXfVopS8mLv2QQJ#-y|&R!6A_{!lcika3`=8m7Fwlg-*FqOR2Z7c
zh;IwYBcHZ1V{_Lix+Og-<eu8)l;I#dqYP6Cm;%z?-cE4ruM^hG2N;Xpv|7mcBtR`C
zV|7<02~L7=y1_8|a}{P?E?p~oL~EyHni96|_TbYSa7x&Qv^;jM=JDIsl}b2sZ`eRN
z7aV<|XDoMzmE-i;kcMm9mb{(jUSlRL&lt(mY@X6bOCS9weY6bCrQ83D-M0*}rLVn+
zq4Kn_Cl-S1P>00@@L-9+#YS+DsrEY;ne1YKvcAf?9j><+CZ`0J0~NC5A=4uNe)e<D
z?g&F*EjWJ4jk)w<s5!Iz0WKHrSl%OWwGoU=&25*;D!f7}KTnZUmj_)LeEx^`yYhf6
zee?zQQ3B`svA-XiH!ZWK3a^t&s|@SqmicerDa-I&`r6+XX6soRJ-cEP_;T{?I(YsK
z?2sGyWdajI^${aAN{x8J2U2HaZV7yGB*6oDf3|_Z5`QX;H3xg@kQC@~72YLqf3j)Q
zoEdn^p&26<VA6EiHE!^k)~pwxMig7y6tQGB)0k;pACF#pZi4P$_xh&Fbja_EJX1SA
znspVAfFAfb$UcV$*D<5Z!-EGO6F4)%=)sMVm(jii0t+o+4A!>LPy<&0mka>Q8K}TK
z)~Z<din3Nb(avHEK>a7EKU!Y+0nYx4Uo&tH%X!4)J(sauDC%`M4;PAm7vbe0hS`0F
zOAdxhPKH+xVR+5KaMQ`~2D~}MP}ygA%fZlgGSEXbxENw5!xdN=VwfAt@Qst<ZMf=O
qi+3Ch-#HoHg9f5j3+%NinZ9>0&A|Ib`2l=dv{m3kXu?Ox^~oQ{!**H#

diff --git target/classes/de/framedev/frameapi/utils/DateUnit.class target/classes/de/framedev/frameapi/utils/DateUnit.class
new file mode 100644
index 0000000000000000000000000000000000000000..9f282b55c7bf1f311dbcecac9858147583813ce5
GIT binary patch
literal 2014
zc$|%tZBrUo6vzJ;mfZ`Y;)c?urmZnG0!Hv5X=<cYtE6gBnyg}I(uWmRT!V`Pi!*)E
znSOzOl+HxbG?{eT$?JZLzUbHJ^xVsqs-ZK$%$_~Jd(MB)Irr}V@%O9W0o=rK5DK<K
z*g;Xlf`;7?rtna}lDK>++(#TYI39<{|4P8GIZ_<o1km|q1pAgF&0%_MC?eP%#|%fg
z!`S^F1gmh&a#$S}yd&8@#~eqs!zO=(U<VxY9JXZa&v_YlsNo5N-^i^nOynz8dcR>F
zSrzM~b7LOc>6UBPn(0;3wRRlaU8LyE^(_Wvt+4ZeoYmzLIlH;sJ+V>{E2Z2rt*G^u
zd)#sv^!%ZDVy0`RQ%xIg!*;495^(E=Rc2rt4BCgq<@`?0V7UIM&l=Pdv(~bj4DooP
z-yCJ7Ua=U4^R{DcwT||z#<savBce&M!al=7{LNYueah?kdfBWM&4w*hJ!!?EaE4&j
zatq!#qVYtpfhg{QP5lI$|3$vltC}JMC$;U)`26t%4UjjxK#6aN5H({{Rau5a4~_LV
zkxU92cGWT6R)Z>z^~jS!JX5ZD+VpS&x6cIToYqmMuX$yu<&aTtHOkgqTTE*3-=&n0
z3*%$)>MVp&!x6)^J|x4)!U@y+cPosKa6629sEeMga^0!Kn+XB(Vcftp(M{WFxt63U
z0kkzLMY?I>s;lOA(wmWsyO#Aty0gONn{~%Mkp7%pE?H(LcV4(d=f^=uy<Dq1*2Rr4
z>>XNVac*v%o%Bl0Y&I8r9m4afi@kSfJyBemrPq3jUh&Y<Wzj4^Hs#s0XJ<S+>)AQa
z&I=2l7^1W^M<DX9*bMSHeMatJ5eymf#>t9bs15cDe6QhuDn2augs!Sw8=&|sKK0^n
zlAfR;T}i$~;5C$|@)>92m*^VqL}6Lh!0;JXJcTq_u@*@F4E192=$YgIR%Ig$Io$P<
zvlQ(U(aEXjP*1zrAxW=N&bU;Fb)q~4aVLf$9{f4hx`p_<g=jxrC}gr{A?w)a7UHMB
zDCC3Z&@L7-O*yImDMaiBBTDC(u0rcEDXC=j<kXcH;K^xfEg4hJ>FRVIKs&6`?ha5h
zBh-%2ACpz+U430P+F{~J3O1$27VUchUwGC31x-eu{z~6@J?Pg%p%)l<hOqPp6@4g*
zVM#_L(F6LWD58?YBzara--+U~B%_jC(e(GCcwdq+Nv?8zJc?_QOh|G)qUw`T#3f2b
zwBHE&+Xx#arHv7z6lf!6l+-pxjgr>Jm{H<wOc<pIp``H)?6iA0$EhJ;5D^T~{V=s1
Zp;Iz~ht&8XF5!C`lh14ZJ|0MG`~$OCf5HF&

diff --git target/classes/de/framedev/frameapi/api/API$1.class target/classes/de/framedev/frameapi/api/API$1.class
new file mode 100644
index 0000000000000000000000000000000000000000..fd9f87184a35914c8379c62ee08f585222d2a2e0
GIT binary patch
literal 1087
zc$|GxTTc@~6#iygx@}pdVoMRZRIO0TWvSxbm|(?7Qjmxt@p0N6+oj8FvzI3PBA!hI
zq9#7@=#Mg<+14})bT@lu&Y5q{`R05(zkYxJ31A)1Qy9fPWs1t&Ps6~xj)gQvFrP$8
zjf={ZN3n!u9V<Fkb(jnzUG5Y+3{y4NYnt`2-L?Z$$iNPc%w2~c3GW4iu0V%=lVQAe
zz`NXZxNMqxfoIDmEhmDO?HAV=W^0x(KYRR8SfbmT@Q!V&Z)0~$Az#|k4qh>Amxe>H
zW^<9i;yy#X>RN(ftY%BG6CT!u_mS5fp$NMT?(B2VR(?MiSA-diEh&Xpb-3>fatlK#
z6)VI)=7o}MNtI0RxuMq(Z*7$^Nr+X&j5ut{hU5CgY+D2^*V3_Opn?Ym#&OfYb&MIv
z;D&)LW*GASALn&wJC^VmGUvzqjVl*|Lg<Ua`SH4ehamF^k99mT@D$Ie<HIRamO=ja
z^#joes3n8YhfvC1OQwe<Vn}WHN3v0EaoS%g{i9Bo^f5b;IA(<E38k=`YAw<y!8;ux
zErylSB?4Xu^_xH)PX=x;#E>mr1QKHMs$Yd9YTJ$WUnh52<$V<Bz8GM*hFB(})B$KD
zfufNlqYI|dmqm_H6Eu5Aeq2S$ODACE<r8S-l@r9uXNZ4^(0Q^6LPN`8lI9cr47YF_
zh-NA;qjwrJ{j58PsU0Ykze4+gkxyqxjO(XJk{_et6sd1WYZz2WtE^fcbJ}E7#pvzt
YSBYUZLe5bH#P<&FVk+9j=)}?U2RcOrkN^Mx

diff --git bin/src/main/java/de/framedev/frameapi/managers/WorldManager.class bin/src/main/java/de/framedev/frameapi/managers/WorldManager.class
new file mode 100644
index 0000000000000000000000000000000000000000..02c444ad6ae200bb7fcf08a95bb37a14caf49533
GIT binary patch
literal 2573
zc%1E(-%b-j6vod`$}XjfR6#}5q5dnVTP0o?YP<j?k`y!nA$m969onJWoz2W_Bfgl4
zCVKBv_$0=&yVRDrVll)kdoejP^X+fGnK?c4_4~)q0PqNwEEpm1SSz>MVIrvRvo5Q8
zyt=1YhkLx61}qdf9k3=>y1FZs?`@<#3q}c?OFr^h(5${}>~q%;7<(cDVV)AmRTg##
zjIK(LTQE*wvafxvlvFlMkleS|f#O>FUG7m=c0%DZBV<5BB^y5P=w(_M-)?d0ao1-G
zMIm$BxI8U;-03-WdQP35(=zoW*EEoZc9?Nn)F6Yu3(?^q1NZL4dv{`M&hf<5hv<Y-
z8MH%P7R2}lr@ajvQApKv8d19~%s*4EcS2vdIH{wMD?H9X8x^@mDw<wSWq}G!qrl^P
zBEWOl!x@ZO<eNdYLpLHF?=e<U7Q_daf(Jx}@zs7uXZWE;Qbx@|$Whvgg7zOYuY7h8
zyFOO5Wt0e-r$HJ@wBk#*y~f<E+fH>|rUb)G{SW*NumCokDMB935}2;k`!yiF%353_
zChM4Jn^C91)pkrKP^wFp`8$Uz9S)9~me2&2>wjCaY6R>iH%T@Un5xv%4b&Fu$xzLP
z83OGgD$;4?Gl3%dNi1%naRPG#o_;wh8)gakL)bgDe+dCg=uIp=EdmpLYj171MnDhY
z<g`;RF|;M4*wC2J&zUw!u*>71)H}=-sXVT>#Cv|k_cI%A5m-Ck_pr7J6wrur`I?B6
zb80ZrlJ^AjeLaXPrqG55=7r#jDYtcC!6Jctl0p{T!xR`Sq!u{1p>%x<9vpdL(`&^K
zHiXs~ZKDkh^MFq+#6KIOJd9y$B@cWKBY?suu-}vlAE5XJdm}K3?N~B{aBPdI3Z|fx
zjGc!I1B8*Egy{@IDU)y!E@cufXAovG30Gh)lW;YIFq=uZegZ-{lR!^ESj;5MpMbEG
kNhrgOOv23!!g2;72e%W|9jGK3@-R{4VFB*KeVncS0HQ&}CjbBd

diff --git bin/src/main/java/de/framedev/frameapi/managers/FileManager.class bin/src/main/java/de/framedev/frameapi/managers/FileManager.class
new file mode 100644
index 0000000000000000000000000000000000000000..0de0344a6817c2959aa2ca20e234a2c8cf4b1064
GIT binary patch
literal 6922
zc%1E6TW=dh6h4!L_)?Qwo2D(LOhW*h7Mn|;v<WHHO(jcCQ`9t4B_uT79Xs3X&a7s4
zqxOv_c;YAUJCHzvcYYM&%x>&#!Z`MZBn{99+k4J@^Ub-<jQ9NU=P$njz#=@z!3cp{
zfwF2Ib42YK+hH}E*V>AC+~zyU1M?jm7OcZnP<!CGd@T`jFh*c1p5rpnsjau3aVsP+
zXGK9My+<y4fivn-w4IKgMqs?Df0qcHH$YGu4<}NjSm;QB*r^1Y<|(CB1STEPmdcAK
zB!G#Orrt)#xbH?CM`#n)&{L!>xzb9_IM)>u__8CMaD_mjoZu^)1jg#p<~f+f1^1j@
zRZ6Nn%#rCEPlV!uba%K-E$R7=8}m_L$(GB#;0`SoHnupmx#cp2AfH*=7)Ls9^J+KZ
z)o#SA-H6XqTk?Pk8B+Ae+M*$H@aH~;I?aJOtm+(AwQ1GE8527k&zCAhbEw6Hrf+fD
zb>P?$Qgy1WXnWfU|0~Ei&W<#~bV(ToXecS8;R~N9kbRXt1pe$(>b-J2tDb<bS@2Jp
z=MKUTW$2I*Ip)0SI`w$CC2iW_VLf$PmMgTaq!*te8cS0LI#RXqe9%OC*mHuw5uH8Q
zJ|l~TCnAV^y%)H>DlBOucJ;Z%{S!#X|J3D^#ve0f!}DFo!lM&|grT*h2tpNEp;R>a
zZ-AL_0vZXMw;h3V@s7s3qs<~WOrxuG4bw*x6lFqRcL{L{bS6B07`g5v>4=c4Ve8;t
z|J&sZq`a}7rJm0UWI#-h;jI5x-aRk1J{n?&xsJVW{nM?jK38w{glEO~UHEaR^zHI;
z%d4+-r<2=5_G&};QHU|(%o{+GtUL(hvLIMapez5poL(Ihr~ck>Vz#|HTu!Jchdc#}
zZ~-otU>dFvm@PN=+9`<>al2)*iU0l{MqZ1n4c5{<nwh4wn7hf8qvc)YSh(c`1a3Ev
z*u`2RaIyEoaG)VITdo*dQhAss@b%%{9^LH87&`)&Ej;={ZZu`IT-nUSy9DkJxA35~
z<^s0E4PCfAR0w=Oc#YF|-NJ|{?n-7GBU0?uT9AVe2wXkv<tz_10^baF>*z0d7}8!K
z)_4%0yFF8{q!W8^@X}r;4i3$v-S2ffwW^u!R!(XLeCjGub08;3l{TTPoQfyzQxzY}
zNLf5-icY0c7dI9Olo~>C6<@6!<NgH}<PkUCLOro)ci~c6%)ytqvo$ye_Xte?tu}IS
z9|8I-#F=YJ8Es%10=N#iSpc8_MR*Oy@u>(o$j85hUAed`pWBs7u{;B>!vy|f_+mZ!
zAL}RZX&OffoR7QaqcEap{R$VJ&RqN%F8z+u2)u#c<A~AouHttoelEhBa4puo1vJG#
zdJNYM4A+bdZ^MF-;T;3Rf|239J`808!=jPlePkGc8~8ki(oF+b)xfo6<oYl}L>fkh
zk1|AL-N^89hKPJ?WccJr5osH_7W-IZib!N+_%s8<cSeTKGGyfkBg3r>S^3e(@OcI=
heljqO!tEG!2P;o&2`uAh1^54IERVrm_zLQ9^Dol{OKboD

diff --git target/classes/de/framedev/frameapi/listeners/JoinListener$3.class target/classes/de/framedev/frameapi/listeners/JoinListener$3.class
new file mode 100644
index 0000000000000000000000000000000000000000..200c1409a6f2ccad237a8ea2f658306ba1b407d0
GIT binary patch
literal 3686
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

diff --git bin/src/main/java/de/framedev/frameapi/managers/SchedulerManager.class bin/src/main/java/de/framedev/frameapi/managers/SchedulerManager.class
new file mode 100644
index 0000000000000000000000000000000000000000..d3c485f5d1f4be2ad0c0e3be920479fe289dbbee
GIT binary patch
literal 3843
zc%1E5TTc@~6h1?dwrdqcQ4uc#UIH)ei%&vG1aD1RiMC>RobC?o(A}BM%xoh+#b08g
ziN5=Hd^eumr2@Le66-ZI+39x9*E8R_%(t^2Kfiqs0C(Yb9>xf)80}U9CS+xY^;pH@
zm2J%e?(trF!$N^($=Y0-O2h4NFY>vrr!#pNCoq-#(Py$<*=X%>*Ah6}=C-aR->u4~
z2smPDj}Of(6PQ>LQrJ}jxy7YT0^{q-<9RquU~=EzL#>rAz!{QPFQn#1`91DYR|TQ)
znH5UXP^*^D19Oi$#b$?7kGnq82nw0oMT&I6<K=!t<$grvenbn@Q`}IgEDe}-JJg~N
z{wl;M4*I|xmE#<hV`}B2J*GTF5Grkv4t1G~-M2XH2k?&~lx~+>QMW7XUx=&*p)XuC
znkeKNTSOYGBiAZT)23WpqQcNfdVE_*tnD^h@Sa7!J%}#TdSv2k#3;&S+zhGX10bjP
zJd%=O<7IH6R#8UnZpfYD;iexYxQ^YJnTU-Z*IHy&bEyBnWIAk!wlta6KM>GbQuHAc
z-mqH8_76book(_l#XPRp>kl#)9RgBQZYn`XFE%7>ZE$OkhVEz}N6;Ktz~dW^Rr2~)
z<5_JWrpL61oeai}ipP)}ZxD%JOYYb;aKM4d669fuz|3N8|B;;Tu;uuXJy}DId>REU
zuA4Cj0@HD~`<r_?-<uq_9bpKp)_&%sfd_`1jwFFOjM$=_RAo;XfeYM^xhGo;7jbI+
zGAtKhmcXYWjt&2tV&d`3Sf;<WhAF^Rl6yTwCQhXGL~2i@_IFDys#Zfq+U1W#ESEFi
zN?-EQf%8=vA3=q&T-qmsYo^`KZXV`wzaQ3(JlrHu=+h-ostaRquQrjNfq6hF#TP(=
z*D095F^BhgDBxI3UJP@I&3OmT)^zC&oc(~m#^4-|6Nv?N9>-FOg7a`8nVUfmV{mZ~
rbqT+}_jWnM+ia${D+Bn<Wq7!g;UNdt64Z6L0rBS+UIm<`umHI)+-2#W

diff --git target/classes/de/framedev/frameapi/cmds/TrashCMD.class target/classes/de/framedev/frameapi/cmds/TrashCMD.class
new file mode 100644
index 0000000000000000000000000000000000000000..ea6cc2fa12001950a2f062a4ef795d29a6b7dfef
GIT binary patch
literal 2733
zc$}S9TUQ%Z6#h;inUG9MNG~+Cttl4?L>RAVNm~_K3N-<0kcxOaNe*GiWG2o`Xz^D4
z8T|#m^u-4$)U{mdqsw39a=F}RLV!XpT|VSwpR@Pbmv3L@{Q2+GUje*<A3}&@vIpn!
zRuFH8a1~QAV!RW=yLeB*bPzLPD7YEKtq^8$TW;nQ%!d%cWC(ZgzN9iiWaVZ-ZWg7?
zl9aw1#0O#Iu%uvF!G{V~7y?zJR?<y|M5ZXTb(>d2QEb%-Ue&b<*G(-;OPXY_>89@9
zU>Hnx5*{Vh-7{8EF!W}0Q!Lafd0{W}yg?_ij8)*q3b%E+-#_ejH*|+#sJZ4srRZqO
zHg`5=vNy?<9?P7uDiv-P8P<~-%Pwj8TDh#dTA_Zd?Xz>jEDAf_Mk1Zr<Xc=bxLMM2
zuC1G;^xDaz(T~ZfZf*(Fwd`#P*Aa~e=h}RON_)`qZDBK9I4VnQ-QCufJf4(tJP#QL
zI!D2v6dF-qY!?!P-{5&+NUTqULRfRVL|C705+_3>=kh{1%d1{usOA_#Ijd$D#H=n8
z6=|elLS9yJ3HMaIfQw|)l^g{hsaOT!6`i&$*P+8|R=68h(di9fEsEh@KR!`0gijTG
zrs8va!EnA6LJX%GMKIy1SHY2I2>$V7VYzOuprQz&VjU%h{^Jo%*K~uhQ$RP%FjQ1P
z)y@(sEV--7<xAKq9JqvPg7mIhwS*}|G2vQ?yh!jw-IXf}YLuqV^+}N*da;<_6a~^e
z&^leW9*9DXiiV*pDI4c<`{ts2l!SXw{*%cj)!M8$mb^}Hlt>6$xF4cH^MK(_i++B#
z>zXP(76R2zqLXQcup`{Vphw#E?}1_oOk{&QOTw<`j-y+I!`Wt`Q{nX;(Kqe=(HJV&
zg1ch=u!Yx>9eQ}ql9iL5?|^Uf?vGeiVIHwI+sRr-r7OC)Pl{9Rt7B+Z9!cu9ps>|r
z+j-Lz_Kd+DN6-Z5p+Z`+#kx*Ka3(q0Y#ao5l>(upjW?~c7VVa<>t3*Ax~N-StIqav
zZx*w{ad=6z$RK4p>Q%VuScb^$&&O1<MFDzJ#|P!ebBZe1R`C_SmGfwry7bT+%79fC
zT83BhMNR{Zuk%7ZmEp?aPQgRMC}UaWT9x6iqv7l;sL#GRvS<irs4m&$o73vz@^)4H
zKW5!z`@5qjxij1_a=I(h3chC;ey(_EX0?~Y6`C}0(6^9&G5NWmSB;P8OSnwyi?my%
zy^sFmV^6@wQa{6&igoRvd+aIvzzzaGc~=s&#?Vb`FRfAZppR6?$N+Gzt^flV1UyO_
zqG>OaTQ|cZ=%V)!V5feE@(7Em-=IwS<NjE14?R9SLYzg%W1(Gyrvh<*Jg^7VhkM<R
z<NjX|S$%?2yXf6PG}cGUE@HIq;Pf8O_|W}$7iXUpI@e(LOEy{U^86n|$n#b~KRwVS
zFc-+<OBg3GG?KVW(d5YIDtRsAnj^_UsCWq@2+)mLBrz&cfqf9GO<GeFqoiIYO+JsB
zAbnjP^$K1kyj~+Z4BtP{6uka7UG1Vrr-b!QY<j@@=-GG`I>GuizQZ@<TAI#PQhbeM
Juj2-;{|6ag2+;rl

diff --git target/classes/de/framedev/frameapi/queries/InsertQuery.class target/classes/de/framedev/frameapi/queries/InsertQuery.class
new file mode 100644
index 0000000000000000000000000000000000000000..55213a4ccfc08e2b75cb12766d9dd4d0948612b4
GIT binary patch
literal 2875
zc$}41-E$LF6#s3SWVh+Ig+L3%4+2sNNg*hLNK3J_MIvchNLy(6+$P(0+jJ9>O{FM)
ziz52s8!x{2z>G7_AR|G<aeVea@&*0fn-3C_&cH+NJ@?*of9IUvIp=QvdGg0!0N%p)
zKJ+54V%!H8;;q<)2{D`&!x=Fo#KEM7DIXWpD$e@QhPZ}vVxG}3E9Ud!@PdYm8ZHU_
z%NnluU|>!|Qmj)NObzowTxi20tTrrRSqy0vb{n=MqarKjs~U1D@+uq!9><tVn+p7~
zC1cfyqz!u^l5ldCz0j|~yK1BhW?n&0>9pWj=}647m(A2kBfmIiWU17euoi5?DddQ9
zY(2e!M)<~^L85i03fZ)kG#qofY`Y_4k5u+fnQID^S$Z~L*_Jb?pexvjvu9d?dpMJ#
zL!I=(j2Bks%-m!p&`i=uPa8Q)tjn8jXVIdmP%LFe=5xl1nKD;Pf|0c%R|{s&GV_tB
zoi}sNX|C4jsYjBdV4{f!O?-M0Xm2u;F09xJ2Af6qB1oI-$(zciC@AO)z7R@F-V~)W
zSFqA4V)Am6V)2-^lVf^3qorAo+P0Y+P8<2WNMlz`X|N!6Ni9)6c{6L|3@4LQph^p7
zu3B(47LJ#Wc%!>MgKODJ7W<o-c<#z;PdG+$nfD|bn~>e2qM*Q+$P{u(^MoaAY^Y&o
zpTN-(!K#8S>lD6@Aol3!6T@EY)A2fX>-YfISjWe79Kzd`yN$7ukm;e=)Mz58V-44N
zgCHMbP{)9{rbpw6(KC~QXnb-!puiQN+DEuSwLTRe>-YqplHNcGLL3J18JP`?#{(l%
z6S3&<(Bx>~)aXoLYGOo)3ZUb2+)(j_jxX^QgV%8rU+ee=w^V$qU{e!*b=<}+^73p9
zI=&P8%25Tu=Pk85nDMzKGs&{^KQ$V4%yOl)1Vxj#WD8U{T-zk2Tm6kYdm6XcXht?`
z+N|llO&e|f8q}OjX^R-k=2}AZ$Hq!uNME@{z22sw3x#|{hCC%i;+4CA6*ds8K^e}Z
z({$C!*iGM*CT+O2&WoD+G$K1x`r2OSD37cvwcT|970P*CT{QA>^O_^s=Ns&{<)Z#M
zs8ZWrS1Y7x!F1&Ftx=F~J9hAc*2^!Xo1ZMU1tpj07VsgKa+trqXV&Z?$}0CF*w66|
zu2#^(6QDQr5K8DVTr&^R@&N9qq9??`8wx*w`m2O`ljAmcId;*!j!v|5-NBDzH=Wvo
z13c+2f${@>5Rj5^k|iy=wro01(=D9!&~I>u`-;%chVE4@_$0y(&O0Syprl(x)NxoM
z3h59fm&AUjjD5TumM;|cw-(`RMDBw|LZ15St0Mc#$O?|2zl?WK;*-3PTafWA*dcfr
z)&c2^R4aoi;<afKu4kQak8>V=?r;aH;hvLqz+0j4W3(}Ey1%`Mjxc}zP7XzEC}Lxy
zy>YyXi5e0DReOOd2}dzlvZCCkPb$yumu<wtem}t(k17mpD#`95Hv7ANM|Z`ze@pdX
zYu&+FZhG&)2>W})%D-()P*cQ9kMOdB_})i&MZp~mQFv9s-`IY{-Q#|QfRJ|_@d$Zm
zN%jgpJ9<0<`86SVC1BUs-T(e12^;RoP7!g>GE!iM$)ANE=UJ{7$iYSS$0hc}WoGLN
zM)=S0B$8w&g=v`7p2u}8@I7C|53uOc5`M%oenJ{|*+D<U#xJ-kc^qV8++-UF_B_<y
zDzoL~{rxz`{JM!Y$sF&NeBUqgtr24cqvZKSxrR#m?@|9GcQ(TH1oJAQD&ALd>R+n4
U5R=Iq!;nm;!v0&qyWZCS0VrgTeE<Le

diff --git bin/src/main/java/de/framedev/frameapi/managers/MongoManager.class bin/src/main/java/de/framedev/frameapi/managers/MongoManager.class
new file mode 100644
index 0000000000000000000000000000000000000000..896cdcf5410f019da2f36af05a5bbbe8ad2959db
GIT binary patch
literal 4458
zc%1E6S#J|D5FVG(O+q1Uxo=ahlw-qvltV%V1X2nQEl4~%yH0AlYp-l?IsO<DNbt@Z
ze+V(_O&}Eu-9mUkZKSM^`SR`Ou|4+W^Vjzu0pJSU@nD3&4Wol*%!F*dWGk#0@@7Y~
zn1_5Nudqa*S+XwIra7-<SIy@w4@L=0xF1DKcAHPzFL_`IjCMrC35>NKVtI?emY~xm
zu+uf?l<bIZs+ko^qHRaWENe5vjnzUTY^wExaKZH<s*)P6C2GNH!i;&Pbcod@Wo+I%
znkbELCXey8K_s}u#`cyIJLj4iN&i&@>bdEDuLF%^w}lk;E{bi;JV(Ac6><;uA@qlw
z2U;s#fdiyke<n3IDq7(o4OE<n$c=|4TD2n{n^{_`E-rBz@*rXwK?w_%(PeZx<bL0~
ze&4%(-@DT^RNPRhERC5BmZ(Jz{yIUg4szgp`PqE=nKb|RjJXaGXa32g(tyc~zs+fX
z1e*}&N1;l=QY)ghfJ%4$w!!sK2A3``3;UPI$8i#g0F5S1xW*w%+)im=m8SWoY|Kz$
zXevYA5fax@2Q64<X=De{KAlgEr8$Z+nJvDYcmPzZW*fOc2epbaYTqQhG-Opc7&86^
zi=(yhrG(~TXvpd|IO%%v1EIVOvLD%p%bFui;W`=sEO2YlW52--U0$g<%IWYpLO#KY
zqS*S-C0{!{&_<lDb&ht}o1+}I27BSqIP8MM1a>!mzQJWzs(K60lqYH2=6aE}vkT%>
zO9d=?&a}wdz0Og)Bn*Ms)}P)=@iI4or<KH0&+$LPOJW615HeBX(zc;i7y+;6s0y4W
z<V$J)Y=)5kWrC|+Zs&UWP`xp;DkG}ESpqBnYE!JGY#S=O|2-j_>}&g;l2xEd;B8rT
z!w+c$Y6~jW0e|R{*~!5W;}S0qE@QOHtR7rNz)v?C53b`d2VCO8P0UJHY4G6IsuX&m
zmj#c{3uCahh*At31I$Y?W3S?OD~v(*@u1?$D%4!Ltyhk_as;;b${kR5<pfN+atd}j
z7J|`wH$L~ce*(5(4WRY`_P&_f{|*j*a@ZsI9CH=|M;*6A0Yybw-}EmSju$Y@6f&Ir
z1;eQVhD(JE4P-82I8(rIr;y<soG)bX3mEPdFpR(j_q+(Vooy>By#m+Z2F!i~>ph7U

diff --git target/classes/de/framedev/frameapi/cmds/MoneyBankCMD$1.class target/classes/de/framedev/frameapi/cmds/MoneyBankCMD$1.class
new file mode 100644
index 0000000000000000000000000000000000000000..e7158bc194c0bf5710d97978f40a86a5694a4399
GIT binary patch
literal 2127
zc$}41ZF3V<6n<{gcGGl$5(|`yb&CPg@UlfJC`GVMTBs(aQmht~db4}8S-QDf_N8O_
zA3EbN=x1kaKydtk-~1i^3uhe9-9#s)EfYWNIrpA>-e2zBKmLC48-OXS58xy&EAYMo
zS27sIR0bwK$lxljDez$iAK|(J(`nqu;A7lO<5mWrU`E4i28S_~Mp5CC0&{81D|~wp
zcd(Ggr)hkaMp;8e!y-f9Ciik145MW~aLj7FzV1e*kdYg0nM)qu62Wwv={p8iV(5?R
zZkU^7$d_$l)&kxTw%BYf_=am*4LdX|z7$)tT&@=@C6e#I;Yv5U$uQrw(82DMCRP}F
zi@q%wj+9*~7UM=$1owH>BTBaHTijdWfvfgyVz2U<L0^zk1VxXBp`dM{OJ8!ADTGuI
zOM-c2{Lpg5t@R4uXsgdG`*C22c~@<Yc8Xql%r`l?IVUa84_)b0L{#@}4R>`c;d34D
z!qD+HPU(0DV>-rB&~XpT8t&`(0xLSc#EOQmbgbfmj)(Y~A?<PL#M}`YzR~drYg8X0
z*X9;Ae5-?_%5XxNH5H$^90g={Hg-K*1Po_hZSz$>HtKv+7*!#p5yqA!!mt*52Dfct
z8?UyjIxN@<P&^|<;E``^QH+KP%b2k&KbDb>8XOIE9WEY|54Kn<%~2x}dr27xBSQo=
z-*W=tT6LwCdPXUG8XLBtx;1vGGwQB<8atx)`>#$kPORM)hvB`BUJ0$buwzdI=4?W^
z7facy(%J45G7R{#=r<Z%+6=XPXCqoIve`af7Lt-W{RWQd^6QnDez=!3@ql`WCuPV@
zPSR*Cbv-5%`!lMqq4-+d)W5lI_!x#}Y&%)b2Yy2tVHn$$g1fbvN44vm#lb){{7uo;
zFt)Fu26v@dAwcYoh!$iRacNOiPUjB@;Xes-et<-ZzO1<p!xa+Pm2gFl10K1)G;1`1
zrkcZICz&*u|5K!8vsE8zo%}vU+e@PKy-p*NcoK6jTyUfxh$0Uu=41P*qaNtz8yiA(
z-Nml#wTGI_p30ZrbexX-f4v#b@9X!-LANcHD<qdH)S7hT9N_v240@|Z=>ba(4XN7<
zAWRopg6WE*lOFoUaT+wOw7P>7`Unpf&hLN~F6^MEFtLMF;Td{=O1N_b`-vO$zMUa>
zJkc<Wv&aL<O6jF12@@!^wf>3TMB<0S&tT8dN2rIsR1^JsDB5$Rn;6Juni$OLO&t0W
z1$FuohgYBBNOq`+qb<&C_AOdBG5iaT^<W#<J0*`NlIJ=lPjpC*bV#bWQb}B6&<Nf_
zmfq|fW^fI&bdMMD1SNcr+ey57E0T7+=aX#o{DntXNymjGLl<$0a4-EEOyV4^G9+;_
H$qoJi*@#H&

diff --git target/classes/de/framedev/frameapi/cmds/ChatCommand.class target/classes/de/framedev/frameapi/cmds/ChatCommand.class
new file mode 100644
index 0000000000000000000000000000000000000000..138b3e40847812016674879a75bb5c6b88a19273
GIT binary patch
literal 2750
zc$|$^%Xbr182{b8CQYY60|inlraUBVpwWs2+ERfOu+Y*<5d=iNncSp9Co^GYQot9A
zkA*vz?A&$3#s$U7Ii4d67i|0!Sh{!R;fTlY-lVn-Nz2K}o$r44d;Gq~{brv0`^&EY
z4&rVMuVADFU3fc+V=)}Zi5RjNjpAesr*JxkcQ6*i8JyKH-iisyiQ$}FCgn1v;oTTE
zVkC<5@;M#F1^Ilh6&G<Siua|?C28PtE3V*l6jx*T0M|5psNo|GA2USCR;6g#49W4l
z$P`>&5_vIKC3xA)l(=bUCTJNV*<sT*{Sk)Usr7_=E;59&PF^r<95-!ou2RYg_X5vZ
z#EFkP2DdJ9*OdDjGvv>h9>c!ImW@*0%VcM`pLI$lZs!S2i(}U|429IV;}$cy%IvJ^
zXN)R4Q#+m(c3!wcYe)=@U*~f?V{yBfnf6`NE)HFNk=1jBq17M^6Wr!S;WDI~r9qun
z0oQ~HaGO&oSd@z?i{F;oohuPdt~`^u_PJXWew~!Cebc|4S(frtYz({BkDoy^mh#oL
zRx%jE7S9Pw7V3p0P@xDI6>4*X3{i~JJ~w73cv)3d1E<E-kYk8VI~CUur%YMvO)Dzd
zC#~q{hN0tCBq^qfU8?w`o7W*w&`{Jd1Ct>tb6-8Wu45LKhLR2&j)t<18=y4wymUPX
znsn;v@KMn*hno!B>H|7aF)fwe&d2k7w33|Ro}UzM!Lf?2FpZhy<N2J9TewYu6V0hS
z5?{Vs$0rirr#e0Z<!W11{bt3@3u$3l>~nmf(vyBXZ;YD46K-<4Yzm8>gf;0IGmf1U
z)EIVBfhV<Y4R>^WiLV&;zSLczd@lz!nY%6wYO7t%8{p(EVN`sF!rtDj^;REEuI}q#
zO5XmRYflL32x{;D5e}pp+_y$eI;F<da;qlSlc78734b}JeQS-1B{4O>I-ASUT_W`7
zC@6+4sh&nRVN*SiSmH*7Ti#gFc3hF=9w~P;iks$4`wHJD)Pn{dxm?O|-+K9~pA-!p
zQIMMH$)?JyvXSE`C9B2=r>>llA`xCL3mNl)hEAJY8uA(Sou$wlm1)&@Qf0F96T<W8
zdQz?^*t))2H|F{o+P*A4X8S^o>}Z+0o}g`$l#J0(=%TkWH8B0-awO5KIzV(ccG0?<
zb~)My=()4^Ay{wv0RriGZ~>v-1%%V_NR9eQ>FuF)E5fvHM+gbDpc9+1gFJL$uR2qf
z@EZ03ijp1~{Zi<u`U`wbno)qA+P?rzdWzn|{X{6(|1(+!!-??kIR6N-%ZczJS{WWf
zAB-djMcX|bN<@M!3)ql;gpHRUVpF_*0r8p~QSr^REMUtbIs!<9<69T8Er5AUR*i2T
zj3~R2MI@?rwS=bZ_9e6icB^vrb`|J|0{z`8(1)6U-jI%WD$RMcCnBLlC`39tz9o0_
z7+nup#}cv?Hnf#Cg7+!QK~<MIssgC4I#srVGTlksUaCqzRpSWN;~LeVKpYckxY&=o
zIDqfbhaZr^1H6gf=o9V<-ohUkz*8K;pE!)aFvx&m7Q|7eV}#MC9ovIrERExA09iJQ
z)2i;@pp7gK(?5*}S<jOF14P{=yOO67q94guhI;2IVN`Nt@o-g+?51jRPv~7!m7@+>
z>La3F#~ai?lIka$0Yx1ov_VA;5Z(}31EGojBVV&e0?%;vIfjYSF!&5@f#>MgFhrZb
M2`nS9vZ0Uu2Wy?pb^rhX

diff --git bin/src/main/java/de/framedev/frameapi/managers/FileManager$CreateConfig.class bin/src/main/java/de/framedev/frameapi/managers/FileManager$CreateConfig.class
new file mode 100644
index 0000000000000000000000000000000000000000..052b5b86d37a653c40d3085d59921f6080aefcaf
GIT binary patch
literal 8265
zc%1E7+in{-5FOg8b%_&SQulsgoTQbLR_Y~f+Sv6&Tn7*!CjsIFNZ+VkN@BcAF1TDF
z{+fP8QJ@7{pl|I<`z`%|qQhNDUcr(jH<F_?f}j<-JadLK!yS&efBf^)F92`@wzDut
z;M-6;WuFOIe!^O;?DBG5GoQP>l{8o&a9FYi*J1gN@c3TRxw4}<GkizMx@cq}Ltr^3
z@R)3r@711g#}LT*hY5hd#i|ufdXZ*ED7i_X;KVoV5P^jlf_E1@#a!+ZAm3qUOGsh1
z3CtHa9udgwD3@npiNMm4zFn=A&cO;<x&BaU9xAWJUFs-55MHc`23plT?uWN%A-~_`
z)a8!HG=c)=9H2dP-Q}f@<)x10rH<w6)KxsBQW@$q<20#34*oPiE7Kh4%aZkF$xf|w
zGGj6i;Ri|^oDOxEwDdJjI|hs$p>(5Eiw+Ki`M)4zKMU0tW*1YR0csRw)Eovpf%GiN
z5%AMbxrZxoJX$AU>uK<hnePq5k2KK{Ju>FF*>&o3(^M{PaI+JIM)`?~;s&j2<;PjX
zVreR|B2^vpgC(-Vz6e7h8%MC7Nfz=CWf%qaS>W!jbd-zO-KP!@CJ>I7)Z|Iy$4puA
z15Y@ZI?+k!THIhmqa(*CO_OaIBOyW>Ntf4!MA<ryV4FprNux`255q?j6lKzGcL{L{
zG!+)#jXdwZ64G!z>N>bRcz2nCkXP=VW<5^}WQb44kn3N_z2~{EkBV$DPq;n$&vtDM
z*m_SN@YCW4Dt=(J-CdsV@)|h1vx)5q&uT>mkwG7E<_{rBG!FxLEDX02==QTOr&*df
z^ZyMKo7*h8OlVP#m<0-O0WL1WIe3-8TCsX`oRS!^X^&f$s#yKqjr<zd`>bY9X;!Ps
zVcsLAh3&U*W=vCr1nyMFahkMAAaDOYv`>!KiW_~-j&kr0fxkvL?RlZ9NdkqCwb~Ln
zc%Q)c6EJa{B?f`>-B=~Zc)51GFhrLLG)J8OGfx>^XO9g#uKR#w|2`|#v(k4~`p$Nz
zS?N0~eWxW&%u3&vGr3^(;i%v+DMVf?R#Q*(W>S>cqPEb@6=4>xW3}1s=ip-km6PiR
zTQ-bd94VQ+%&apn<T?0+z@?$|IKu}j(hg7TSWXqn@tZ{gixnxkjuQ+=8@?cL^FLPJ
z$kqEM_baUC?RXY$5m-6q|14|~IG6G(66_@h_WNjZ2$z7sJOF+R@Cqzos{mQZ#lLy{
z0``yr7V&yMei1#7EgbzBE<9dc{t;Gx#oipO;dLP%!ARnDF+suW@CN?o;Z1m}&2TN&
z*I{_O55o^J!(1%)ZdY@!+<SfGeoM*G*s|kt>wV;YPsv>wpzmrQxj$2KA3_mZ8`#d^
z*tIUhT$kaa;|ydu#ZVfcx!gzYYFBO^K8;(S!RN8R34U(Cm&o@`+|MA}P52r%{{={>
B%~JpX

diff --git target/classes/de/framedev/frameapi/listeners/money/GetMoneyInTime.class target/classes/de/framedev/frameapi/listeners/money/GetMoneyInTime.class
new file mode 100644
index 0000000000000000000000000000000000000000..5454ad11c3db0cb1c2c9f762f987384443f4e33f
GIT binary patch
literal 2249
zc$}S9TT>iG6#jY_m}MAXAtXiv5e*5uOJv9mO%@5TTmrJN3WAB(X0~^kFgrudC6)XD
ze}qpy=G9aw@lxf3kNyOIie;&%dj?#rO;D(!yU*8OpZ?A{-97v3pFjQ#;3lk2yn<Ug
z&SO%?+ju8~+dA%`n8B3n-_2lJ_IEYR=+H4Mo4E{18O&#}pkYx*R-#$VX;{*656c;>
zbm2X$YA9=1)3DB9EW57oOAZeL5ioS@J5k+s8HQJ@!mRncA*$k0JmCAb+2FQomZ>Qc
zcgl9{aGK##?j&-4i=nOLRRu%us_lxksIepbO}^t0(!c6i+}Yy3E$sws3wLeObE~yy
z#|}b4x&yP}x#EerB*L;BEW4X_Ly)$fdV<&rVMynchEN%7nW0^+r13mM_eRLAy)xfV
zHa|<N*K0M0lvW)6MEK=|D`a9G@<-fsxLY^ZBFCwCwi^n6;jtz5L)&wUD!EGxI=3tl
z1S1m@6AargNYM#_<WH_b>M^<3H@wKV#G)<LpE>SiT<SG&0fPpHa9Kme!29@sO0P)c
zvkfnDLk$}SHt``PBZlWZ&k@`;u!U{fAO@vB10Uf&Rpu1&j9ilv9vJu-pD<iFmf~Q%
zSq{Ts%h^N~!>cW)<656e+I5DDFR!eIPYryA&*^;p^3+=Mh7$?Hi3SZ{7~t4pxN!;r
z4B3CSU*CBsEK0)FmX4IH8mH4`mOM8I{m2SEpKi;=m!B4fPCD4Mq-NJiWG=tz`E_$A
z+S{{3(^7Eca~Y~xqmyLH<5X&f>A0Eyb4k4Cycfk6E7x>;HbUQa>%}}>K%F>8rEN)i
zK<^EamgUiCNuVoz`*fFVUcL;5AGw=6*prCQa5vYSoA^;QE2=B5tQ<>RVC{-(<OtuK
zQ-JhBiRx>j#1mBEIQ;<yx*^=E+-U6IRcJK0TQw6_DK=v=IUW6vREDmA24#AGc>P6r
z-@+U8g*gwpO!S|UF9dyf+Gsq4i`2eO)*|64>h;2NqzYr-fjuKDg<)!YkfyeeR`jD2
zXUH3HE@tCRTmsZcdZm{WBe<OS{2Cp!2AC~;3wD5Xf7=1t?;RQ)2hhI4=%JZ8K<D&N
z(C-&UpQB5nokQ7y-7gPdY)dI=CFM182@0m0!WpD+@`Oy$H*^M*O4cy(@-%-1qe}E_
zBCwk{IhtW8kktY92WHY_jU9>ojnH=LD~E!*o5l7hv6F{pZ!9*e#P&6d?caWi-aBpI
zW1#=+4>*^?GxDD&eI-g<9K#h#BItwOjUvS`MYGe?)`(*htBwWiVjX)bo&qIsfs%U_
zZ_y}EYY!u<97R@YifjO>zX(Wc7*A6%G?>4mE1SUtt|f7rsz^Y)RQ=6SjXM<Bqc$~S
a0<NnKQn;boo0MwM2}sco4J0*Je}4l|)I&G`

diff --git bin/src/main/java/de/framedev/frameapi/listeners/JoinListener.class bin/src/main/java/de/framedev/frameapi/listeners/JoinListener.class
new file mode 100644
index 0000000000000000000000000000000000000000..2acdccaf040c4f596355540b69d343c1bc7c9cb6
GIT binary patch
literal 7628
zc%1E7dsEv+5Z}WP*)9!)BrR?FQ0N2Ghuuf|NSvkxVg`3a12H6%nf`M~XLBImsi%_%
zzEQtHXWE(e|9**nlTP>K2c96~S80=sJtOI)`)PM?Z})er^PhkJ`a1yJf(;9%2;2^p
zTc}em3Wu~o3mz*}6|FOmHJS|?@Pf}n%>+|n;d{x2)4H=@n!tSgmQO{k@L>OtxthSV
zrr{9*QpTncOyH8Uh1ViBTq&x&M&PQm!F{$K-$jaQE=_j|l@XY6R=3OM&aHa}xlRM>
zaxGO`u@Q8a3$E`WD7W$m^{h*eS#XuW+^Ib!rKC#3buzcPClm{%-(a5Y%6h>4Sfd>%
zx$m=jc*o9Wb`O~CG1sRGL8$PE)|kEIv3%Pd`L;Xq9d|6*o@Ajdq_*o+y9c&LA?!Fn
zH*^a@59f^|^2WA&ACXN<cs-Cxqd~Syg^|C{?Dh~Qh;tB9)$;q%(Gk}Z<nxb=6DIu0
zf2MJf=E=ZvJ@7d)mmNj{Q^-6b)GBh3$?PUq=2mPT+L7>Bl?!ByD)wNTM!xPw=k2X1
zG{J9BHWh|qnu5DP*-V=r6Kt`yw5hF60+!7fDjp4z&72|a@pU2BkBvC9Lj244QiBP-
zNrmV4g>L)wgekL3#xITP=$;*Gao#+PgrK-|jqm;k)vAwC)inFR6}Kj(&*)I&A61nj
zMJ-WJ<pcwup4heRN3~HiWuQ5(XvGuF8ZP)BvcRV<TR)(xnVN~p21Bj&X62y*uR<HG
zi3!WX<bhNt{i30_>Tzabgyh|cxE?EcpTUW}Fa{ee(}#(jq1PBGSij&JhAYb9uCcOo
zjB7)W>7~dS1H{LZ%8t`x&O%(`E3BV{b8=$5;2TNsj#D~zSuntq3}nN$VuAVC8q}S`
z;(NQlch3-G9FLS9Qx#NrO@tS?`VX5(kEQax^D$XifLCW>4i*Vq&pD^x+RYg+ns4zr
z2Q%%5sJ_osoJa%~9O+X35mnsWw;oRG10E76IwS8tm~8+l4yD;)xR!IC;;q=08|W&{
z>kJnm9&*&XY6cfO19e|^x@obPh9#2vYk;kSNjW$v2Pfs=^H~lOu%y5^Yp^cT=u~`2
z8fkc+kmZYDfful@j2YOlTN+l#^v3_mos&XzQix6p(HEf*B`_aqs`Osqp@ZY9l)z%n
ziCe`MWfz^jz4HB-uRkVGI-hwA@eEMi63A9$q+DhUCUB*@*o^<X!J@Y;%${rfP;YXk
zsB#ZZEclE-3Yph}Tln6Y?L`Z|#K&jcV8Pb}(x;$1SQQ(OTW}YNwK+};?qNy&6ct+V
zUFTtERk2_V-#1>d;68zwmg8o(co<?5?BWPRxCv+|0L(xJk4xCX1rgHmH3QlB`V!2>
z*O%dPj6_v1kLN4#zlJGn0c3xJg(nNwet}p1z`H4U4bPY29s;l9dA5my8}LT_>`izJ
zQE#_UHeTD(raIDYCP-UOl=cq1+gI9q3DR~Fr7aI&TP{J`kBQPgfDgNTHQkZ$QG$e@
m6C|V{AEOHJ37B6Ak42o5PvLX;0=|OVP=s&bTUdp4Nc{t=h}M??

diff --git bin/src/main/java/de/framedev/frameapi/listeners/SleepListener.class bin/src/main/java/de/framedev/frameapi/listeners/SleepListener.class
new file mode 100644
index 0000000000000000000000000000000000000000..b9ac083dd576abc5405819b384067964895eec40
GIT binary patch
literal 1688
zc%0o-T~8B16ur{|ZPyA4q9}e0Je8N-7oUKbh`~Uzh!G_5ak_hH2X<#RGqa8SG80Yo
z-9O_$Fy5U~C`pqNpNvg9JA3EM*)!+Py+40{{SE*xVXXl*2AkF-Q7)v4&cr}ODMqJ8
z<e1`MI1z=6GHD$uG&VZQ5R3TowE;5>?)hz*P`&7|dxnW)Ft;t0bgvlHI~ykqX5Q!&
z8_;5~aE;wHMw=$wVYOc$l|ies0j50Bc_B05q*lBzx|?BcH+j%H?juhz$%G+LA(C^^
zL%yD3IMN!9w1!t&*LkYZa-|*5g-iO}5ea@SNa8pN9Y3s&A6DAJDU?GcGB31oB#0+M
zRs3D#qa)lvXwwV3<@vdE{~&TdFEW|XqAd$FWWBP^l!?=Z4-?th;L`F^rFbe8S$0Y*
zG#6#&#?c`^C~f6Nh2lb09uJAfKtXGCX(njlPIJNCMS($UcYw<636*A3q3<(sfo2EO
zUFFdDjZ=0UP@X4xvEyy}P%0(p&P`!C9H23BV)k$Iu>hKIw+*u}&tSO|Uzfy@Gg9@o
zs*+iV$;)?T-bHg<DPph~>qKNH!pQ3VGC1S<(lXeN|GtK|7&Nr<AqFd*c!H^3(JGna
zWRCl4Ag!dYzpf7EE0q+?$K!e1YQhR*v$v@0|3BLdf+Jm;1m8-Z#vA7Qo<p}_Usa{z
zgKkfv5hm$hG~gM7=5?=q!C+~E2@Ki?(ptJX$0WqU8c^Sb>Q|%LEX>i^@cq6{Gl1Y5
zG(Rl{U!eWNV-{$f^DETLX>1Qsa32<ZYzZC^YWWiNke(y9+7;WQ32aLf*y`}uqn^O3
OSIFt#r07$44)s4LVGUFO

diff --git target/classes/de/framedev/frameapi/utils/UUIDManager.class target/classes/de/framedev/frameapi/utils/UUIDManager.class
new file mode 100644
index 0000000000000000000000000000000000000000..c5196cb7e91c584dce6300b9f567ec906f9408a1
GIT binary patch
literal 2991
zc$}S9YgZFj6x|a71H%w7h+46hhgJwmd}~EP1*vF2D}u#7hh&H&$%IZO2(|C`%f4UB
zKhUqWOQLPp>JR9T>gv9ChG7z@?J8Mw=H7G9J$v7C&OO7QfBp6cfW!DfLpLs}NNI@R
zVgtG`u3|#NC0rKbnR;B&P>V^ia#h0=rp4%*5YK9u!Sx0_hv)0@f`%9Il7^RIsF>Bz
zinN$yRG1p(#H1EkA#T*e5-T?wF^`-Oc`>y$dMpUBAjB&w92G?cwWX4k;kzYu(^xc;
zCD+O&Q&!O(P|z@GWo^SPIi`ZHs^ycR`P9_d$iN^sMCYs=ZDZb=RY;C<PJK;!F00@`
zs^Dakv!(fY%T1;W_MDY1IfiQ$?4;NyjfcZ(;Zd-wBqz}n)Sa|!%N<nE+EcyQJI#&5
zg$$`Qr!3o?DCK8O=c+L)$i-8Iw2_-O981i7Wz@Z4F$O)UjG3HsjJ%mK7rlY8U`fwK
z>3ZC-jjZVqKAtsglQhjMhMg(o#UhnGz3YjpMPtz%76GW~5zG|gwFMCxyL4_TZ7%r7
zZJKnA^!&K7AbBy*+@32K8M)oxlr!vXa&40eSAmvxOmZ2O;a9V!J0-)W7FS0xK|&B3
zvpu7FVZ`}lHETcjT7XbgQBtsLozaFBpiLG^PTD8Z5(-(rFxJtJ<ILFF#xss%EDLWs
zc44;yJzO~|7Ioahl8$A(%5s#I+P|F72|u@W^q^P8YdT)X8#)r`)3F!(RJ^I<EgV(x
zwvKo3u7Yh|iaG?Fj$1~t!wXiXQ^k8a-p2<jKGg9MK3-*3nHC+N;JA)Y#rn~Itl%+w
z(a2euiuw&)Fh@E*!yO%;;|{N!47`pn@TH2cbbO6(bbKqsclch%F#&g4h*Kh3PyV->
zWVqML<I?O+GwrUPr?O%c>|E1MlybSt1<Q6#Cv31GWZtms<T!<bMpn<5U33jQEqViM
z<Iy`rX>-en;TofbTt>28EvU6N(cM$23Dx_g>sWSH-t6R~yU2`@&sAhW!6tcyDs^Y7
zuzLTcIjwU`zOl*+!0LBG%^;MH$>pMJ=Gg!WB{zKeFY{0?k7gSAfl%><)V#wBVwNN2
zwx0hLkaca9?M`$9#-%z2bk@A!fwK)=bqtZ+sE8i>t+~W&T9jSvI@9T0q6zcXTGJ8t
zSagaFXs&NCu}Td)61lsqm15ONy;>d+pfyH@OlsKG6ztgmW`kYR=;YU~o1fw+ANCmV
zMsXCu9zN_Ka?Iud@yGr_*+83qBq{fEcAMYS2;YYi51=G|M`Y#!YE}^Cuy*Dl>dH{#
z^$*an0xgla5A7iuSD+{QR?u`$IzK?U9d(p#B+<-Y3n^_P)D|4XRzBcJLhyH35;-KP
z@MD1^IO-F*KpSBdd&n>BFKCXpl(DJr=Kv#y8i^D|J9O*_`HlI0qtJZ6QPE|5zj@#9
zX0q4C3Cf87g!)up8Jq9X256**R(d}mJ=RioQn!oRE}o{FYr6xqX8L{#C*;1(KJEY?
z6_E)QC!<_G6+oBPL$~?RTkpvg588Wgsi4qH-Ck-FgzTfuzA6fX|3G0#P&ge>SmIj%
zwR`Z}?xNKjJ$5Y|1PyVfZ#4*BI`>n1koqHBIYi{c)E^62YzYOTy^_V03<R4{klUop
zHBd|JrnQvTN#zOYQ}+yfPYTWk6*}lgv97A<G^riro}o}N)CEOW7ZllW;Oj@8P*@F#
zTGr#+%V-z1ejm}kU$G;CyNLOd$0NAr*$71$I}>F*!KZ^yry${lstfg$XVFBE?HFOD
zjFQaLJo$MZY>f0SgvbpA<c5551JaWs?(GQ9akyXpTOE<n&;pXxF&huXO!J+N$}6A{
O-0J}6IUbXv3x5MUR+G#C

diff --git target/classes/de/framedev/frameapi/utils/Config.class target/classes/de/framedev/frameapi/utils/Config.class
new file mode 100644
index 0000000000000000000000000000000000000000..e8f070629531041f22c84e03fa6aabf4831e94f6
GIT binary patch
literal 2805
zc$}qHTXz#x6#h;dI&E@#q0klzRBqC=rHp`}5=5ndl%}m(q!tuCO-|FHlbM)IYO5&T
z5Ebz*TK|B{M_z)JwOqcqmb!fP(HEcm3+h_v-jfS$C@E;Vy3d?F-@bkOT;}KN-+l++
zUd#ot4F`gF2oJM(B#49P3*rzC^V5+K9>vih`f-eP0}P287&I^xgv{Fw^V4Isc$~*4
zSd0V_!f_T)8aNR|3j<p)${wEzVGJijIEANKJY(QAzw_14GT=F$Di-4gVg}+tXiOML
z7?>2O*>5?PcR-*z+;u`A(C5arKx5Q$^iVcAuG7cWxJ{bos2fxE36-{ZUQh<SNh>3;
zB^uY}L|P?vTu<j8RLU~5o@HmuKG&JB5)px*?W%ZwCLpt^xbk#yTAlII9OI0dR;I0-
zggN4+Er-oQu}PZi%%I}L#7P2s$&|p(sGClh<JqYx%QIuXpKMxrmg|@kmaWY(m9+a7
zs>zoi4=oFV9G;2kRN-Cyh^JyxgDU0MMl>6+44k37N8D^WrjJ-$aVYO{2m6rdMA*QT
zgpH(x1J^)G;(4SEWF$OfC8qI$ff-iL8hBCSC7fkJZ(c^2Xz+8fTr=;zt-St&S<8;=
zw8SeoC-Ev?qYMhg?wC#5ta@GI4ZO*@oR@eD7X-{ZBu3(GwtWZh8n`I&9xhSo67S=J
z#0U6Lps749iI4EH#3%Sv;xk;9_#Ed2RuzlsA1)Cqu=keP^gGkaw&II&DH#&=5??S!
zo0eT%i!vM@KcizFEhb;ZFtgv&<lRjdQ(WA8fsQ33B$efugCvOag!cNKjHjF!b!l_B
zYv~1FvY_QuM<&JWc9TKno^boi7wa-@yvansaQ%X4NAA1xh{Ji?NTrTdw4|L9b5pZN
zHEmR)IubtlKXPEk59tY&wLNm&U8$UM-nQKyl1`A@_Ie|)-a9g&4bGI@C}dYfQf?7*
zWkyZwf{)^os%L(br;fO`&vp~lvhXY+vl^93X(vuOhoj}&Bhq!#QCm1_B4zl(Ia~=}
z>$!QA!0PbLKti-E<&kci8a-oWm>0Ty=wJ`<4MEG8Y8%kAq;6)qZtUX`?eRgqNI~JP
z()Ml*FN7DjJ=qwODl?>K2pw?zVR51bQpguI#G?(IDa*OY8s9z%4!Ug_j!GV@GYs!s
z0=|TMzJR&ebOEOb<M~(8@wAF*Y{K32UBSO<2)=kocG1kFQP8-e`zpj0dZ<D-$r@i7
zL=Q=s2VgsTX{^JJlJRLm^Kb7rsLG)_hd>~Q6{E#j%{&asD2Lk7g@C&JEXdJ>AFY+V
zbDRd$Q=$!&R3rAFiDH?>SmGxH=nta)8bV{&Ajhtv-uKgxLt}GO4l8qLzKT^jte(T~
z)sbsxAxLYq=T_Jp+VWXZN^9n^R$y@ZJlX~3kf4Wk0^ei(P!GM`&^wQgDtw7(PjB9&
zH;21&*cgaZ@V=>1<gfm@+&+i@ZjRc4?i{vW;Rc9+FtE8WZlV4%rN_`rvW2?dO5JWF
zBG+I5Yw0Va9cQr)7qK3fumNAA13zFRek9_5A?rV|RRqvQo;pP>U7wP?@gnFZ@*Rxg
z9_*wDo%jvAu-jihztTtR9tc7Quow4{?tc1jN6mGdA~z2h*!MTAzfkojA_omb0@Tp`
I{z7~3U+%L12LJ#7

diff --git bin/src/main/java/de/framedev/frameapi/listeners/LeaveListener.class bin/src/main/java/de/framedev/frameapi/listeners/LeaveListener.class
new file mode 100644
index 0000000000000000000000000000000000000000..3b04f6c12bcae5c8b1b81f62c0f3b899cd8d79a9
GIT binary patch
literal 6627
zc%1E7+in{-5FJ{Mb%|p;PSRW2hH;xz?nUbDDGmxafr|)PH%jCN$Ro8&$+UOLEy)$^
zFDuXj?R$Tr-_h5i!(B@j5~=d4FzO&HU@s&O&&-gV;c)fG-@p6@0N=tlWmq6^&uG6H
zF(I1=Y`~fUZ}v2cc)$nQ3yVcF6vlGNwP|{s4Y+qwEW;v!wX|EvWWV{Od%%55poD!0
zT=KTttt|qJj-0@fw~J3Km;5LoaLs$jV&)60^pFnQmhKBF>~{#NZ$8Ja4^_a+uu5R{
zRLYLlN>|`2xpMHM)ZD0Wzys>5C>9~JLP;8H)eU)M?$KIxZ=chE`ytZ^LV<^@&*?_M
z8$&A_Ln|92D>rDMxS>*68ZqndQ;Q`0C`RMPNpRpA&bEfrtucc#(?mqE(iRn>K9i2W
z%jwXB*A$T&Z+;3dDo*KsqnjKa3R@uOMz*3j6zHtfBr(_MY|>br_~^VebNc!w6^14<
z;5{MHNqX3V?<@)JIJ!Z16XRBuLs2H3S7pRwpjvep5hmzDt)h(D<Cxc~7+?M~!Ud)I
zAhqf%5o`ugUi{90OZ$k)Ae;$phwPZ^$HG5MJI!lR-iC3~C%s;Xvzlo#1N%U!kh966
zI=I7RB&H>uF-jkw+a%_Mw9FpEt!3v3CvdXzmRTO1VFq4wo_Z4*o^gXt)8Vri9!&Sv
zsk7LzTFCzYMcmdrcH8h-$0#p;`j}$<&XLdKG&}frk{r<K@^U-w(?r-e(Q)&ywZf+h
zpFT&Q&bvit1N$tI(ygKSXCbfLc9`_%Ph9eQY7JK4+A>^*>jZApz0=cJwo10#X>HZR
zDDp!Rb-7MGiom+3d=@@uTDbB_<)YmehQNJq{)4AGDJto*9Rk<u-b=|(s?1HC6DuN)
z_6Z|U@V2uqJs+a*6>mI5Z&lz!Qu^}@r^zBCD>AYodSBS+JyjlovXW^C84DPrqzeN^
z1vbdyU*{14iqx)1?TX-V0fIx3+D+ynQ0u5f`}}*6<!s}bR{CulQ@)mTAL!Cb`$%xj
zw7-8`hEE8Tw%e^TY!bNoilJrrj6mhI^aUn=PVq7{F<X2oK`O&nqsmdtB(S_IjKRga
zhpHO54JZ%*F9Mff3EwcXLnVDyp?1=88J6*WCH<4bl>utM!pe*FwVz@AcPuTy4ZJU<
zEd<`e`*MbYx8a?%?p=5fQ8!Oe@8fgGwlHG*U;^8%iEOuk&Sbkif$i}Gwi0}lqCSQ@
X;C^4@wT5GG7wYgSd=3rx5=#F7KR2)>

diff --git target/classes/de/framedev/frameapi/mongodb/BackendManager.class target/classes/de/framedev/frameapi/mongodb/BackendManager.class
new file mode 100644
index 0000000000000000000000000000000000000000..d4913b617b6c461d9284a7674559e73505cd4242
GIT binary patch
literal 7237
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

diff --git bin/src/main/java/de/framedev/frameapi/listeners/CommandBlocker.class bin/src/main/java/de/framedev/frameapi/listeners/CommandBlocker.class
new file mode 100644
index 0000000000000000000000000000000000000000..2fb32998121a3f1a4928e7b27411938dee91eb28
GIT binary patch
literal 1905
zc%0o;&2AGh5FR(7n=GL%EiFIg$1NbGm)#2|3P^1!YNah8`Xh04cHP9yuD!Co5qTV*
z0tqCz^Ef;JV%AA$D}qv~7eo%5S^JyM-^_SszyJLF6#$;VV-KbXtQ#GN851%*VLcWm
zJUrGc;|cE#43>*96~=POwF$RWmNA)ZrYi1o?Ln2mobyYWY=>`JCp@+Urt`FD3yDUw
zhs^6}JQGsb7X<3f!P43hf$Ek@xCd7W%${;=Yprw*u93>eL#eq@X^$r~R#`4mW`&Y8
z*Q%BB%si!j{h-5X!sC=_1m!I5vNory2@gg=1fw8=-$AU>L~%o<vNU5h?of*){6mh?
z&yrwXf-)~bsV$g5IZz_9TxpAfXv}2E-{N!>!a0P}?Vwe3yTbn4NEdoxMS3}4G|bbO
zO==Zo)b?}k*UO7B0kWIrsfbayDe{s}Nn>>pTczpX@-^3}Ftm^fKNgZF0o^N%EvxI?
z(moZkr@EXnJfw4;;X(o~0NMO|YPWk_+8u15bYe2zrmWBPu;2E%Oq}lor!vtKAp2Ge
z*`5H}(3<rpllkDoYy&))Be2+vPMdgeh->oM2<z~=$XZ+<Fzj0b^O1^Kdc?FS--nA;
z+YyGq^XL-e2<J>gNhEwJ%z$;d8I8}QleYY>kXB@TSN4Pv=&(`7>V^zTnTgI;YrO_{
z2>iIfNczueOu*k)g^u|vQD$`Ee9GN$#NzMDvXNX}?2h1?>A2JP-~oZ!sQEou!7`Wq
z<H17$OXGvb67C6OQ2qg)ZeRrnRPb|!*9NY@G+I+=dr-q?-F?O?xB}pR0ssAc;}gt$
zbC~P+oJP#R6QJR29~R(-TU&%BMBN;sZsGr*Y`4d--5bMJfn|rfi@W9Tk=v`neW0)k
Fm0$Y;Q;`4w

diff --git bin/src/main/java/de/framedev/frameapi/listeners/PlayerKillPlayer.class bin/src/main/java/de/framedev/frameapi/listeners/PlayerKillPlayer.class
new file mode 100644
index 0000000000000000000000000000000000000000..fdc77799c06eec5892a10fb2502d835eb378def8
GIT binary patch
literal 2828
zc%1E4+invv5FICJH(5ek0^wFJZUL!%*}U*Xxrj?qBT`z?P>Dxp*Gb&$+AFU&B45I%
zAb|w$d=z5VX=ob?jc8RN(L6Yl@$vB)XU5}i-#>i;fctRIfgFKHiS}y|6SB6$`m7f4
zT3fS-2fRNtSS)IxNDP-;C$-Ix4Y+<K!f<FgP#`d8SB6Y>Y8$N`?i&KrahP_5M5D2e
z+$(526jGSS1WHRo*YY-j!gCdH2hI_g-Q!r*TInL3CsQBZO3f1$_IW^k6~!WCMkq;R
zty&?Ek_Xf+HM^V!+z**XP|W-u>u|alaBmcbHwwf18O9<F6i=vBhDOZzU22eozmHM+
zeiA$xFFP48)8-vPIaDH|SZRZTsLy1^-{N!>!U2TR9j}%4dcvF`$B>QPGd*OI8buj3
zgP6OedK8DkM~)<oGq940(W!5gro${;TBahQsSJ2qNFI1}JxxsZH``_5fC|}HJx&>J
z(mlxFma-H*Lcj!&XTOhf(-z3_w^;3SY1Wtw!Xr;?Sh6oTGhMst?>7I##BhU&RGb=U
zf+O5$w?oX3iRkLm@XiULPFUKhMe4fX!fY8Fm?KbKYV2LzTSg1nu~++S12=k|MlG(J
z3~y@!m4@<JxXrZ4e(yR9rYjNxPa4N+L)c#`N{)N2xbdX7;^yC^(uj!HWnUx$g*?q-
zw9N&@%ry2F)k+brliVb&=&Tg~kp%sZN|AuOrBdzlmm({t>Ua&<w+s5~GHY+PfXtfU
znrXi~aNst9;;7#`uz>ZLNq685zUszvlt6i1BncLH6ICU!00i>*k|dCWDVRnphqePn
z9830vnMV(R`x)GKmGVcJ`D!s2aGXX=wz7g_+1f5#giF>}h0BP#vWvQk-@me5JA|!z
Y2wNWJE$Rl`gzR(I&K2MmP*{Zg4<EdjQUCw|

diff --git bin/src/main/java/de/framedev/frameapi/listeners/money/MoneySigns.class bin/src/main/java/de/framedev/frameapi/listeners/money/MoneySigns.class
new file mode 100644
index 0000000000000000000000000000000000000000..976fa6beb4f59cbe78ee356da82a7868eba62280
GIT binary patch
literal 8300
zc%1E7TaOzx6h7W;Hy6UDq%AEJsCT(#xlFi}Td!(Yt-5HIR%EHfqch`8+|1a6$BBse
z3;Y9q1dm7{!Bb!O5r}vG1LDkNvuTUd%<iUD0*REFiT(NWx%eFWWPbnq=U)NfJY3Dg
z5`oLH_Ua)MvVM>CSl#FKUCl!7^WNZrMWP;v*l@{pTo0Ax{rYxtZHShP^RP_dcsep*
zvQ@v`yvIF5AjdsLAn&Hgiv(7ppxY7>AKY!6D`~kTq%c<q6l;T~jk^SvH<i!x@GODK
zi1UWlN*AC)DyP4an#U^Wai4lBj6}eUP?APkH3J^T7ig)t)8^FYUcfYhBIb2ii_>+V
zJ43acp<2$qT289gI`tKgsZ@rB%y?~TkcxjBp+XN*p}m~MUQQyRlZkjBl?WrH4GKp+
zCX-p3oDS7FAVTSu)9iLS!Yq*gd8E6ynk=2vD9WhmN4!)_Lv0!uT-y^MTVWIk55<kU
zQ6iU;vC&=6C`|_mpteCpOuN$OyFzl`q1)ZqB(anZ3;I;Zp6YPQaFX`J44DMT0J%Qi
zpm)+-G-3RW9+&18lYTJK@<}G#Y-6h8>7YqyqlIi8PQk-;96*sf0qb+UB@NfiGg*|m
z=A{XE9H_^%V3?Xwif_6i3X!l8sPUwS$0t6>;HD`+j^w^fqsM}>1@P_N-2kI*;LQ15
zj88MFGLFW$5G*)63^OOjR?DjT<NFqto~ET2NpwsSJ(_E0ECoN|Xf-@+7%U1Vot37H
zo7c6Q!LR>^<$VBWWQUfZ49}IJ2vq{7YVN3X9%!7F))g1e1YdN+Cf7TOIS5o;<+0%I
zo_Y2fmrYy51g^SA`da|&`>K*2p7uM*@9PYu@sRyw&3$CENo70xWmg&z@-5jDu|PSl
zCCa9?J<77`K4^)H1$c?TUm5-hn9&{Zz#V7-B{vgW?%VN9&9#Io+OhzYEd4lL<IMAh
zHe*}TqAIX2@KU@VfCYG!kniU=yl3NZGR?y;=AV%PZ)%P%dV`Q?;i9KogQVNQFbfad
zutApoSmgQ{I^8XbmnrWVxHXIxeF5GfWPT1ei;5?KVA>jO?hPIU1*j8nAMeG3Iq{*)
zm`s7IrlGpp<2OZ8(^N)<N&3<bi=-`?ymCnE7jsMCK<%~rdH9GxVfeZw51(K;lo%%u
zpAk5glH>tPn-i8rlZVSV(IdMUf%3M9V|2j|${E8N5Xb?*5|rQ=tl(1>@=(Bg5qpZ*
zO5mCF-E0mq0Ht4`{B?EpCpi9FI_d;oR}cgEJ&D(H`dorj@O;{K8qOf<g+0`Zc>g!s
zSqs~mmF;DCWg^=-3!7tQTgxEZx`pj?E8A-s*j~4=`Bt_!GiX|~uzhD`dn*Im+ZMJT
wtZeUQ(A2T8-M6y6mq9ig+n*M;9K4^RK7bD)`CP&8D&o(>$M7j!fJ>132k6>%ZU6uP

diff --git bin/src/main/java/de/framedev/frameapi/listeners/money/MoneyBankSigns.class bin/src/main/java/de/framedev/frameapi/listeners/money/MoneyBankSigns.class
new file mode 100644
index 0000000000000000000000000000000000000000..f055f58ee5dc56b49001b8785ff5da057f8e4d06
GIT binary patch
literal 8056
zc%1E7ZEqVz5T1?GoNbI#+!hK2x(x-KQqH_n8ibTsMUCXps!l8MaecS3x4zpw_Vz3+
z@e}wfd`1EZzW2xQ6A*LjIBCm;oD(Cb(pkC}@6A5@%-lS4H@YW(|Mmv}d<Gj1ED_j@
zwbu%nkgdmT#9BUY?P(TrpN}RdEE26i#D+_*<5s97AGdbW{T7qMuIS6yfn@^c?d*Wb
ze(PTEG4~9C6897Vr(>-*2&_aw(iaj>Iy<;tI`XxU!hA!Z(wq#fKO(T)Rz7#&Wdf^*
zn0K^Rx(utN{^X(5JXXPo`_xlmBm!oHk~Gq)7w|B?O{<mN0jECq0;bU@V&0JTIbHL)
zJ9W*Sy5=6Z=33X*sIPcTr7|>R#v4$BQ2fUT9eNrHW9FtYb5n+HF5n3(5k^WIBu70a
z(^Yz$PTiT&Lg~KSONK*X3d=KP+1bDI85gNhlu<K|c(r0>F%KKe!(&Xg!zd6Q(v6cS
z<)vh7bmAGM=|rr}bt+<-NT2Ts$$gjZB(X{J-cAd~RLGGUa>{U#!Ltat2;?x?Iy#{D
zZQVF#{+$t*<}Q<daBSq$s?{D~S>bll$+-W=g&C;a57?ONZE3h>p2<UJ)3fF7D5DY6
zf?**<7C$5+3K6gysG~toZl6XmN1#t{a`X+zp^kfddjY2OB+h4lp*f_~Y}ws4TFCxM
z`R1CPW_Lf6b|J2Xi|h1vaN*jR*MszbX8D3?zEEwU+C{5&CI*Z5Xx0l=sKF~Ws6d0j
zrDo@_+nwBA+YPUFknnd&*yDOPO)>(Fj`CRWXg}%p2bax2#01)%Q+M;&mN%62@WtQ$
z-(twf!xb(zJI_@a%kRpAL>dwDZ8;LLKrWl9o3<rKKK0Ji!rv&vn*@Hz(ZHXbmwEI-
z$#xozgGgL%b~0)dMxzXrEG6@Guc(GagODpttMP#l%J2>$Hy0_h7p<$n@F_VJSsC6V
zrCK55;-#i&MGhW<ht;LagP;uS1pYen6=u#gqJCH-CPBDKO1FwSQPhc|`8m-ex2qEE
z@oz=iz+8B?3$Y*8uq)b@>8A$Uu$a37MWMaH*ny7;l&7Cr9QYLbpL7`qJ|}R_0y*#{
zVrHnxfv>Qsdal+GsO^Y2#;n>!_hYyQ1WEv~1XVZ(D|prb2g-PK@Ja<o3A|*#p_b4F
zp!z%1zHiijh4X*fSr>4>f;NELMcmiyc@-|ft9I-)xQte>?_0fr$A6<;$w0fBiS`z}
zeJtA5473}WXxDOZTgyOeXQExt!R_4)w1=5!@8{sw%s~4o6YWM0ZXaZz{hWbTf)A~g
W3oS^0w{feZ{YUT#B7On4p!5$h%S=T8

diff --git bin/src/main/java/de/framedev/frameapi/listeners/energy/CapacitorListener.class bin/src/main/java/de/framedev/frameapi/listeners/energy/CapacitorListener.class
new file mode 100644
index 0000000000000000000000000000000000000000..87cf2ad173e654039809f0b27f37712e8a371f1d
GIT binary patch
literal 8764
zc%1E7TXWk)6h3RGk>jLIn)C*xpay6YE;g5Pt3x44lg6MlX)Z0{zLD0>HuB1|T4l%|
z;1BQ@;F(8e=nOpZ!tk4bqjelR?IxB7K{M2ysjSPlpUydZ_M9)P-~asi7XY{hUt5qN
zFc(U<SfgAN@6#Px^jNVXX^nYor*T5-yy){#F~MY5jE~jb;w-IGm#aWJdrvIrBQT;F
zd@8ENrOo@yRRk;<3B_xSz@RfNCEbk&ln4y0@~WUJlKA9O>&cWe6K!vEwGs(IH+@#R
zf!KWAr@Kr>5%&m;wS(8!%QrQoufly~>UZYx7q7E!r5a=7%h^Cwcr}t#@j&3S{wXfF
zx`CjH$-6joHt?7QV+4j<=FdqP$Q+y{Bj2wJ$-=<jVV>;<wL14Tk6o7m+E)v&+xdaD
zEoOVn^{GS<24<U9nLX~YLNk(uW+V&ykt{SKIc|Fa3vCf7yGE6}Wh>-j-_$X9?OZrV
zg?Nq%v5AFb%niGEtsY2)=GiV4@oP4j-E`<!BD9A*ND~$*?xzL}WVNuVleCBIA$v$f
zmTPsNV>__JsLmvoNf9a;x!4};Mjx1%w0USp!ebRKu&!0`37*r)SMBJ6y%>dYjfhb;
z6>%YK5VwKy1I?aeu*Ft^O>MPXXZe9ST?U)rvQSJ`sB5Y}?W6X)O9$M+K9v$_Qe52k
zQlg4GWIB)oeKuwM2Cey>@QDna+hIa2P~rI<^JiJB4xKmDReE5jn7c>1vO^`0lO;c}
zNRgCNQ?Gd#S{Ct(1G&3M1xkTVMt2KWtTq#I-%AnMg>$P)a#2mRjyr&sDit4#Mq|#7
zx6@su;QnmRVj0{{l7h!3vl7ijS4H$+$%9pe5<9(^rtkH#A60p$^0-Kikbgcpi8p?b
zW&~58<rI76|DGyQK<@?8_x{TlCIWS<D7vV^X{)!Sxa210VHC~}!7yAPaCX9J?PD|=
zY$@L77<O>Q+>UCSOs>UCjlifAxYWP9xAgXI_Ngr%61e50vMp31FjQqq-=}z=z=a9N
zAgr{77grj4Mc8S0$kCeV*kwJLXwfOBJszbTjFZd{2{vbXitjjypC?iA5jYu$hJw?M
z=|y0WcDM*~aD`<4NH?o{BC;nUAD@UMkd=|ZX49<uB}Xepo$N1>%vgeC@9EGdi;BP?
z=FF0qVbl#o4qhcNe{`B8%@Sme>K<l+7O^@j^;xNzoN-pZPCz8c$`o}lfqqm;C_K=<
z{dF=~CXm;0SPguN(#Z<x4x6o1bMOv<JDmg4r6k68Z^mnAT?dH3nTf_qMRQ!%YEUTY
zeoMDOJtlpP(lij-!x_owcFSRX*>d;;0#4^(C-)a;bv1~j%jWer%X5#2X8n;5g?w4W
z+ur)7THvTjrMtCj!A$}!7cH14a6+4H!2+uMhdi+0qvp-lJX+wOo<7(?EVxbJ{2_bh
z7A)gm2C=;stPnW;NM>2EMqtdKG%P@2pKE<3{sdFKk>3`4ibD*N+k(&WWpOpJ;7fFF
zZ>bI~@-Rg0xP~zd;WA)j0f0XIJpuiAwD2keIXoL^yUycr5QZTBcM?wND+~yX;PJHn
z3ZBI?fcyg(-55Rd6P){1k9!J_{rU-kr|~${K*2?LM&G*x&m!u%J(P{VO}5NF+hqgW
zRU_N;@Iptn7Y%Ih8QHGFM4NZneTGQ`12;0fd<erU28Qp93<W3}8D29m{AgeRcmv*S
zW5^t7!(T=lt|j+^WQ`1O9g-(+8yIXO!@D>~oo4pBf$fTsZ3^D+$acfP_N{>}3m<CK
mG|cFDe}(^TTp6=42e+UMAHyOn!5vtIb+`u`@ELpo*}nnaUF;+P

diff --git target/classes/de/framedev/frameapi/mysql/SQL.class target/classes/de/framedev/frameapi/mysql/SQL.class
new file mode 100644
index 0000000000000000000000000000000000000000..e2ee9d36059937e84568078c8895647ccc80bd00
GIT binary patch
literal 7871
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
K(6{j`<op-*WhdeQ

diff --git target/classes/de/framedev/frameapi/cmds/FlyCMD.class target/classes/de/framedev/frameapi/cmds/FlyCMD.class
new file mode 100644
index 0000000000000000000000000000000000000000..500eb14924a98de21a021265671c7eb4122e138b
GIT binary patch
literal 2387
zc$|e+OH(6N6#i}=bP}3Z^9;j40F^)nqB9OUWCk6=AftqbAPVDSI!Ti>bh<O$9T-+t
zxzvT*!PU5;tYV{<jM1toW#PgfV7YYZ*6q}k<+&XquLLTUdrzPDJ>NOE`}co;dJ5oG
zYzNSTm>=D^>BFr6#_>h~Z{l_U6Nm>ei8}(Oe0ZxCK1}oFE??f}%R4^I@IB$fYyfkZ
z_hF$H?_yfOVgN0O`LM+I_qbBrhh_foKGz_N4}4e=uqxo5fDajJ@>(II>I|Wov=Uu2
z<(!gMHcNz@SED&u)uRboVx)Uh)m3|(p+9_)^58OqCvKz_hK3ncS7r;jq+%|~NsTzt
zjFFPHW!Y5u^C8n?XH|=#ud?S<E^S4pwC#9ek`nP7dfdq6WIfHW7M?N8Of*^8*ih|g
zs>F^SiWe0<t(dWMG-5OB@}?ZsWIYpIv`tmd#O|GC4X!$slD8F;q4T&qMYmOZJ38;k
zc#Uk?%qTVymJ^$w=)(LMgjD%FUFRjs;ML@$qVXD@Ns?+vv8jg56;8lVw`j|$jf9+c
z3Qo<%5Lh${W=fe-IRLe#@{Vv*5&if`L@)Xn+-uslfR9Cdg8KqUltfBET7-f%0T~fl
zs0<y|YQi9vQ5+#pBG#db*nlP?2VH~#YQFY^U3tYQgi^8|(v48gFqIIc(<>s62Xvql
z;w?ucz!YJDDlHxNKVsNf#S~B=r>BcBQBXAp68FJwQp6^<7+ON)JANkYL##109?42E
z37v!8)DksnsC2lHI$-H`XinFt$4MNzsCmihQC4%wbtOdy=&O$Sorg-QU>iK=FrTUJ
z^XHBrrRMv8Hb%o0TDekx%{!OCQI~}-(xG;-6#FQ<f%B%YtmfPboz?Yd3@H0qIuzj&
z9<0>Fji-6UQXUj!&AOY>3BI^&k#TFKbJGadWo2t#F>|VAsRk9Rp2FSMG-GQ@Q!`oH
zDKe?mTc_Bb@G4K;Pke&WiCW9YJE2&XoT(O&ESioTcEZ`n3k5BY#>hngoxWZw0dwLm
zp^Hb(=M`Se;fl_y3<df2*+z*)bKgxbCyGXYiQfYB#&Qwej~8ftk)D?5*+qNH&=ats
z$PaKuB=<f%L;LW4>uA43s{{|N^|Us?k47}32?NAwE7>B9LBOGS3`V~pL`o4{J#eE2
zV7*uNQNw);JFG3}dHNOZM}CEGhxsGFz&GX%dL@4m0T*^K8T1xWOK?3#chKuDLUh5|
z>-a9!7t!E?XD{gW9Ev<;QRAU#7vEC|vfm4O+*f}@)0j6RNkues_m6_!-|)p@j2%o=
z4H5YnEh|sZDz)vSo$Gfn5G4g^*+*v)m(ES2nt9g=^N4iWq1<~^K(|xw&j>J}6(SW_
zLOX)!AQ*#G(oT%x5`AKHVG5V&i=i6}q`N|8m#OgU1gu6L3<779K>3tl`JABmk}P*{
z1z%$r-(UpaA&NinGXBI>{Do`yn?7Uy!FAS(QPz$dtOvIoc&8yy+yq$;!%N;ClP#wR
z%rfLeMadI$s8`6J%b~83N4G;=r;I&#&1sgJ=U5Q%`ZIL8o+C@t_%n*YaKmY|vHt*<
Cg<b3b

diff --git bin/src/main/java/de/framedev/frameapi/listeners/money/GetMoneyInTime.class bin/src/main/java/de/framedev/frameapi/listeners/money/GetMoneyInTime.class
new file mode 100644
index 0000000000000000000000000000000000000000..732c5812ef804bf10222f72439f546c0f7251b70
GIT binary patch
literal 3979
zc%1E5TW`}a6h2<d+J>@?jWO<+!9(|wyzs(BNMjmMsof^lP2$l_+}3MiM~+jie+(p$
z;GG}DBjP08rIS)tHV_-EQlpdO<Ig^ykH6SozkmD;0FU8O0VW76N7{7)CZw~&dd%^-
z)6y*99`6kd77E7~k>Qf-$O)9>edjed^~9*kh6s28@&snm-aeCUXT7<@T|;0p^y9XW
zXw>S6{|t@iLJISOK&ditEo~FXuP6^OE)$qO#8}l@=^|Vqh4))h^GNwU?on3-q41dz
zO43lPrq6@uDYZ(C4yPV>eWo!eWNw$WIbHO)y`PG`pNf5uik+siNIk_PDwUxDGj4|(
zgyOp)CNK<z9N7s+b}~bIEa1VcL=Y-%aB|dTG8v`G>3%wYAwuc4-Hf|kVa|2rijtAh
zv1^o$G6JYklu^?Uxm8Na?3j>h5c<N!p`tkC8jI`zoDNF4vP4BhW9jjhkleFrJ&sIL
zC22RmPlfEME~g9!=^RBEYXWB}<YmhG+gM75+iR@g%q2RvIgNq0-fH<+2pc}@C#!uD
zIIFb0QO)#k8ZBh|7}Q_xY?ZjHvOuxO#X$cUZ3*sU<XY_e8%jvS_3Ez6!&Gj6KA-Wy
zNAfYU;Ww~-D(e1e-iN_XF#c!(u)u=pG8ABjz<i~4_+=kZm45lBYq+j!anR(tk?c$Y
zvo+;1f17EMyze>lrXwN(E45RfRPYEg)!y@n)I%UwS=uhb4FccBIB1+r$vTw`<MJRS
zM>bi?PZ4gDJe*rjE@b>d#{VDQ|Co#uur^h!UH(cWQapE5Pt)rV3P@EZN8VI=%^Sfr
z({86<07{@dd{i&MBC2_k0yfk|6d~CSoInH*0EHMYr35D65=^3%L%RS)e3sJ7Y7Scf
ztWRLQn=OBUsW1380ax)ki7`pfS$vjL+k!c`mip%5`Vay+Kv>8?Sja@UIRfEU2EvmJ
XgdE&Sqwc~zNPZ9TUqtVH%sKZ1>&X~x

diff --git bin/src/main/java/de/framedev/frameapi/interfaces/EnergyInterfaceWithEnergyEinheiten.class bin/src/main/java/de/framedev/frameapi/interfaces/EnergyInterfaceWithEnergyEinheiten.class
new file mode 100644
index 0000000000000000000000000000000000000000..18f4a742e5b80eb33aacf5b325e0d578e8a47383
GIT binary patch
literal 963
zc$~FUO>fgc5S>j+oS2l9K>0qbDkK62`@)G<Tu_iI8Ct2Kh~s8GakjB{t@S1%e~K#-
zNO0#zA;wOukWwipEP2=S^!)bC$Nu{L?FRt7geM*}7@QSWhM7=0ycBa0#u$#R$S}tF
z@<Ze*RNA2(3yDQI&}fszNez5dZnA_1N>5NZ)E?|I*ssJ=p_A}*bcxb2XdTN`Y2{us
z*y%sNV6gkf#OOhrL3hm_SZizxZZh`egSJ?hbdE8XCd*YSoHCl{){IijidWok4=2cD
zl&P>p%7vVY1o>f%L7hWT=Mb!OIOMUxf@|Y=CY+pbM=JO^CzpS#P+fwuE<tH7*rvJk
zqO#mrN0zu0x;$WnyiQ_+VQdnNX49#1*D_DXW2zONrDB2h8U}ZU3+@&<`t2*_-@^WH
z%09GUuLHNB%b<C@YV<)rTDSJxS*4Ssvi04FJiMP}BeX+7-DJ><j1=jGu&Rt#U|YoT
z(gcI2{b<Ac(Mfd0U!~l!n3*}&fBENTW+lE=rQEaa!&^1mg9l{spRs<#U~j_$o%T)@
z1tm443KUHSG}=%;J5-Dt(4^R-=*0^4zeDR&&;JUYpA<D<pVpEC^xm$J^6K>9PPN}H
Scft;;^&UK~*bTT35B~sfpd^|A

diff --git target/classes/de/framedev/frameapi/managers/SchedulerManager$2.class target/classes/de/framedev/frameapi/managers/SchedulerManager$2.class
new file mode 100644
index 0000000000000000000000000000000000000000..1c6d320951a490bb6655b5d7396651a192ee4dd8
GIT binary patch
literal 842
zc$}3|O>fgc5PjREapSseFof@qKtolER97t@LZBXqKms|HXsSvaH};Y&adykvuEftO
z5(07H$blb)m|X`Bh)ZPoX=Xh0=I!(T{PpcSfCt!UVi8w-G;p<vYq;(c-0*PI!!3qJ
zF_w9EhhZm9MfA?_sYu0X74Q=oO}XMDVe)8@j73^z!t|@kQ<{Ayl`Qrd_BQ7ozIV(}
z@99)9ti@7^gK|0)=7<k7s)Vslcy`Q<wE3)9w?Y|$S4s)f%Xpp(N_Xd6+}$PJHB&0W
zO)Fw$Q1E2Z=O?o@{y>)|5ig}p+W(Gkzvri%B)?EergN!AeNl{c>Y)?hHo^cNmI5>p
zdbkr{9o+zT5t6y{s$^K#W)uy}$wU@W{^xu2+!YQ>r7F4G^AR(w<^?x@3CO|D{~12!
zAF`<bcJL-9rxHzmwPSnu$kuzBenL`6t;o$qYlT3EE?I-_8*8<!3luHT+k_8>Ws3GG
zw-tZu{%5eQFIYHpJpo~ZdVoEw5MHdhu!<JoBFo0;Ifrn@_1fjY@+Z`O!262&nI)?^
uvJiE`heY~_);}hKCyqF%MrOq4T|e^)E;t=++6)@Kgv(fSd+BIS0e%Aj{>st-

diff --git bin/src/main/java/de/framedev/frameapi/interfaces/Constructors.class bin/src/main/java/de/framedev/frameapi/interfaces/Constructors.class
new file mode 100644
index 0000000000000000000000000000000000000000..525a4e95e3c3bccf7748a594865debde0c7ea388
GIT binary patch
literal 2128
zc%0o<S#J|D5FYo)CTZveZ7CGGl&j^)avyD|R8>W)*g~aV;?dc46Suqe%Ig&J%aA~V
zcYXuE1u^!fO@K-THN5b!JBPoW8QbH}`}O<B&j9cUUO3Q0U_MoW7gH|0J$gXBka@d`
z#w=t9nL-opaiN*or2$L5Whqjv8iAH7b)b*Hu>CBeqUOD+?y*1<$T7iGtw|v7uUKt?
zz)<F6T+|uYOc0o84eoGV&$KPUb&A+t%t@f%Us_*9tMpE)D2%C~HKqs*`a8y6%WQ+*
z=a{qPzv8;X$pT5h@z<naCVg+hOkw^yvl;pl+Dr)y_)ALBrq5H2&cX(-391{45twd|
zRQ&b~H?-oSwy<a-MlvEW-iceqWisi_aJ~{m9Otu$$l1AVOt~yW=D;OfigvserKHNk
zH0k@cB@|0#bihJ4ka5Bzs<{+yqGUB<aXRl73!8Q3hAfDvLQq13eVnX26SDH*j+GC0
ztlZwQ88?(Hb%oS!Om$FqHAZ3Y6WpoJDA)yM(*<QyT=}G!SuH$Hq|#WD8&F{qRGE7?
ziT@U1*QcR*bSyAy<YR_hEnVvBX2Sjo^vmJ+2jAc!J2j&7M0O9_KG59)S~lnc#<0lg
zAxF${0xlz+E(QBjT#L)P6RikSaHRw@a1}YY(xSz&+24uP5ap211$*6yt4wWD<URtU
zz6@xzO%*qG%URrz4HdAL+!!OB*OH|$2j-A@v2`7|jnsZrr~`MghU|Da;9(iZ9vTPk
z<Mq*61P2~szIK;6@EETr+b9k^MQS&j?Z9)qg*w~YfrX#0$83%WTH|So+9obdnj?U9
z;(c6zN$7_hYLnnV-pT?LtsH=om1khk${`rGas)=LJPYSA${6ZBFpl;_hkYKkJo+x6
zyojD#HXA_k6HL7wz5D^(FBW$V-#NqpKG&_sJU8t7CR9+4V>Pq*{T(R7J$QhB5KrJ4
G%>MwD)riah

diff --git bin/src/main/java/de/framedev/frameapi/interfaces/APIConstructors.class bin/src/main/java/de/framedev/frameapi/interfaces/APIConstructors.class
new file mode 100644
index 0000000000000000000000000000000000000000..6af2ce4c9ca86ddd4e1b0c94913bfdef55c0927f
GIT binary patch
literal 1188
zc$~ddOK;Oa5S|TboVtO8&{D#42_O{?_JtEINT>=Dk^@Lhi#Tr9(`1XiYppjC{bfiX
z!JQw47~6@0s!9m)ICys+-#q+z#^1hw`T_ut;eiJ=22XP<!&E38o`|^!V+@b2NHNBF
zC5TLgN;|a2LSi01fAezR=-k<vbjIc$)ERWj$VBK#_<DST(lKbDMmsrW(2NG9w98<l
zvK?yWat7NA$6Mv5gO!7DYpKylp<XmB1hQP9CdeL9anhQ5GEszmMvk3_M-1xwCPoh~
zGia|m8CYv<6RxnDJJc3)lgu&Z(xjP6gi}WI%$jk6Y5s)!>!T_17-b?XfifZAiwW|6
zjKPwOU`a->BBRe^gE`m6@l-fD<&Lu8hm08bISUaS6a)uFbHT52R=ub+GuBZ{Tnb$j
z7$aZ4#Q#E6U*#MZcZLh@PBZ*1(3vm&4`RxB`3o4Dvp+@n(1EQMT!n2~hP}nOZtX;?
z0X=Y5>B(*}!0kwBd^JnQXh(u(l0i2zQY1&hszP5F{R1<z5?`o7**vp}<#c&)i<W{s
z9^9e26>}ckrPAl}>A^kPt6{Zot)a?uYH39M=M4swiT)FH=)oE^Na}$H&GKFczq~h~
zMK^6ET!c$>w@G_cMgjPrq4TcW{Ro?1Nvpv%Iva#3@V(MfJlD(f2HY<qsMbxm4IKJE
E0Df;_(EtDd

diff --git bin/src/main/java/de/framedev/frameapi/interfaces/EnergyListenerInterface.class bin/src/main/java/de/framedev/frameapi/interfaces/EnergyListenerInterface.class
new file mode 100644
index 0000000000000000000000000000000000000000..45c1e125fd1ca89ab8388adb8e3ffec78909b936
GIT binary patch
literal 949
zc$~FUOK%e~5FR&eHrWQ!2FkNgtEa$W_tF!oIDmqLv^=DSB94xCx^=T_ue?q~ei;%-
z<<5^n%sPp}0TeE*wDvqcee;dS{_*qcH2|EzQ2<*EhLx3ZA(W1<#7x8~#uru;nBr_<
zh*HH$JG2)<VigZH+H9Vv${|^=SBU_&8SHt6T<9!*H@-sY7_?4huC#K`88rG&&KYdK
zG%2Cm47zLd&{|_#u*=x>2W_!3`3zGoO;M^`IAt_1tr_Q7RL^+W9$g|&QRc!Ds1$M{
zGUUf8Ml0dbN_eyue#}#Y71ze`LO6NJ9kJl&l2rcALWdF6hY{7{qD`C&EvhJub==r2
z8c!z^<+v2OE;L5IYUckS-{)eE_75rU3>VzZOAOmDaw8`jFdvQ0(+!w^DHcKtZgk)#
zbQv^HmxDj(C+kt4IjeLwsINjdQ5xS)i!s`fpy@K`B}R(;Tv%26%V5J!HKqE=Lck#L
z4S9y$X_*R#UcHBSYp_Drknqe*t;AQVraJt~?e)_R;68&LPaeQS(!XE{;1PwFB|2|Z
zRgwM?HCr_qkUFTp2KBuIP4WZso-U)|H)wt8g<qiaoxCmBqqW8W{rf&rznUK0^80N#
U@Uc67y$g?NZxPcycmRjL0J&8dWdHyG

diff --git target/classes/de/framedev/frameapi/cmds/MoneyBankCMD$2.class target/classes/de/framedev/frameapi/cmds/MoneyBankCMD$2.class
new file mode 100644
index 0000000000000000000000000000000000000000..5521503480b18ddc90208278a6b004b969385bef
GIT binary patch
literal 2126
zc$}41ZBrXn6n-uNHiT_UQ`%Cjb*X6y>C0k^t(Mwa60m4O5h_Zn#hcxmWMTI%-It8~
z5S{TC@YxwjtIqhLAN?Kv3uhe9-9#r8=)@0u?%i|Gb6)Ow+5O}1Uw;QMgRLQ)!+VO{
zP~>I?<Cw|7#QPcC!fi!9$lycVQDioayBU0hduiOy;A1?{Fqgq`%%o9NYe|v$G#1qQ
z$uJ&bF^x~t_$-aGhKhzIhJhw`bK4B#Wk0B!)p%>miA*6QC)zQWUA`lN*^bb646MX3
z7&V+QH_ebQ+rq2`+!MBFwl{p+F)hyy&5AF@&K#Fp#Y&0rgLfV2ME4jLdIlZsPHAe5
zp}*+cg5gBjkzy(Ksv>yIt1fY}W#8iN8V?-x-eLADpBeN;DMe6pc^C?ME%fM1?goXB
z3Svn#uZ$mCjkvW{;oBYcnN>dyEV1CImy_Ml>zlmE$<29bxqj%#dPPJH-`4O*$1*<G
z@eT|fZ{fU-w{bzo1PVG<u&Uv)jxVsL<4de*_)5n*p6GaruNl%Vm-U#}g@$i*Ji`X%
zN63x&B@N%|;HWa3Rc1{kXRby8nVpLr*A@Z8<f~o2?#D)hH-%9ZLK<OgSt1N;v1<gv
z^P9ppUhP(OSg;kLh{lM)Bj4DeC=C^u@xZeDSVlT(sB38GaIi^U*kYqJPo+fSC1oOv
z3=!0Pw;l+`YACe~mz1)mFAZBz>b!mW3`%rO1TvbS>gqK&4DWW8N@z8N9lIhh=Mu(B
zEM+@MmwQvlFyzak?|EF>47GfB9a?R+**RVnlJ0c&4HC2E*Ap@O^dM{M36&5}vXGme
zrp{XKxl5)F7gUd@<l53yzPVoHsJ6ImceWSyh5o2kb17flEqH1rDVIciA@Dur6TuEO
z<Z(xu6(S77brCJfFyhjptX#|=5yF26a(;*)MPJsOI>Su@?7MKqjsqS!zBFspfu?H1
zVmF&KnEw;fw%N`Pl}`SUq#a~2jJ(bxmUtd>H(absKM+M8Qp~3hQ%5y0$hWtJs=8}E
z+3WN)nLVE`z3Dg|`Tu$|nm^R<v7?49r7I+tDpZ;@aE@?&4F-Lx#_9W&8W~Z;44{?f
zS+dfEqmw>*CU6ndt+acH6b5J=EnL|HD_q?}Utwwwslp5N|CC7Qhz^o8Xarp%dM42@
zip$6Y$xi8|FA}Cu=xF^D{R!fS!p~qYF+fWnJ*gH34{)@XNVhPQ&9pF_)mu3BBMR#D
zHymGoffL!07EZP$v)NO$Z(;NoobJOe?sOy1B*@8b<k>FdSQk>ol}h5e0F9_Xmd0le
zb=*dS#<+v$*u?knl6duYB%OG#B)8G`7oOcB9aobZx`ykt_S3JyG$v`6A;h`lZtxGl
CDM>8=

diff --git target/classes/de/framedev/frameapi/listeners/LeaveListener.class target/classes/de/framedev/frameapi/listeners/LeaveListener.class
new file mode 100644
index 0000000000000000000000000000000000000000..563aa56ef9d71a48e1a4d9b0df663189072b79ff
GIT binary patch
literal 5818
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

diff --git bin/src/main/java/de/framedev/frameapi/interfaces/EnergyInterface.class bin/src/main/java/de/framedev/frameapi/interfaces/EnergyInterface.class
new file mode 100644
index 0000000000000000000000000000000000000000..48bdf0b443b18256dd7460c509b05f428c9fdb73
GIT binary patch
literal 1037
zc%03X&2G~`5XWcJ5+`m-O4{=MvGkO3urHiw;ev`3$xx(*N*vd_6L%YX*II9)=E;yi
zf;%t3+aT7CO=yJ#-0)#%XY||I|Bh$Ae*gFx0G`5Q4_XAC7lwx!lPWxCa~28=Cx&Gx
zaK7BIT!vCvG!w?L2#*w+WHD+29;_4Cs!pa%CE;;=j@%OH9P(5uX<ran8}6SHSbwR7
zqq_w9EBeS7Z91?)$hUXOV4>4F3d(hs%amEE70r!~Q_PBI)bEbZkP74}GY-lbpRxq$
zp1`0H95jN1mEb)pG!|58OEYHq8MQ78UgS>YuUT9Xg0cufDK7X^&ZQQa<=R-PO%lYj
z=~P<EnJO=ekv5O{7xH*AaW%uYDO;fV4MDA@jM_zx{|EawkPjW$?7?;D6KEgS9kDx%
zRy}ZHja11&*(3ePUHxX3#c0ON{dNL_NOP8+G9ydB4tALk%QhsiJ&Z0%J{XmWdImE+
z#|G*qXq)}u>Vf@{1Bw-}!9*t2Pj47CoXhK<=$Ya8N|rKqu8cy}IvzYAuzBeQ4<5O<
zFZWK`YgrWT!DCmQqD{cf2b5pi73!K>33$$XQb+wy(0M=bKS1w`^IEV~k;JV8Zd8$S
i{sypJ*`3<%!p+Lws{Pw=r(*9`>ph@VmKNNHhd%(zpfG3v

diff --git target/classes/de/framedev/frameapi/mysql/InventoryStringDeSerializer.class target/classes/de/framedev/frameapi/mysql/InventoryStringDeSerializer.class
new file mode 100644
index 0000000000000000000000000000000000000000..ce34beeabe22a68d8bb1fb7e52d418b2d9892b5a
GIT binary patch
literal 4119
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

diff --git target/classes/de/framedev/frameapi/queries/Callback.class target/classes/de/framedev/frameapi/queries/Callback.class
new file mode 100644
index 0000000000000000000000000000000000000000..8cc0c8b7b4f28a38279ba3cae7b88b1594fa8466
GIT binary patch
literal 292
zc$_=+Z`VEs1_l!b9(D#Ub_Q-n2A1T+oE%05Ee)Tn#Ii*FoW#6zegCAa)Z`LtB$1Ge
zqWtp2q?}Z1%`ip=&fv`Syu^~yqEsMTBP7f^Bm^vOZxd#PX-tR}R)g#?RWdSg1?QI*
zC8xS&<^YZ6bp|>uDKR-)52TWjK{X{+KdmS+H#H@-48lk($kZ<^O)bhyE!KxAW@HdR
mH<*o)fsuiU0R$LX7#WxuSb%(1AdiWG4TvEub_NbG%?SWj6i&nd

diff --git target/classes/de/framedev/frameapi/utils/ReplaceCharConfig.class target/classes/de/framedev/frameapi/utils/ReplaceCharConfig.class
new file mode 100644
index 0000000000000000000000000000000000000000..8d95c5a1acb6bbed7d35a06a7ba1809b73ba1c84
GIT binary patch
literal 2500
zc$}41+g95~6y0NpWn{Hnf*}cQ15HAVp_n%54QMXdb?V@RBoIjHB^k_M#4-{UGOK^k
zxBf<7=?nGBLq8xNm6bCiSt#<bX#FskGiUGF=Q6h6ynX#IfZNzI(T}f9e1mUI%ws_g
zizdFq9TRtPPY(Cxc1gOFq;pxWzBf_913CO)plaYDLweD6Z2t~JPkw5hp||923x@uh
z?TE*%{Vn0G@vSCVhH7q|H`lpm%YA6<^>^(<hS}P-DDHTCUu=t`V8IXUV#~Lihs9^&
zpvmi^w9CDc>+IN#1%?4HFh1cPZ+QG*mtitr+v7*P*yK*5xaxbh(^#15Hpx51@4nQd
zIUA|F&XMr^z_8{nxo%T%hvDWq?4e_fqU!jfLD9Qqx20mu<*RW-U?xD?QE6ge)l+nE
zy5@!~bdWE{(V?B-tlTX-LY*i3lqQ#;=%_v~tx*`cup}#6d!p`d*#2&r`<&sShTy+g
zw6#mSik*tMt;jop2bZ1|cyM|~;6vSxr`hQ61_Bb<(9lLglLXpyY6zlq4krjIO_x*L
zH_pK;H-ek1Zp*8SiY+f4>3Tx55@BHgg9er@)bPl_V+$*IV&N&C8CaF`nt|tXUbnD;
z7Z!fRru6;E!q50c9?Ti|)xt}>k{c?=%>Q}D^oo<Ayl3j<+z1;>zJXFno9)4_hsa<Z
zaPLq=+nlbCH;Mg-H(O$5N3w6~U-Uq-Jd&-ft=eE$he_V5zVk9lA??plM_&h7<#Kwf
z#*3bRIc}E;UKPK!gi{v_XW6w`%=l5C59hTW{fS1SK2rk2jaFYpvQ@f!6chN6epcki
z0+X#s;}GqNG&7nn6#fDGn-(ctq%p0Gy%-Jw<bWJTXzs%(E`{KE^r$ndFfciYzfO=^
zE*wW3Ce4z`gc0Mha2Zz=&lo-mdA<lmWD0Hcw9$K<(2<SdGZFq{d=ld4$XlMJul&)*
zg(SK^hEC%u#ua)3pT^Ki>Exenq?7223G_9EzK$Cj?S=+Fs?|P;n-M-0;WHZbV_JM3
zQz3qtYS1HXh3T0S^mP~DDy4s1k&Fk9A&FcSXvNfOnpP>AXYg4_{ACzewr~PdAKUeq
zwk(m&Dykx7G?^Pkkxk<B@5R=^f39$Wgj8IDE<H0^3AgA^mo^HkjSrF(a~cXpK<V|>
EI}2+w4*&oF

diff --git target/classes/de/framedev/frameapi/main/Main.class target/classes/de/framedev/frameapi/main/Main.class
new file mode 100644
index 0000000000000000000000000000000000000000..be6c0f0376f5706b40868b8bc39a94fc6795248b
GIT binary patch
literal 23292
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
So-1yH+tm9GI4mE6jQ;_Q)`Ii^

diff --git target/classes/de/framedev/frameapi/utils/Information.class target/classes/de/framedev/frameapi/utils/Information.class
new file mode 100644
index 0000000000000000000000000000000000000000..88e5e31b84280c1c9bc3defb1d384283d326fc4f
GIT binary patch
literal 4090
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
aGNRNRR-m1}m*FbJa1A<$qwF=6sec2RVM|Z|

diff --git target/classes/de/framedev/frameapi/cmds/EnergyCMD.class target/classes/de/framedev/frameapi/cmds/EnergyCMD.class
new file mode 100644
index 0000000000000000000000000000000000000000..e229f2ea9f1a7778c341e6a26e2480c2df3ce604
GIT binary patch
literal 2882
zc$|$^+fy4=82_D+WS6j98lY_`(AY{FNK1O96>P1cps`R;klL$ml9RBI?54Y$+Tyj|
zb;dUztWSM#h8G|7K`M5J(LVISzr;Vl2gj+7-`ULqr3rL0d-glu`M%%zF28d&fBg6B
z3V>tyDuic{tVa~XGR}rDg3%CO!pkyJGG38zPR3XRWQ>P!9upx<;#CQ+h0utk7^Wml
zhtPtgjMv3`Mhq9k@P_cZ7{Vo7mT^T)CS+U{^J@)wQ$RK1tq@eCg_MzymB1zB7=ooj
zIj`vq(XlK~<V>~5v;2lDs3k2?R5d*@PQwt{KCkJTeVSo!Y%Am583zBbk>w1{W17y-
zmy2m`POIqxX~JVhMlH;!rY7bUrQe>_EQX%y$eCi+N{r~-%-<RwKTEOH8~U(OEUJ2z
zAr~7n%zPqUo}bt3M8;JoD$7$`&vJ8U6N{m-IrWB`D5!cqF=d;Yo*%mWq^kE46@WVt
zFt8MZWaM%MN{yjoJ@|yHoh+!gXj}5JRWr}+4OU#YHTza#)rx6OE5wWh%ZZs`&(?WS
z92u_;otq`e5Gbf=UJ&JfA~`BQMM>pvt&%xI<CLvt=Ev2N(<|aBLukq<n;AZ;iQYA>
zcBWr=E9gO9!CpK|eWKjms!5ntpkYqJyn+IX3=L|wNTsUOv|i0-J$YxXQW2dzPV~FR
z3Un9}N(!#Slwc{aVKD5gN+a>OZWS^qDB}jhj*Uqt%UZ!{LED2x^&+Jjb?u|4q7N3+
z3f{&|F_8ZPOa<@YT?y|gcpo3QF4MEz^DuJ4g(^lbRkK|G4{=+<M+!d1ClWqY@EJZ=
z@CCl4v-K4GXJ}aqcp^Q=GsLewwVOY3lV{4dLFv@R#L4X5{Pa?+)V0;)H4v+E8mduk
z(z#032p8SThA3chdo8;Cn;m4&%(+_{XH{#Gn?=pCG=l<euNEVn*pAwGbaE)m^OQWb
zEY@3%_bnTBq~h1hYQak7b;IPts>NN3k5q`;6{~$0^wOmfR7)i;_C8p(s5NLvp>)Pl
zn=Q+>;YHXWZjW(pS!$lwC=3;F+qy85&dW{2J7)b`HGSg^)<VvY<@*#E8}G`Uwbs15
zqI#Jh55>uDZQqn`^SnTiOR8ycn${>v%DsZTExI@9WU6<DKIBn)=-AN{7Iz(e;e90c
zU>}Y9X;z}SkKVDqdtiO>pW%y#>z3f}TS6cn4z5a4Mf%A>h|$=AAdTDLC**px(yt9&
zXeZR|=%tnIE-v~I2OLT4PhSxnz(IF+-viW<FIYMLJLEgei2nw8Fc1lZ>z5Jo;SRfc
zU<nN(Amt7oM*J(^A#op#7w@4d5?Dg>Krj-xj~1G53x}7`+D-wtEunoG+kIHXH{{{J
zi?1X8x+A|}$6zoLe2CK?Ku`ckYXCb5AQD_ggn^`Rhrp8_!#nE&?HZIk3`t<f8!)70
zbgsjY*I_v61f6u6*Co>B=p{!#=LX&7?$tdIT(uL~?OsHR3<7tNjQIVoftQ{XkshLL
zHMEL(hZnT$t;o(w-4E21I;WKj=yn<^VHf@L>O_PZ*+aTGcH=ps&@_?g8j&bZEi6zI
z7ijf+qR=8W@kc^fp@#oSP5le~3^>FT9A>RJ!a8x3_2C#hhU4rM2G}T0uyZ)cu3(UH
z3^5ByhbrHqnfBR*ek6!g3q%<qNrZh8hj5srm5NTL7;fVTjv`3tP4st_JP51Fv6ICv
z72PPsBkUwJvK)?+6c9x7=t$B4P7n=+bdq-WInp48s3t;s9;b-fr^&Pn(j#1u@WLZZ
Y(D)C|>^Sf*WlHkj#Bzo+&Y5`ee+Q22NdN!<

diff --git target/classes/de/framedev/frameapi/main/Main$FrameMainGet.class target/classes/de/framedev/frameapi/main/Main$FrameMainGet.class
new file mode 100644
index 0000000000000000000000000000000000000000..7cb6bd30c94b7d47923ab41673cbd71e44b7b19f
GIT binary patch
literal 1432
zc$}3~T~pdn5Iwmfkr)-JAH}w|rBo4x;Ad?`+Zwgwh#yls`h3BFQ3y;3PXAF~+ZW69
zp+BHMs?)tmlsILak%zszdw0*-vlsaD_t$R#OW08`h*t`dcrDCSAEp(gFe8GrFtZBg
zkP%*17_ARE1@l;tu_$9nLO5?)rn4cTCpB{-A*9#O3<*O8(=rZPwW48v;l(OtVugB%
zS5LTYir7zvoO81&LEW)=&DiIr^~rE3+_fyj)~mePH0U-{I5V`es5mpOJcl<-tw!aV
z=t%~<*Ca$LhI3>aW%H|qk<?7#f?sj1%B_la?AWGN5hcw|$!O~T3ZW$2@C#yH5s2iV
zeq`7+5ADVeTlI$PD981dT{3n|p)(?;%L*73Lx{>)R<VLNDpv89dc09&yi>7;yoz;U
zHV~KbUd0D|RI!P;3LSYW_LyXBsn`~Y*#~S#LbRjhuy|pVC^dOMfP{Y1x@$EZZk0$&
zf>wHehrb@ZZk5f7ghgto+ZC<Yy1X<Ut>mU#Hh0XrrIl$vnplz^OcR3kz!s0wdmjl?
z-5#~uJ1V?XGMdd~F1HX2a(6a$gDTrbqsqk+#!|X|FW$U>=mZ2l*L7(v$E-HB&mOLR
z&h4A6MSZR#Zu5%G8|Qe50s5_qPcJ0#H6lAqkw&K^vgx0YevrcuBO4Y;mc}FURj&Xe
z7^gFW$B6sQo9J;N6K$|-^u$8f=xrl>+J+pR8pgM4^!ed;s*+sfLD9qJFvK#LWLd(S
zz!M*@N_T=Q8^GI3-$3oP5s4<E(=Mt)sO&T?;5$=K(A;1PP}w5J*b<U#87a1c3|kE-
z$>J%Vxk@H)l^ps?W_{*<SBW5rw4wUm9r8#=QVb!YT_Z_(#MwHg*#?0>zm>I5;|b#N
v0Qeq_t_q_B=J$X$X?`8UY>PB(2j(8f3wLftk11>dV{|HXH$eZbqlo+i?n^^Z

diff --git target/classes/de/framedev/frameapi/managers/SchedulerManager.class target/classes/de/framedev/frameapi/managers/SchedulerManager.class
new file mode 100644
index 0000000000000000000000000000000000000000..2e69ad745b7d02ebc788e3022c90d61601c6b5c7
GIT binary patch
literal 2160
zc$}S8e^V1z6g>-p4eN>|0(A-sBDG1XEDE+_C@P_7YyxPI82j@jc?nB4Z<+l;$8XTD
z;J2uqHaarXzdQX(o$2(x-9SQ%ZPPH^_ukoi&pq$HyKjH{<Lxg179liT#V0CmYgob^
z4Sh%t;R7to<)_lDL~&QcJ=~9CRYL}A8a~6ibbKJqL+O*%DCCif&o#u58$kG5maDvq
z4GrVRXygaE+ElTnVd5B7?#UIQk2Oqp7=D#2VtAsWpkiBro)v;S8H>3tcNGlRxtF&E
ze~}g2W|J$pm8){2=CCHO@`G@~_D#bwU5`_sYc!>|@!&*QTEXD5DNJugL4P8-qac#8
ztHgFLX9~XIH_P1FW@U?zc+RdcYlk_eT(`l9w`-D^`O|YZnP7F9x=`8WRo~)HK13*O
zzvBx9XA2&yH1ce}%{T0N%<-Q1LdZ2SYX#ePDtz6PPsjesGq=YMn2wKdO~Jzd*uILV
zI(AT$6wh=dk<wAZH673K1&Pa-3XgMhtF~=%CRBW><12ivU?5;n@r{me!BmuWR8ZBy
zWn@j7I(BtxFj6(&TVZBzNGYa{Jv4d`zNy1Pv-h}#-a{4@%=H$cU__plVKGrRHp_dw
z;!#s|prb=qaOoYyrZDnk6r7>n&kAZ4Q6cx4MDktj*N&ieyOQ`fAKCmdmmTmmUSq!H
zWo%J1>k5V_+0lG~QrS-3DEp0u=^2#(_8sP#wlHecqlRqMOgBuqjUGd&>nUfu?WpS$
zxlWY|o@0u7I{93|?5P|2jye0TQ6yV1>w?~(k*A(%nIg=Pqt`*fho>=iLG9EeJ@z+{
zE~0Wc+hLZ^gKLAtjFIBaT8$F%EsMRNQ<v{Z*EMCfuc=X4;?Tv-iUTe@+abU4M7MyW
zUP#N5_j<R;gVgDE*=BAd$2{42D~ax7+qe8Wo%&WVq#vC)Qum0>SPcM4lJ4-yJrLjB
zf8zTOgt$x}jjN!Opnu4FhipI1=_Vt4omTe|37(x#y@rxHL|^F*`d=gRGX`D}+=n@`
z@+$=TrbKW72F>&^1oOBdzbv?UO!qx`%4bW&(!yY1)p)dpp_iD9Yj1F-1^p#rsh=>=
z!r5>b4&2TaQ!R|V3KYtuGl-I%z#t|uii?=SCECjrrJ12S?+R{XwoA-XTg*bZ!|Mbt
z9;^D1NTgHg5U~<%G)@UealVDI;t7SxLyXJk?-4pQiVH2gUp&NwgeF7iVhd9QO-tx<
zz%tXqY_X#{Ma2TuJ4$NeRG4W}l)xRbY5H5mI@Yj(hj@l;m-<qd`T;1vlUpBd1@-@!
T!euccL>2xf+T(b8jD^FWYX~&i

diff --git target/classes/de/framedev/frameapi/mysql/IsTableExist.class target/classes/de/framedev/frameapi/mysql/IsTableExist.class
new file mode 100644
index 0000000000000000000000000000000000000000..f019b93a44fa169e9b1af60b5ba59a647de82cfb
GIT binary patch
literal 1303
zc$|$?SyR(c6#j10Hl<Bj%Ib!7gDyZ^06{hZiy$csmchZdkX|v^rZu@`%1`k>@Zt-L
z&iDg-_vfgbq#%W&V>>zL-m`vZNxuL3@(sW+R>NpTGK>_`E*Xem5JNK5Fak)1@X+Ot
zLU`=*ClPWOiC`2@WsHRp#kh=TGA0;;lcr^gX$C2g++gs}m-3vUMKdkFQYmh6dtKiu
zkR+y+485?S+opRz75c?{(_u(zd9J>*^&-#n-P%Dfn`&{-`B+ew9M3pYH620uWYh7E
z44nyWN8i=ef^KcAIboaD_C)e6Lz5$P!He7?n~s`^8z*-rr64}rxuAQ^ok~IExT|A?
ztGmu^P0LgbUKVD_B5gpNmD7-$Axb%n4_UqJA(k;IV@k#}wTvO0D^+ZRFPN@(TYXVO
zZX^Y5h{>2y@EkD(vzU`HuiynTgywRpxr$lHbDL1)7FXZI*JtOnOfIf1Eob8W3KsB^
zs-VLnmI#A_S6C(>3N&P?YgbmLU<EOT{{Nf<L+d%F)vX<FkSNyJ>U!ay9$#>-6~qw#
zN9OD%L8ZwXCCl<MMYp+_uU!Z`H7JohAK1BqCenU|n6}ffIU%fr*;OB*ep7;axy-FR
z!{Alh)*w2a3^|5G>8!SnM57^DD7?yzir{M%ZtpQ9{+{6Siux^H72X?1>)ui(Q{ipi
zx~&@=chEv_w)^vexobtVoo*^|Mm&%@1pDl%JBS87VKX|3Dm4Rip__OUdT{O3`3EHW
z12aeP9YH#VpFvB1MPTy~!I*r2P>P;d6OjXij}h@9J8%qz;S&P>eQ94yAD~&<r=$`_
zFh-vc`j~iJ@?i8)IuKfk(kUcK6QE%NGD;xEa0BDGi7E7YFjMf8%>b^GoRMXebhjw-
pI2F^2+g=efh*KwkyY%$H_Y<Qs?#a0S+wFpk2QKNObHCS!#0f~XI3fT5

diff --git target/classes/de/framedev/frameapi/managers/ChatManager$1.class target/classes/de/framedev/frameapi/managers/ChatManager$1.class
new file mode 100644
index 0000000000000000000000000000000000000000..f7a172c3db691c45e31adebd347d1c4c05d14a8a
GIT binary patch
literal 1506
zc$}3~TTc@~6#k|yEG;XoD0oLu)V6@@{eGq1z!uaR6G==Qwqv`n-6gxTc#Da@!RUh|
z`0BHXV9><)<byxS81>8)wCamI?77YP&Yauqm+$XC0yu>0Nu-fiWFUnM2HP=&z3s5D
zuO0hwK#_w64jDL{LJ~(5IjYDp<#RkmxDy6W8aTz!I?LUDJ7lnmeo(b0qv>f!TDI@q
zbE;9mrQ>^6p;;>nTd|V_l{F{q-^VaetO)B~!0VzSW*Y*ZajZJ`cvS?URj6@UYA6bJ
z%JCd|hT%?j6}VMqm%GJ~DEJk@kS;o&7>nwYBDl#XU9xl*eVe<tc;F~~*_cq(Fqk8r
zCxU{@!%&bq^#3XL@2BG8LF5t5>ieZrr@(BKzEIsd#b>$Ya<6KYW#D*K@?TSy+@3D+
z8J&fJ(=;}QRN0RLTU>HfVwt8p_Now6(nZg9{g6VGgsk}$6KBw4Vjb3-Sc^^*UFb1z
z*2FoSH!y6XfD07c#6?^(aT!-A>fgyQ<o>%<b-{><QCu}qM9IV$#!Xy95ADJ#`o*xb
zX{w=J6P3snfi<iRHzLnlo|n!wl8$SQNI`@40|tXS-8ddv)oKv3D&$r1P>m!zkt_ZV
zUKUb~<PQTwoAc|=?rgLBN-l&kYCIeh52POb1dZO)%K8<5-RJSiDN2F7yR!eTf?61r
z*iF4N6os~?Eflg8Nl{^F$xe*woeG^tjq?$DNjCRv;i8uwbcTKmu}nsdA0SS<pe*!t
zp&JYvNGgyXC!Wp^EP&+)7ZA(8L;Q_)+(@*Q9Dyn}5$)FCG&W-^pd}TORvFvS(+J20
zkw6Qby~@8u>@!{{7GFXlh9$Hx6bF{j%J3342?oO_w3R*}d3*33Qj2I$KA%T!MUN*J
zVK(E}Fw9|3ei0q7(c6R??n{Z`6+O{MsMkN{{sDG0fQDkKzPPUM1UiUL!N4@~a7nMz
zYw&OzKJFqQONbdrJi#oU;y#|?0cHOf^JGyy>7_U>wRpRh@+hMZJ9M93E%#}s?p*6P
pY%tLO4Oa~8`iiYz5!)Ci#BSZ`J;)MI(Em7xEhMF=n`zx+`~>2?ZLa_T

diff --git target/classes/de/framedev/frameapi/interfaces/APIConstructors.class target/classes/de/framedev/frameapi/interfaces/APIConstructors.class
new file mode 100644
index 0000000000000000000000000000000000000000..290c242ccdb231ebf57b7b2bba03b590a8a3469e
GIT binary patch
literal 773
zc$}S5?@Pj95Pn{rPUlK9D=o8MX8NUlDf*BEAqIg~&@cKp=c`S0i){-1S+Ng6gZ_a2
zsOYwR2qHroym!wXclX@g?&I_A9l!x<BGx4^l#-akhKNlGLTGG>*p?uM#*T=x1SvFj
zMN~xWF~qsSt^PAZwbkWH&r(Oc%O@dFpLE54VTjTU)G<RUble)cV>2Ahn0T){kInBy
zsuLTT1}Eyu^a??Q()J}KM9D>SP7go5I;XHiT^s7eaY7l@+8u+?FuR-~-O>$yF&=fe
zb)$BM<dLq;v8C}d-8XWS-7pQ?vBsKXTK4`xov75^Y~#tOA}=G248!5SHX>sIS%&f~
z%aE~%97FN1O~_cnGK2DKjBYsG>ZuyHl^<g>Wc<OEp=$J%%g%sn4xLFoSZJKl?ab5F
z2`KoZ5-Rvz2bwwxG_jJV-+&e5Nf*d!BLe@cd0-E(h`5M)5D3Lw#65_F5-yS+Btj_{
a@=H)+m1LI4KqL~O9FderGOUp=g5nn>Gs->y

diff --git target/classes/de/framedev/frameapi/managers/ChunkloaderManager.class target/classes/de/framedev/frameapi/managers/ChunkloaderManager.class
new file mode 100644
index 0000000000000000000000000000000000000000..c42ab394c877bc3b4840bcf740effbdb24deee71
GIT binary patch
literal 3495
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
AN&o-=

diff --git target/classes/de/framedev/frameapi/main/Main$2.class target/classes/de/framedev/frameapi/main/Main$2.class
new file mode 100644
index 0000000000000000000000000000000000000000..2212a9611c8f7086f8be1c06c7abce587514ab77
GIT binary patch
literal 1144
zc$}S6TTc@~6#k~SZI_jnt5*=QYAMJfqQpo@q=Cew$U_YeyiIq9GO(R(_Cowwnt&1?
z`~m(C<G(PT*@D)VK;kBI&e?PM&SlPg|Mm47fEBD3U|?30hbHnUn|OrBCZ3>Tl5WmG
z)xf-g1qSn&d*x6lR|E{Rbw6m?&G_g@Mz-U(+g!PJt;-vU&ufMu9dT}C7_A@jV{Us~
zwd_U|NYx^j+?rG}T4z|TT#q;iFt^K)srjy8DAuJC@8Wh-1n+s%6FQ;qaBr6fQvaVT
zGtq$z8LYQTiJ<23FchI~#})Q|z}vzV$6bMUq}}FH+1o_Q%T#NI&^(5T%3Mz&8@}%e
zuE;$8kAA0lD4dAY=H>@SbRy}i(7;oMLPNF`kK%xe*%}P!YT`(GGz8_uK_FCQ*C?~D
zf9;aY>pDrpj{`?+N!?;WSG=elX)2q_@%)fxwJo9p-!-sk!A8-7i6ILXZde$`l7VLy
zmhs%ciiH<=X<-sK8D_4V3PY*C1BR(9TVNRb8}es14AWQVV#vEP?C{7rU`SW=#gFtX
z%tpef-wUVO#oGPnV(k(Bz^oYzTIpEq>@!SO_Ac84EYY*cgKhz-Qb|u4AWnm(=a!~3
zj3QY}B)vi^(G;umr(o5EQ>3b2kp4uf6h?^V$PxH~QKD8N7cqtj;!NL94@_dKo)F3j
zQfJ7VA^Wip=I0<x=?%f$A}<YNlSSLI)z8TF2lv*HJ+I+5oeXL25WSoD-@{bGr*S{A
Q&ENsXNixaHfd2Bo0XH2IrvLx|

diff --git target/classes/de/framedev/frameapi/managers/FileManager.class target/classes/de/framedev/frameapi/managers/FileManager.class
new file mode 100644
index 0000000000000000000000000000000000000000..6c731cd6a4ec0fb9fee6fafda439b7da8dbc4a90
GIT binary patch
literal 5028
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
NJ=jGg7jRu%{|~lmm>&QD

diff --git target/classes/de/framedev/frameapi/mysql/MYSQL.class target/classes/de/framedev/frameapi/mysql/MYSQL.class
new file mode 100644
index 0000000000000000000000000000000000000000..2416bf01ab285aaa0cb7f9e9c6f976938503806f
GIT binary patch
literal 2972
zc$}41SyL2O6#g2JX@)l7fJ+p00L4M0jY}566+}e_1ZU6~HKwQM0xdJ$V^0sFSxsX0
z&Fp)gQoKf}LP)Ce;6qZCzmOl2w^Y8{(~gvY(V{q8pL@^w&N=tMU;qC4JAgg-DU9ui
zSK$ftg-QCQbW)N5Ne06>g+vI+Fotlt95tPXs&NL-N^(}kbJaM9^I=@T^C4Ueqqca{
z3sN#vq$D@1k%mw)9EOS!d9YtfqbjU0E@4cPjEZa+HXM06r{b~-S4CcGo{ECx<C0ua
zF`?qBifbxf4B@2^URF@ucQr8>A8^I6HK8C9zhsOXdd9Fv^n~YH_DF|<icu%;krnd7
zRiNgKeEy2#rYWWk&qx`0!H+q|rBAu(*a}t_Z^>WI=v|I&3)8b4n-_)nHSc8T-Wqq@
z5j|BH8?!v!bh25)PD@|;wX3Kmgq;?yJar<SGKWsZ6;$rCY|A^qFtOItjM?R+c~?!`
zvPFL(n-Xr)NXgqHamO?=rw!MVdSI;ZMy<Sprg&QD!>*APX)#_DjGU!sugYxu&axH^
zxqL);_cB+oI@Y=bq~!_EFvt3goF9d)E~1nU3KWK2eeWRe?w&A3E;zc(%s8@i>OM0Q
z;0h<4f@_MSmP|P8XR|{d*U*j*4Nu}J4acRl7rKU>lI(&W!YdjM<5d=Z(O4n8rr|nX
z58(|BZ{miAxA3-tXrenAJr+ONc{m=;8WR`I60ZFIoo#Jx9U;7<;a$8J!uuLNz=s5L
z|8#T~tPH!PVTa7+BYdo&Vf$&}rYt*Mut%a-3T|3Njl%GVNErpMQNt&=8N#O;KEvk<
znxl6n&2Gz%9u=b*;YO{zS9JDV;R(B)pNaho+|=+TSh8B`=k83V{F$YEA%w3qe2s53
ze2ec&B|FY}4dHtYKj23VZO}_!hWrtJtf&l>201Vs3C3B&?s;bhIN2KCIsrb7XV~&f
zoX2*5VA^%MDee3vj~*mK=adNQxZiUNqJ?iJk%;dfHZro+(f^x0LcCYvlc`Jo7_BOG
z^@wYY3%Ad(jS-2XFShWxK8$6lVcy`I3!atXo3zb>>k8Y`yC;N6U@jj|#1>bMS`#9j
z9Cd|}9&nrt-*T)cxNxbH3E_@greK7+MFJ~Wkr!US@Ysv7q?Hv;fuNgX55BXbN3MVx
zlX-Z8kI)lYerB=eKh=_*p(6{e?4|Ip6GJ(!GB#-CA{A}zVTSY8Rj1F`sp685E33Gx
z6l{w<%3`ZDayiNhwl5ZSfhl-vJg9n3(WIb0w$PCtTOKkC?*BZ6K9SFJq?W+XI){n1
z<W!TR-SZb;(ltz4HY`5ZhGpx0B#grIJ$BwRZ0X*_q#t~O5UPsh9kz&a_x*L1=7MX;
z@zIC5Ep@pvyXKpDgZ_v|iZSn2w&kIk(t$?)W!=ty2CDeOE$B;a0pA($T>;-6@I3+N
zLMK<{Uh(-}-@Xir-1nsWsO=_Kq;>0UD7Pq-VLxe@99WAAtiu6HTG0syamc^=Fgk+^
zenz?ftz!yhe`5VC%BN5<g=JHyoJD9FWwig&JBhVRe368~su-w&IX3%QtGraEu>;kl
z8&HXj^k~EyG|{UW>#-S8Y@yUj^jmpi8&T?hsxt8|Kjn(^Asi_mB9SR~moWbwq<qa!
zd3<43wdq+@MZ$BaE(g^)Xnf$y=kQn=&dj3bH`JcJjTKXf%%Cn(Pcnm*b68b|NyK^=
zIIJewI)gRy{BALRB?gf!A#GuX@?XA6Vp&Nno7l5G?ARbPPO@J^%>F9z-EGDYJ&xj7
zfVB!`{~$@An<ySH0lgkHcQZl!fkvNJ`+y!-aF<U)?PYpvi#av0(sy%eq6D_Ok})(E
zv7Qkd&_j=7tp0Ik&|AtU%2BzO4{xYH!E`Dp^_0??^Lqo_h^(7NWEKrGSRdIigN@UO
z23n)9Eeo_JU#kqXW?$PBXq$blh1H(MmZ0E~7;8L*sH}RcFSbZ=t1oVn;<jQFrcohh
iU6}{7hSOb(I;`NBML0@z{8mqZtJs3o^gQ8@R_}kW<>apb

diff --git target/classes/de/framedev/frameapi/api/API$CreateConfig.class target/classes/de/framedev/frameapi/api/API$CreateConfig.class
new file mode 100644
index 0000000000000000000000000000000000000000..3ddca1c05549cff4ea16d1cc477ab46eff9d22ae
GIT binary patch
literal 1313
zc$}S6O-~b16g{t<cG__YSOmX7KoMF{Mg;K#LSh<CNQ#<ZSh#zgzSe>1Of#Jl`78bk
z(S?l*e}HSZE;Mf3=tdLW81I{z4wY16T+ID?=iYnXd6_pqU%dvfj8zR9=CjD+l1ApT
zh6NbXT#+V77p1wXVp+vChD>9><T^F0&ahZ^y}D6p@9tW@VFtyv$9>CnjGAQ&<1U#}
zZ+VqL3vu#@VW7Oj_qbuX0hCVDw#%!c%D^5`vSvA!zs`^>6t@|al3S&o!LsFud+kO=
zcn^6+PRW;DliS<evt%9>75}l-V$e&T;J)ZG);AnScqN;+T7pjJ%T;02Jl+shu@?rs
zX&Lgn{a|Cdx0lFe>%#92S}GL(<MO#JpPRdzycv<q#S=q4hG^;$MKq~McWcIUoBJVj
zrVt}HoMzkK@`-F?_4jruTf%Y}M*4zDS-0)ejyq3G(UcrpDprV=>xA!6<93U7W!6kP
zdJ1jJZF{B&Ib=wr1vyy9apZLjVo1jX@+xlVID@k~#&J%^B&KxC%JNNy;y)`+as;Gp
z?$nL@l^tOc)#1ZZOj^Y)hLyf^8{FY_;k5!eHpAq|lCi%L`V-%Nb1_B#k48ULlI$_)
z6lus|An+s&c@<15MRu4ngFGXjntKU$KtTd0$fjjcd5aN>^$>tjoF<=@qDIXt!3mIi
zj>J=>J4kk*Jd1}65DO^pkybt+t9-;*z>CTMoZcjwF&52GI!MV@*0cW;Atz$0lRy`l
zK8TSTEraqIN#zU0^vsk?^g8*3oHRGzfqHne5dRe^<y&yO(GZ36xDZTFW15IFT$G#0
z&k%>%ejGAKIeaG$KafEoMvq5#OC?_*aR?7D_l}y10j)WlBA=%yizS>SyMXJ`{{k&1
B8~FeL

diff --git target/classes/de/framedev/frameapi/api/energy/Energy.class target/classes/de/framedev/frameapi/api/energy/Energy.class
new file mode 100644
index 0000000000000000000000000000000000000000..1fca66504a38e328e72eb16f926ed38f4b1b108e
GIT binary patch
literal 4728
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

diff --git target/classes/de/framedev/frameapi/api/API.class target/classes/de/framedev/frameapi/api/API.class
new file mode 100644
index 0000000000000000000000000000000000000000..748616f52d0c807419ce740823924440ebc16b9c
GIT binary patch
literal 43919
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

diff --git target/classes/de/framedev/frameapi/managers/SetBlock.class target/classes/de/framedev/frameapi/managers/SetBlock.class
new file mode 100644
index 0000000000000000000000000000000000000000..19a7eae987a3dc656de82cc17016ddf3e58f6a87
GIT binary patch
literal 309
zc$|$-y-vem3_Le!(uR~)yg`?$Fz_vGAO?__B03axcM?;+k{|Rn?RzmHG4KF96v9bi
zuPvQ?=Q~UO{`vd@aD_<(52FyLA;yH@##XkuC3y4m6~Vu+b0LfqTgl_DOvOEMTBvfC
z)EO5mcDChzqTjsOEn%MIVxAqBlFR-u@S8OySG*RtHA`vkiaL9}CPd46=Q4S)ZG7~<
zxZLobWBBM3X2;zkOxlnsxLTV<x{<8G6g_>dEz;I&ih(lIaiD+k0eaV=hfp!-L=OYS
O_+Y>gQ5QeyT=6d<MMe++

diff --git target/classes/de/framedev/frameapi/managers/CropsManager.class target/classes/de/framedev/frameapi/managers/CropsManager.class
new file mode 100644
index 0000000000000000000000000000000000000000..aaa632679970fd45459d6de68e3eab1c58d70555
GIT binary patch
literal 6496
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
CP_9M*

diff --git target/classes/de/framedev/frameapi/interfaces/CustomConfigInterface.class target/classes/de/framedev/frameapi/interfaces/CustomConfigInterface.class
new file mode 100644
index 0000000000000000000000000000000000000000..9bab963c502c55b06f7d2cb34675f6ed658b09e2
GIT binary patch
literal 205
zc${rcI|{-;6r2~M(O_Zi3AAw=JwZUQvJmW_o0qU5AK7ejI13Npp~NgfE2o)ZJ}|HM
z;|XAoIKn)_g0R$9*h$jVnaK&0&Gt%&Tkd~Wd}%tX<!DMFtdp*FO*Lkx+KJ6r%dX&_
z35QfvX1S77`cd%RDD!Q#>hGAa@^e*kovZV$5bb6JLI95-98Mtw2A+Bzl9~4reE^*}
BHi-ZL

diff --git target/classes/de/framedev/frameapi/managers/ServerManager.class target/classes/de/framedev/frameapi/managers/ServerManager.class
new file mode 100644
index 0000000000000000000000000000000000000000..2c3325d5f30e8731f3842e5f976f14bcfc25bbac
GIT binary patch
literal 2367
zc$}S8YgZdZ7=9)sENm7^BQ1q$Zxl%aVWqTQpjLs3qTyn>D8<`kGb{_6S=?;s;e)@y
z@BRvVj%`8D@dx;$Jiap<(}YW<=EKZ8v+wi1&%C$%_4n_80=SF7L@(Yq@PUa*OsVC5
z2R<~Bz=KY_fsagljA<p!bYRxRLwsUl4xgs+8RnJrc?Z5oqlg8yET*x9WdmOtcw}IO
zA-U!Gf}y*(!}q!E1@;`Brx@CtEtg@u7=*4}s_pK2k?jO>%X4cXkGw$I3a6E4o39Dk
ze&3T`^ngrcbL-?_HYk&W3q?<g#ag8#!c|^UE;Gfz;r==gJ$0^MCZlby%1|hlg}oK>
ziYSZySm1k}UEz|uBCOggBHS0@LVQ#{T@lSH!V}rt|DbFTd``!qhw#TD(HF>Nzvg;!
zK~$^c?~!nXw=c>RoouY@bLrYEQRqo`s@c1ckry4<%RWCKmYXvw9EP*ar4+t;{|PWX
zWKSzI44iF<j8tMO42jJdT0F^+D>^~Nc7wpBN0L~f2h$^F4k9rfhWy|mkNCXYt3`x2
ztF=;tN7qWko!te#S5JXKL6gFX80_rXBu<i7uWPUB#E=lwBJ#zMKL@QPt*dyg1hvo+
zaVjz`Ngh-FEDYc(gVmfN1FII+ux{Zi+-69}460)X6<?`;ZQ(Nd3~X3<j7<wy&`*A5
zYSI-{24UI2Hx|CdcLu(<@B_Gkk_8843j$jdjM+FC23!l<@GR_L*8rKWfPy~q8f8kw
z^)hBlr5zpO@umRp=_<41+)_mCma;2))ksKX=Gqxf3A?~mDWs{K=VdkG(xEusqLO|!
zf+F8V5S5C#z%MHwgW1+LI6d9=t6Ob@SNxV%W4P!CynO6#`k1f(>fjS*r&>ZA^P>_J
zKi0TU!{kzPo5q2k$~|Vdab{(b3BfA_wWN5`XdD_#S!&|f=(FK-s#2Yi!}8kd97FHF
z6R34Cbk&(G)%$8RdmbW<&dQ!wm!acH=tV+vxpc~aQ+ZEEK?6!NJDXEe=*n5Mg0fx}
zvfNV5dU&3!{aELeYE#1#H|bBV7etHx`=Hty>PH<-Yl`k^IMDhgo!0aj7|g!_%m0DI
z#v$6CBbiCPK>ITo`TTD%4$<)poli+EfwySwMw>R9B*T4V_8Oh6*bJ`Y2JMU}+^V~<
zX;<G;WUBMmhLLuCd9?|gYJdlE`xLNo9DMy$@DSdvgMTLNcG?F<GUjune?jtT;Sknj
zvOjr*E{4gJdQ+RWc$qAK+;$S)#4vi0rEul7hX=8hx(6i<(^saY9O)#qG=fpG)kEk4
z#wa%Zq+yd@3h!ty%%qEP+^LiMiByub4;`X=v5>iNgq{Qnqk0>mBxKCO5iT+uA(O<*
u*vCA_33`WKK0%4TORVo{p842dgXfTD$Fwv-OcM0{Ch6Z(Z1AqO`QAT>t6qKp

diff --git target/classes/de/framedev/frameapi/managers/WorldManager.class target/classes/de/framedev/frameapi/managers/WorldManager.class
new file mode 100644
index 0000000000000000000000000000000000000000..5eb2b91e23ec22422a172138571875be840e0caa
GIT binary patch
literal 1853
zc$|%t+foxj5QhKBX$e^{iHLxJA|4Vz)&m|v1VSQeNWdUedACW1uq5nKn+;X?Kzd`9
zhZ_qod;lNHvS&Am31%TTf6q*Jf73J5HNXG-`~_eRo4x4A?GR#!3z-UG8Z$!fi0Nz)
z3hoNIC*;162f{lS!b3cg@L0kV2~QaU3!1K3iwxdae4D|SFp8YvLR!;#rgo6$=9ZeT
z&`LCI6x7PLYHDI$U-VgfT9siYUF6EHsUGkmKXL}@p{5+Dx?199RoOAjN^#wp%`^0r
zxRuze>1Br5SlTd4O1@SuYnH-wOS6uZjf#3qf$>(C9Z$J|L)*zP;-1JL(+>8g87k$x
zUG~)@RjH_YNy%BJrk5yR(yAH5wDuUr&PsjH(3i8+LU~<1tltP_=8T%i3~1G)TD9!K
z4i|%HqpB6dEOIlaec<P8u*%R&IJ3Z0nxIEoZ*o=?E+dSHgl975u^{6)7A3rpv4mwA
zD@e##MN&da#!IZpcqQbukT*ioSeKBIk;MkXRQGSl5dL>*+5A2)(CKD6=4-me&0V#?
zt4hMqtCm?SScXYGGvsz^r$6lN7zSc(U0|=$`-CV$^rNL2I>Y7mpoW9u!l!fTJ{!%q
zOf|=29TPito<xaGJBgw?G)<5KQfh%F4CC!3<ts*^tgHy72u{Hx?p_9eCi`}4jbZd`
zhCi2mC&GNm<=hsToun}R?OjG&b+|*vM~uPF9_P4DhtkKeiV5`5e?uPweLg*8sq09i
zG*iejvi_+bVBcuq!9~)5y%@v*sq6&c5(dfAgJGzioT6wC+355MJPf2>h7<Ta_<D*Y
z+oVA!x=s?KVT{-XT)}9axkOe($qw@be)b<N+(MI^G`UF|!+4#x*-~ME;X9;{kbIxu
z^M0mPZwqta%nGmCH{b~`3H&v8e2*J`xO@DBJ3i=!AMYN2-5uZShM(*nKZzT4e6o&@
bG+r_!L}vJM>N#UA^hlE)X+GyoJO0*RIBj|W

diff --git target/classes/de/framedev/frameapi/listeners/JoinListener$2.class target/classes/de/framedev/frameapi/listeners/JoinListener$2.class
new file mode 100644
index 0000000000000000000000000000000000000000..34e90de3ae8889f30bb38d93c4f9e58cd27e040e
GIT binary patch
literal 1302
zc$}3~>rN9v6#k|yENoZWqIf}&Ta~2+7V&P0KWs2T7h<d-;pfmD%ffbs>~5RzSSA8q
z5+A^aGM?FO5E3yoo0)Uj@67qmnUneT`}<D-kFhq4Jf`(FW5U9$fjJX7%$g|UzSbU?
zn1?-tg*+;#8dx;2#4yn1L0K>?xGHQpyPbmrKXyb{$k;gy_>l;m_lbC`e7UaOHHN`>
z&yUJ03`?#joKGQd3r}=Yg&+D(;775LB8(gz<@PKcxaLbge#Nk3_Z4|%ZVTHCxw`VG
zpn~g5vDInsitr=f4ahU<swNM%dFX4q=gjF^7_1FRiRuB5B0;9p554j#m6i=Vl6G4&
zFdM29HpLrXCn%kVF7NX$CvNMq8K}sYtxXZ{DbK*N1qUk@3Mg8*h7k)Tj8lXENkgv&
z?~1hgXhZ7SRd{6Jp@mgEvS=Kh7<g*o8J-h^Gr+W~xF@_B11~JRMD4N!m(|HIckU*l
z=AQ660bRrE#POjcW!ltgAE(k(D7jA#hDE!ti=MwCm|?gj;?&77VP70|8T;{3FN7L$
zJ)jn))>+#aChf~(G?mi1ziBfVij=gjWTXPo5Yp4Rs~2-ORlCil=k!qZ)J(y(i}n2v
z%8-vp*%VR4Th#qA+tp*{1YEY9MjX<Z5lKwb(_qn4ktr7SgaIUJ+_Z;Q38SFuNvo5c
zC0VFckHIR7$H-Jpk^P(iZ_qwSKwtx7wBJmE3nXs?iKdTa^xeUD@4zj>=!l6Q$nBhB
zpz;No6AYff_==&?;cqZA_<Q<DlKdSJa&Z@%Nfs-O?`6r7U!x~5Niv6fn8Gd6OhV-o
G7We}rW??G;

diff --git target/classes/de/framedev/frameapi/listeners/energy/CapacitorListener$2.class target/classes/de/framedev/frameapi/listeners/energy/CapacitorListener$2.class
new file mode 100644
index 0000000000000000000000000000000000000000..72b8417020e8cc1b54f46ca68ef2f9f217300222
GIT binary patch
literal 4128
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
LkPJ4s7aaZs$_6ix

diff --git target/classes/de/framedev/frameapi/cmds/EnderChestCMD.class target/classes/de/framedev/frameapi/cmds/EnderChestCMD.class
new file mode 100644
index 0000000000000000000000000000000000000000..a8196f0bbafbfd1f748265743b35ed0ec234b836
GIT binary patch
literal 2229
zc$|$^-%}e^6#j00Z4wq~0~AvVq!c6&$y%sYNyQ3<77Y*uskQ#vY%bxJWH+<Bf$|SH
z<DXE+2VXk);ENAZXvdEF(1#9xQK#d0?uH+Q2I51`o_qJ)?|$by=OlUl@8hQcu0TZ5
zfzb%g;Yt|qMsXGIMe#m9P%suorU@ZjljcKd#ua=NMH5D&xQ>sdHxb69T-=b0DH$^z
z#?2^hVJ3`E6nv^6t6-KPR4G-9!emHf3tU^a^)fH;wVI<>gjUvtsm+qfQ0z5f3U{30
zQnFF-;1WY%(kgI<maH)OT(z9%_M)CI(M~LD8G30+w}o8qZ3f&G;V=x=M>fg@N1HMW
z+@4(FjypMfgZM-&bJ8l8b+f>*oXlEwQOj3XSB0w?wQX(h^#YeCGp9skviI~gT`TEk
zQCo0rVHPuYU*8)1ibQaAyU1OJ^RL2j(-rQ9mMiHSbde{k^vH3%yBT^L^J7qq{d_K*
zMwTI1((}9|rF@MfNl6Sz%GNp=Ff=c?y0JQ|S3KRRn;4=CR@FB6wD5{^MCG(ZP|=Aw
z6>*%WSdXe9Un`hbk;7*SK3B1TMTR#|QiRCtmoj|_pyCTGskn_VRonq-+i{%lL{*e1
zTESfv-{LzJ-$Q3$2^D#{GNdVhSjX$Yr!99yo?TW^#0o=K;-5`pk-98VBb5*Xj_D@m
z%@Q@}MTUX@*?A0S4tdV!?{R~=q4(r+P2J~4)wM_je^Smx_vy1k8dHBAH1^eGoj$DB
z964{04_hSBD2AcQ;qD>3fzw84Kg^r#<`vz^al0%WM_5F-y&gxZXEP;oC>@EEJi=U<
zYt$u{y`jzQd$K{T3O5fn7^ahr&NKpD5`3M2Q>W|RH!ZiMcT<kHdTcpknv_RLcN|W$
z6`{;>HeVL^8QLhTI)fI{E0hSSJY2VeC$xH|hCOFVeHp^8ReS9f%Ph=t$I*-Y1j(s1
zXJ3(G!h7tI-J8R7qjoy_O@@o~1JnT;ZTiIIR{;Gu`N;3Y1+rbVTBNm)o^3;qz=l$P
zz?X{ow-6ZGLhyGlx|?ha0kY@Fb|6A%t%TL%?RaOApqt=%@(!AD^x{(O2KEE|Q0U!m
z>TiS|;92S~gvNsLz|)^F9S_Eo9fW;&fcAJW9^65MVFytkZg1k}c<>3D?mU9Jjpi-9
z5o;l{jWcAoaCQeVA2zX0K!IOSA*9wlq=|UIKeCOsu~0np%)<>G!R<MY+kOPGzwx#H
z-zXoyr_4B7$aYbN-DoCFT1kr@QsXk^zl45#gSQ|s02@iHV-P<gg@+i%uSnxLMm!a7
z(P<l_=%e@$q5Mf_`Vo|x9Voj?7)er8dV?79bl)Ycw~2@Jh6yhK&8tc1B`zy?r|%_3
d=<x!bz88ezBTllOBg6@a64rJ4Tk<s`{{fNURb&7F

diff --git target/classes/de/framedev/frameapi/interfaces/EnergyInterfaceWithEnergyEinheiten.class target/classes/de/framedev/frameapi/interfaces/EnergyInterfaceWithEnergyEinheiten.class
new file mode 100644
index 0000000000000000000000000000000000000000..bac37ad789740e18b8c1cc0d6fdbd153d4071282
GIT binary patch
literal 301
zc$|HWy$ZrW5QJy_i;9JBp*CJ)mrhVn1O-9sOR|Y)l8c;|fUjoZ1Ncy)A*2y;ni*!<
zZ=SFF1HcS@2VDm}LQe+4LbHi(g!OonnMinf94jlfVVEe*yF}jDxT{UTA~Z7PfQu@~
zixRB!^eQUALg^DL%i5hB2m`}uR&dSk@3Y+ayi^GjMpe7gmQ5&qJ}P_qVocAnkc9cq
qRaHOM)Bi|>VaXDS)REYFXZCG}Kxm*;qeW<<1$?|+`sdOqdpK`93tS5T

diff --git target/classes/de/framedev/frameapi/listeners/JoinListener$4.class target/classes/de/framedev/frameapi/listeners/JoinListener$4.class
new file mode 100644
index 0000000000000000000000000000000000000000..75405015f75acff19ae2bb29d2a2e12e80f56925
GIT binary patch
literal 2880
zc$}41>u(fQ6#w0J+iAChebAPIh$GKF89+p(P@%Pj;%-~oS}ck>-M!sTJDpkPQM$hH
z{X{_!c?yVVeZ&tWP$))YNc`d#P4t6_{2_)I@!Z+nc3TQbH`zP)o;l}t&i$Qp?ww!%
zyY>@+_4qCyOVJX<GHlDo<Jg{u)*yD^i6BA<7oZL81?a#|F?34k3ZffN7N7^aBs>+w
zJZ#HDuXye*KoC#o;Tf^mQ-EjjTmhbkCP4dwh#(pSN55Fc@-YBC4}(H=NZ1)dG8}{n
zOF}#d1$!mf5*&tHcR+WRuVJVQMY-B<Yr{OsN0JjQuB(RbxZLEnqwcVDGn87@li?=a
z)ZGS#HI;L+tm<J1G+9y3P#Drp-sTPWal2dVGe}YrvLc$%quIJxr-T6!B7@v&l6{k*
zIS!|#Iv20Y*HgsVwrA2<DI$=xVaqdJ!eOlp`Hri(e3+XqLuqJG8_`r}uc3COrM|In
zn(?xeJD%Zoaq*H-lnXNKc7~cqBRuZvmMNIBOoKMcuqb5NF}2Sd8q!^rV0Aa4b{Ja1
z=W`x;iwuRexW8)&uAiYU37&)z${Itk%ku09Z_x!Q#hKe%EnE|y&1S@~9NmnCxjSG*
zCG3+iiiC{iSRrF2R2eVeMe-Hyr5IN?T9&~zQ^HF!UdAgD_RDw`uSs}a#v6E(Vvz9`
z-j?wW-est`Q}7brlkq-2kZ?f8hxmxN@To8~Ge#WR6i=h48&PgEtmtYEH8*uD)k;fe
zdsvBU2}jwry}7elNn&+d%4TJijDt8N<6|6V$XZn|;|LBD5i&l(QDQ>`L{WW;V-k+b
zIDwNAPRTfp&t#mzSqbN4e2%pY>#mP!y_ToMxT|PNhn7%0hbt<1bq9E#ZWxMdDUN1v
zMRygeU%5WkCtRPG@dYl(_!3`97?bfezF{bvHN7&vg-Xpcr&?rKmcgYH8Q@XR;I`W6
z3pzd1Om&0r(sOk~ZFRY=xt5(4PAkt$;bd7d)XX6$ze<IGp|)~bnU0VHHSQ-Tm2aWe
zEW~~<=SD2EUym`Y%`{62J&Kt~Qv0c7RZ+K1nPMt>b&e*~1eD8E-BL~}Lo+L_zG^o$
zM+R(?RE8olZ1)>6xeMy%ipr|c6va)JVem*Qu+rJ&40-xw9?GW~r}IOm(tzf)@ln@5
zYABe1=`Tvt`hKwOeS?Ha+RCg+8cv8@`dv!hN|6%_W;%!kX(XXD^@70W&myK{A!2i?
zl#FsI&qT;P<#M%noSRW9=-HUPO_XYDv1y92je?)K&y*=K=UT}*9prqJM?9DB^thd1
zsJyeQndfXaal^1=_LE=yw|2CW+Ty#tPsU1Tfw)7am3n)B|5SNQ+ik1q@|eHR;@gCx
zC``9UGd%8RoE!v(HPJ}Q>~V^hYM2IsTXJ^|x>*KkJC&_>qrSkQjD@-5Xfb|=mJnBN
z+~09oM$K-uZ7m@VfXT|4E*5-8qcb2=g)0iXFiz;Me{FT!T7=VQ#Zvmt0a#IyxN&Hf
zMgNsp1<Eqb8fYyf!RngJVAWTUb<x+UqA{0rK(|LVjpa!#)SwRVX9A7Lz-p*TEOrgq
zWCPr&z65p&*(HH-<eb27SCKmbi6K-ofjmZc!;dt{XZRVx@KqE{KxSyG`vLQMui&1N
z!f_PUPN0~9CM6{_jAQ-;O0%#rurM%zGJz0Jx+t$5$AWQGY{*Hj7nbE*#-h~x5*D3A
z?%1sZwQ1;k32f@+I2QZJ_hn&HxFqfQ{#_|qHUW+yudQwz4~*T~a*=qb!2$e1%pSz=
z{xjQWs|Ce09z-Dyk;Y;A&OCx%x*a1p3WqMn{WwN;$4TP^F5)D9!6~voM+j%|C(hz8
zoX6j|;IrL8JUZBeHCT%rLOP9gc#!<`Vjry@LVzp+*no#gR)g>H2p;wGb0d|Xjr6ZY
z?!TyzP=5;}$d#~(rV=(wXprz2CH5a|X_T<#CIUCfHXB?0yf>nWo&ow~Z6*YfXGRs|
G|NaNi*B;jZ

diff --git target/classes/de/framedev/frameapi/listeners/energy/CapacitorListener$4.class target/classes/de/framedev/frameapi/listeners/energy/CapacitorListener$4.class
new file mode 100644
index 0000000000000000000000000000000000000000..b8a727be23d694491ad0a53a6d7d5dc070c72414
GIT binary patch
literal 1377
zc$}S7ZBG+H5Pp_cj<$!bya@t|Qt?`lMdd{VQK)E4iWpHy{I<PY%hBVmxtAvWDgF!-
zz~~2mfIrGOd%YM9l8~n9?9A-WGtbP<-p^m(e*jp-^9-_>QsQ<NIo!$MCZ@9};%*i*
zxR-;0k`m=CZOm$z({P_5(-KZmwxk;}7*)@&^IFts*ddR7yykdjgKsJM))A)MR^By+
z-tf>4iVF;@RZH?uzBrbaY;_dTw7Fvkp>(Ama3$+)UJ*@U+M(xHlN|-JZo784!C)C(
zqg<A9X`dlo@hr)ZuiCDB6CKy2|6bG_@(ffxQ#kv=x0RhZ)2c)U{k2PZDvk&ON#<I&
zOpA+DamtTel7?c_zZVL#u_KyEzU-bC`KEknD`Vtb{QQw<2_nDknvNIPZhc3Fhn}Tj
zUI)j5j;qM)(9y4>fH55p@KD1eod#n`!?KPQJl3$P;|bPutmCPU4Lqa!>$)6<>A!j(
zn1|Ae9O?6|*zqoM-A-LAU1ng&#aH>EX^D_<W-mRSs=FF>I<$`|Zn&yC$D`18_@?iR
zwn{*EG58-h-Hos;iZMDtj&SRIw{|2=LjA}vb2$d|tm-l(yRFKYFiQV0CthKjcXo-#
z=tX-BeRi<xIy9~E%uxP5f<5qjhbRvHiyC_gEf>Y@N)B=3{F#fnl=d+N_3Z$93I#Pw
z0If7w%0vGGu7O?)X%(_lwC2mRr(or|Q}mR-BK0LcI7qUW4uWlBi1d*-IFDgm2VzY@
zGWv~TECGxNjv}yJJ^?#Hx_pK!2c-9$q4yg!hR>K(TYp@A42gb*jLMse^9~?Qc`MM_
r3yiaEEU{NH2fc%yaJUhlXG<i;W6Belq%}=n##=-e)CGEwF<JZuH@<F{

diff --git target/classes/de/framedev/frameapi/afk/AFK$Events.class target/classes/de/framedev/frameapi/afk/AFK$Events.class
new file mode 100644
index 0000000000000000000000000000000000000000..6f34f6f80973d65846faec4aebe391d6ab592402
GIT binary patch
literal 3471
zc$}41X>$}+6g@8soeZ52k`NXH0of*t3@EM;Fp0!OCK(_xU|f4<I!QA#-La=98aLdR
z?^Y>V^2N3Mpr8@~mGXmIS#E#Fva~#}yP3{1lQcC|uiv|U-?``9_wJqk^}j1u0qn;c
zwOEfM5o|zz1ovWKH3o5C1V<5<%b^H{k&v@va&|m|6Bwz%sC2kLf-wxp*-1H^lEVXX
z7?0pVJQTsh^6evXcvKFLVL*YVAgLfFu*#V-@;mklY>B7!*o3X+^t3+XO|)qvrcGpG
zJ^e=y(DR^S8qOhsZPDdj+s6c|`mD4ruqJMp`fwqa)a_9%nWd#MZl$#Bm}VPt?Hj8k
z2}U?Fqni#V>Y!=rc3)P@=XEZ3E*o!$w~Gu_%RH9VW_5eWnjvaeG;Z0Gv1B2WF`Sq#
zy<*eu`&i)SZuThWteH~+V$hq83sk#%1lmL62-J-@S}HT7P5aU|o+y}(k<-VFyg@^c
zX<Clv7?w$0ZA)=om;ud9XLZ|C)SI<Z8OBKwth0ooq<kL>yaGWHkK{1ZCG&n-o6%xf
z&76#lIJRL<5<WCsz@*pKwaki4T(5vhXlLF5%j}!dnDl++Pp>CGYo@%^OWz>Qp6lB(
z@5UT27*2>ABi({<E8UC0TcBpzHZ0q4W(BsEIrd||2fdY{#PHx~;)Fo`HHJrxR7OvS
z;3yr#a}2zBVMeTioznXad2wr4T6^T3QLza(sAxr6fv#c#lM1F(7&xsUqaur(3KN!s
zX%&ydR*{FL!hx-zpkfA32tdV?m{stUil_06if85U9L}hC9xo_(QN>GmS-~p`URCg#
zg4YGMhbVc0hTu{slBe|)&v4@sy>TP&=<Fu~l~I|J-65-4pmtJsJflEsbYUu4)y}NH
zg}K{M?i~-4C|(gZ6Qe{Kwl1etV6~C=pn4`)dF!G}A=<~iDE+pT6Ij2Hscg8i;V@8B
z3A3ltEyPo9hS>kAX&JTVy&-;m5Oqj%rs%3Ac>-0@LAj$+lic=3%cp3(1Z^J1u5cYl
zpvBhNm30qI3S~CfX3Hdm$m<tx7-buFchuRsQ?N|}NE11fLMU}m^~}e$y!o+xzk*|A
zV*^@#ie@^lU1DTs^Y|<Z=Uv+c;e68yxe2-^d&2d!y%h_f*tS;mEH)2p<JZduu=*ex
z8f3%ZM~%XDD>if7!qp*E@CQUXIxj+We2t0=Tvecr<0|?9Z(=LQ7SD@_I{<ek(FCnK
zv5TX`x`ZnJfOzK|Dlel-&{BOChq+ue2ZfIsKGNOZy4G9QrVq7VLgYO}HuG@~YdgMz
zkN{PUtLLCfHkB@$P2>Z-g*AAa>$8aA9dzSeeo>us8Fnys8@jL?QSymVV>@S+l24I!
zoL-$|-Q_B%_!r$m{Ea%?<g4Aor{LbbzM}JdN`wRn)dh-ri_4*TFY4#b*Z3;D^&A>b
zO2Zu1cFm#jWFTq_j{|t0qCVgueaK{fgnjrJz4(M5l%Kl7w$gVaZl(QZ_Ye|AISI<S
z#g|hJ@ej8wRI;DjmMUplsHCZ=q-ma#rbSAcLMi!-N<Jss^Hg$yjK83gFG=fS2qm{I
zr{s3rQ9?=cLM6>bCC&4cG%r%p97@S$D!D?o-%!c7Wc(eKTqUjVLnyhkypjssg#*5l
zoUf#fq}F-VyGXgqr#hdRSCB141b*Pv{So!}361!fK))0j5vs_ejXVxAXawtgmXb!D
zOGBVrXXPKJ@ow~#VAB$w&2NnGJK6j}Hh&W6ud-}<S7y`ag5QJfZhi94g4KN^#Q#d?
BU{nAA

diff --git target/classes/de/framedev/frameapi/main/Main$3$1.class target/classes/de/framedev/frameapi/main/Main$3$1.class
new file mode 100644
index 0000000000000000000000000000000000000000..1d175b0ec76b6b3f5f717b61cae9eb136d06ccde
GIT binary patch
literal 1530
zc$}S7YfsZq7=F%}tCRwhJ17@n=mtVX@Wv382|_Z&2qE#~S$DP-y3?hXCHq-^P!tn?
zfbl08^=-SrR4&FgJ(u@9@AF<yzy3J>0$>T7?P$k@3Kch1Ok%2sq?r!PU{=8$6^THc
zz?_141v*2*tC((TLBU-HZA(hw<Sg#G!eyAu7lmGOcvTcdJzDUZsaLrv^=%qbi&@fN
zF{SCPGEAp0hiCQ~;yJr07`pSO6tDbhK{$K7V3DLJZyVg&=Z+cdo5FbD9z*I<?$iP~
z)8_b+#&lpuvv{>o<S7!RD7Mjb-ge4*!9P4SJzYr8^cwnWi#LQ5y2WgUk@F!8>aOiO
zhS)Fzx7q`v^9Q`nDUx+*Shj1*^0x3Qc2UCs1~qh`OG7sX6)b4Dhed|unr(Zo=kQtt
zbh{H+O5#3E50V(x@DPs_Jl3!bvNv~T#KE`A>mqW?-I8_k({>sfRxnH@yF5({Q!P=t
zMnx2TOE~&kD0t&b8D)OrGAf2^Ekuzz1z8r}j<l$_O&1x4(wTgaD&6-?OV8PsB@EBB
zWmd%#Q0MfgqhpK9vc6L|pi?S|N^Sg<`imQes1fn_Z!9HWh8#pEUB4PusP8Nz3`)s%
z*11ukkkS`21Z~jko+S4qw+fzVc#anuhQb`5I%~?heJJ#N*lAQ$UgAce!O&4X-6`0h
zIP$iA=+_v&wMN?{i27lZ%c3RRRD{g7z;-={+ADjW;$EXB{_ij{d9iNh@6#N&tX<O+
zSp_fY=KoVX3}YALFhLbp>2Jl7$>8?Ts*S#GBtfl4t5wA41=N|@_h2(eh`pm-48b2R
zK^WjWdTAVpQ0PNH5Uv6?y5hmbY;vs-CeY~mh_++Ifls&+!zrH{a{NRmi-nw8gpN3q
zYS0NyrsXD+_8Ez{M^I)y;OZYdblkyM3y+2oT&FpX8zFKOW8qH2I67%HLXm5Tp7!Rv
ShIQn~YO2XHO_*D_jr1?n4~VJ&

diff --git target/classes/de/framedev/frameapi/api/energy/EnergyWithEnergyUnits.class target/classes/de/framedev/frameapi/api/energy/EnergyWithEnergyUnits.class
new file mode 100644
index 0000000000000000000000000000000000000000..ed01e0e89c5c35f0e264c2ba67b37315c3a81104
GIT binary patch
literal 1193
zc$}qEU2hUm5Iq+bw$SZ|ZE2N4wSKffTlYol18SnCCK%G1*kXL^g&p9wu-h!VB>fBi
z8((Omi9f&}Wt?4>pb1vgY<A}C?42_+=idA6`{%C!9$_zy8RT_rq!B|tFt^jVgUtZl
z)p1Y9eH{-3l24VbyypV(La`>Gy>cuPSg0zS4*hPO++$hqaAc|KG-RhHT@`#sLCtHc
zp1_l;MP}2LU9zY@1oA?e!Amx|txNMDbnlhd9-<Sj*((dAq-6~w0&fac$8DK)|NLBe
z=25fR;U3<0<R!V~%H#@U``undexU3&DUa-OFh}wtOccoeo|IR~uH)ODfT-}y^ed0R
z?%z~pHi{-OT<SV~8V#0y=lE`eUaLT|>_jOZp2@y6kjAXQ)^uVT*uu7sf`KAR26nJ3
z@c5thL0~Z`Z+4{JGLPzK)L=zkPNY({M{ZL#Xf%Ii6c}^<Bw(sV-bjV~HQQTc`AgGl
zJtTe+?HwOnPEYm5r8cfRNyQpAq4VY79KI=W_AEPFgTGAnf_<WN1@VbN40CLgVQ>cX
zY>nXpEMSqnzzr-#$sd_4!M^YXu@6^>?+l>rYq`Av5~t5HTJCgT8~w>>10=`%t6|<O
zV*@K}vs`JLE6j&iIpmD$1!$Sqh!ABsGZvyX+~n$WSjR1nY5YGsbzjyW`dVhZ!cT@d
PSGljX|LSW!WY7HovXC5m

diff --git target/classes/de/framedev/frameapi/cmds/BackPackCMD.class target/classes/de/framedev/frameapi/cmds/BackPackCMD.class
new file mode 100644
index 0000000000000000000000000000000000000000..e3fac79676d267f0120402f243dce30dbe0a5e10
GIT binary patch
literal 4750
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
b!SgaIRp=eJ2ymJs6`YCisc<h5+QxqY!oVx}

diff --git target/classes/de/framedev/frameapi/utils/QueryUtils.class target/classes/de/framedev/frameapi/utils/QueryUtils.class
new file mode 100644
index 0000000000000000000000000000000000000000..be99d53265acde73ca7172508f477f0ca18497f3
GIT binary patch
literal 1265
zc$|$?Sx*yD6#j0v=`yu!f^|bsWLlO%L6o-Eg~Y_9R81A5Z@29gE)FxzbV}r>_zQg1
z7YLddpMCeyKjH&=?zB>&HDQ`L=iIa3@0{uP!_Qv<Ea5>MIt&e&I07)D$R;p@*#zb=
zuZXE(L0N7na#O>ih9!nbLE6$QG6apxIzwpHsSAcwN!p^^+O7)sIj>rz87et7Zmn}y
zs&hvf@-}6YVY*Zo<{Ou9i@Mlp3%nuCmM5*I`K%?}-4{yCGen!B!CmfAY{4jP@g44a
znX8UviJB)JJKxq?+}<!No-6H*e5O}LrKKmfRa<>*@!C;3hSC0I7-F4X9G5|>wxm@T
zB&B;2K5UyPB1jP`;V~q38-LNr_N`Rt?XXC>k`<5F-mdY6A524|>1en`ZB^uk&ApaO
z8K3sYsBg+s;ufzsEw?5fN!4+xJDhptt0Rds3}gR+fB_nob=<}sYE{Pyays%TFbtfG
z&~X<<9rtjbVd_-daV*J`>K0v<#@oIAV^4I3HPR0g+AVqHF=}K=y^(Z#ZId_4;+^NO
z`)k@F+dqsL|6<iHPTmpTXb8K`FlU?w-R`19J*TZYnYt5;2_)!SRZjp+flf3<CzCj#
zjBs`z?2~UEAR6(N5eyR5+YT7QF!2~haF)DO@DJh<;>9lryxK=_Z75XE9w5w+3#CH`
zh%mgzxRNx6Z;0l?vvYfhrNcyC&Xhm={yDpc_(#eR@~ciFN;FEp7_}QmhUfy-U!sPW
zspS=_I_UrNgvpk~D8@*l`Z$NQf4L&glaBBp{|mTC{Uxx7OQZ|p^3h$C|2Xk0^bR6$
Zh+z#A8YVSd{e>x9^I@1G*XzDC{RgB9H*5d^

diff --git target/classes/de/framedev/frameapi/api/SavePlayersInventory.class target/classes/de/framedev/frameapi/api/SavePlayersInventory.class
new file mode 100644
index 0000000000000000000000000000000000000000..7d38d8340551d6c9258691b6bed80b784192b7ce
GIT binary patch
literal 4667
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

diff --git target/classes/de/framedev/frameapi/api/API$Warp.class target/classes/de/framedev/frameapi/api/API$Warp.class
new file mode 100644
index 0000000000000000000000000000000000000000..a805b6dce6ac76e7a343086314efac828c07e1d6
GIT binary patch
literal 4339
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
RTW8(a<ems>%tL5|?|+@{g+~AY

diff --git target/classes/de/framedev/frameapi/glass/Cocktail.class target/classes/de/framedev/frameapi/glass/Cocktail.class
new file mode 100644
index 0000000000000000000000000000000000000000..ba7f3d4c2cb4c7463a3647fd99eff510f4671cf9
GIT binary patch
literal 3752
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
D(opgl

diff --git bin/target/classes/META-INF/FrameAPI1.15.kotlin_module bin/target/classes/META-INF/FrameAPI1.15.kotlin_module
new file mode 100644
index 0000000000000000000000000000000000000000..a49347afef10a9b5f95305e1058ba36adec7d6dd
GIT binary patch
literal 16
Rc${NkU|?ooU|@t|0RRA102TlM

diff --git target/classes/de/framedev/frameapi/listeners/ServerSwitcher.class target/classes/de/framedev/frameapi/listeners/ServerSwitcher.class
new file mode 100644
index 0000000000000000000000000000000000000000..8a39810593dd8d4a93cc0663ce72f135201107d4
GIT binary patch
literal 2618
zc$}41>sA|86#fngOh|@XN&{3Wv_(w_bkt(4LaPv4NJ+RPh_<!jBsqj3VM1pnw0OV0
z1TSEJSJz6VuH~x!@Q1J9o2X0O=S&I-1Y1_tI+uO+<@@&D=VX5W=h4pq#_+8l&*61H
zF5!&;-o&^c6S(Zd6+gQ0mJe@>{iK2^KU#%aD`Gyp<HuE83t$>E0mN}#46_Onek3v1
zig_%E)nWiCq!la$5W;04c~{skD|k=A`wDI_v`iSL;ap)j7f$53wrc4cJjb`(g}!NM
z8@gd?NgBo@%M9LFDaRQ)5{Aj=${QJOE$NveNrH(|Rxd8=mLc|4q1Rb6YzD2d=b~Xd
z+~k(6rMb1mt@K^P$*ys0oKS5R%X!0O7<?Ki2DN0yEUr5|ZRE)!8cvj~yp|~!3WlTc
zEp9qmrdY}rG;tnV)6G1;Dx{JRvjy~ZeM{GhbfTpl%P{lgwOLv+JhL~3wzQ*X3rT%b
zvR81Ep)XZ79b<zp8@55RNz*Jjx?_|~3OjJvv-C8ho4KOQLV%bRjcmas_HqL#n?-$_
zTiSx0;-<qbJ?reV^V-s~r`B*EJw+HjmP-bIx>UBZ{F))Ed!oK<=S3D(^y8L-4^-U7
zhYD6yd<0!VMnx7ms;ezcRB)^kzhCcPyyZH%ts;*#s@@UhHud~|qa@v}3Ipp5itE!>
zP*73Ch5}PX37b>^6?Z^tHmH!D2aBwrtYQmy72H#?jgM7)f=?BErs8va!Emx+&QyGf
zuT*@EZzy@k>gqZK^O<#?B~X2b(x0fBQ(H>)vSSprxTu0tBB3WN>e^LfHYF$Wp6AYj
zyfxMIh$|hbt*?8hv^piK>A+J|7}_nK7qBeZ2GqKj8nogQ;NwSzlr8z<vt1`DEAbJp
z3{@f=k2JcXo%~K&FWT|ES+aOcx25V~#mG(BBUNXiaJ+#E0c)XnvDG}oh5D>zOXjMP
zFI)23YOB=wnrQ!6t(d@Q$26hmf&#knMd}!a8evcDH-XTiK<)Js2A{Fl9ieco!IQ2b
zBV|pu=lDHGHW1~*YsyV`xHhqFQ<8S{7>@!&EAg1jx}46`=dQNEt_peY|6c`a?o@nw
zW@#msh{tAErV{h9*@kcB0k0jReB!a>xhZkNaH<}Qt1r(;J=FMwvMH-V|0WdlNC#43
z+@<d3gyH!E)al)KwyPNv6`-at<(=2UN9#3eO`O3g`aqxv^tIrjxgV!#9H8AS?VD)s
z7=8%$BbtVzyYP7MfJ99gq_Le8fF5|!OY1&z1^N<@COC_8fLsmX1#(Dt6ED%3aQuku
zyfmkxo(jCd<_cPNFdg*-l?r@6q4mZ?_$vqm)e72n(aw+@*+mD#4$jh|li@MC=AvG*
z9hIi7QL*sd|M!mvl7zr^8VZg5Xrom(MV%n&3?ZB&T#JNAU>zjg2?P;FL^4V3p-y2K
zQNlbzYZacq5m7KY^e5pzPm&fo(P*ZBO}tX&^aC-HKB5%_zsHI1aGh4&zab{3U7Te2
z1)&{`?QI_;lpOKwqNfRhIPvJMawnDE5wAR{pzk232>gVui|`E+zES#35UNF7*yA)x
aIe(S*O@}y*RXH_-{Y57AWL}enz4#wVY|Fy{

diff --git target/classes/de/framedev/frameapi/listeners/money/GetMoneyInTime$2.class target/classes/de/framedev/frameapi/listeners/money/GetMoneyInTime$2.class
new file mode 100644
index 0000000000000000000000000000000000000000..07845ec9e2486d3fbe4f90cda8e3a1f888490b88
GIT binary patch
literal 3102
zc$~#nTUQfT6#h<vP7+3eC}_RlE!6<Zpw_CzY9SGgCIJkJ;&qsugptV%P9_xE+N*7C
z?akI+v_F78R##224_$rk5Ae0`zWU~J)$TJP6l!28FU?xnbIv~dzQ1$%^Y7n&2k;VZ
z`LO{Vf^-J35s?56AR53ybop>7fWwH1$q_-01`tQ08cB2u(j%d_8cT32fRvE#^WnHq
zIN?Ko04H%ukO4tX`^o5;0M6o^g!4k@f}iZEJ`DPx3DapGcmNq>B@9W>8T_NF5z1L6
zA7@}uhQ-d1o)5J#?24zklCjksPxH~zKpoK)L(e<h<aS<hm6Su=Nr*wr?9+3+oeb>L
zP2Jhgus6IQ3(=+%3{?>;%^7Oqy2+D;+#t96)Iozd!MLTV#tGHd#e9lcC1PffV<wr6
z7-~MxX}WtM?n65$1+QH&iH1caQjX{IYSwjqQ5{tkLp8HX%CU7bOQMVx*3Vc-77U}u
z(oKik2gfu%;^>wsiZWuT<J@Lg6}RlHGFTWM)*YoglQAg49(RqTmZTh28&0SrZe9{D
zx=re(Rx$)qR>9VImo5@sHaqB6;h(B?(9{eoPk|-4Gi0SD49hUkCgVkHmaz#T8C%3O
z2UCJ2V+5DTY2s9>H{RN5Sq4{$Z_CKTkx{^?jMp(HVO+)=c$31B@fI%2cpL99teh(k
z8Smn<g!d_)9(CNX)O6W4b*Rkg<74FF3O=L)pLR1jE8!y<ALFWwPw=TA*JON#&n0{z
z<4b(S&^UjUWn34*eT{Dz>d0i)igvcTXgO@<9g3#Rn~Fxp4SdV6$VGvK?__+B9|-mf
z0u95a8TH6(Lp)tDxUF=$jAI4UoPw{LL&4DvB}T!kjzyT*xd4|8^;z!BDtw}}i36&p
z5oAMcZM2E|7q$nRDr@Cb-Bc1p2&;|rOVGhW@kJ~%qh~3@aMMiOYc9J$=~Lg73_)5E
zxQ@(ZlMCfJRVa7zISsb@@Y5T%X@H@cgkomiQB94?xH0?;$qKurBGb9Df;9eZV~1_4
z<8dk{i7l(ZX7K6Loo<+=T1EhAN<(TsNqfRQbtuLv)153Y%ey&r4_@S&@Z;0--KJ=~
zgqsXa6~h<*j-FU3Vsq8u<wnS}r=mxt$}nuMRIW-#UhRK*6h2)d1>T(zMUPfgl59>#
zpeT5Brk}`=YNz<60;gWI&&983upu0YR9x_K&7y27H`Q&di+C6ABp!MeIV!oDPEQRR
z!*ieErOS)jGeRFNlg%+~UjXv!1diz{;AT3ZnsoaRc9c1RD$cd^pfX#5th79bc**Ci
zWC-d_b7SHu@UNK<hFDMUo{jVl^3>LfiwK}E-AaN(|1AiEywNBEFRJKU)7)|wtT}ua
zp5|ZSz3mD%6J1P#z<#t4ZE%%quobO<I}#@8Qig)Il0nZUGDim4f#zSpCQ((yqTu2p
zq?@=l311QZA_DQ2d#Gl(i2@B|hCk?1+<Fg78E)bHBx-`Su0m7{>xu{_w*{AxInN}P
z7g3+wR=c?l6Gb#6g^&I_Sg}>C7O`^T$xlf#v`X0aPCWVX>Gi7<n7D)0!8PRJ7M6<P
zTG!e2>3AE1>xx+aKZkjnN*#ei4}ur)fURbY^!2(88O2(nuOWyIDtjmPkX(dbnsIbt
z0EdvKm#TxKq#45)j^I67xk9hn8|bCDkKt!})ZRxQ{=#uQKtCShBx5+msxiP;<1BeP
z&DP-z3*#JX!3EY1jqL|_0dN=+Sqo!3c2G29@M9;vw7nDu$1c1~F+VJ?l8y4}{pnSL
z#T0mU)4vN#A7hP#Jx?fbuY|ocl<*3egm%B@5o#X6<Eej);QS)wVV?`vR|%#d@ExG)
SY@<<-cpFgqrKk=c!2b_kqE_?(

diff --git bin/target/maven-status/maven-compiler-plugin/compile/default-compile/createdFiles.lst bin/target/maven-status/maven-compiler-plugin/compile/default-compile/createdFiles.lst
new file mode 100644
index 0000000000000000000000000000000000000000..e69de29bb2d1d6434b8b29ae775ad8c2e48c5391
GIT binary patch
literal 0
Hc$@<O00001

diff --git target/classes/de/framedev/frameapi/warps/WarpSigns.class target/classes/de/framedev/frameapi/warps/WarpSigns.class
new file mode 100644
index 0000000000000000000000000000000000000000..f45784c243fb7f5971b94463fb21bfa0122e041d
GIT binary patch
literal 3640
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
Je2ZZ;{U2>(x-<X)

diff --git target/classes/de/framedev/frameapi/listeners/PlayerKillPlayer.class target/classes/de/framedev/frameapi/listeners/PlayerKillPlayer.class
new file mode 100644
index 0000000000000000000000000000000000000000..a768dc706f0ae479a5759ef8174533df889dff16
GIT binary patch
literal 2278
zc$}S9ZC4vb6n-WzYzSLk(t@;NNkudS!dk7gO0AYRK@va$QCo{{lF2e;Gt1fC;HmxU
zpQwMp&w3P#A3Uue{NP{m=<&`bg+PNX9uBj2?%aFlxzF4?lRy9Y^)~?5;KVVAtDSfW
zZ^iL8u65xZOm*TqZp83z9PeQ|hMRG`k6Ri(=t3MH#%b|(3^Q@eVlIYJ^_|zS5Jw+A
zQp2LsEXDA#GGEq^)sWM$!qBm6*DWC#lG!phDy~`MWxm%C%w1vBOd*XN4bx<MQ%K?8
zVi-w1&v>lB5Sew#oS`QxBwwl5irn2Wi#BNzS*K*$1=AI3-c&~XZQ(IoZ6Dbdp3fzB
zJ!8!_?{jxq*mgrATnR^>)G}mJS;w`EV!c`wzQOmnq*409zuyco$4!5GUg-n0(JDC;
z0Jap6(g<?tSd3P0MThcGR?#3jL;A&cWH^`i%~CaI?l$wkxLzmQ8ZQV>km9zKj&J(H
zk%VdZ*}y@VMN^jT082dY)ZG$a5GqvvNj4^T%so@b5LR_u!pj=gbbNw!4S5|K*wj$a
z@hLuI=*v0Ma^_|xgA-bGJYU1-I_}^uo#WHB8OO1?DK&hd;~usc22UeN$CudB@fA!W
z$)j{U4MiO#lyz`aXg>wauuW+hOVa0-a<Q<jLtsZo6*fca_wT3Xz2w(*x6G4e;U>9|
zNtIgCs{0oAO53jBMJ})CsDbL(IAi@V^d5m&E$;9Vo#e%5_|7&1FoaX8T>4rpW`Yj|
zvbet%v{TNMrlpKWQe&-W*Jw85m=T@c@N-NUx?OH51a5HdR1!DZl=oAN)2D73RQl!r
z?p<odQpKvNR%{7Va%4qVbvGzUqe69NsA8LKRZ}L$8C|GyiL_=#QRSwxM~9L3T_LUM
zu{%@*FWOiPofL0ASY#MF&i=^;R;J6%9_~{xs3Ey5AChj6dwZ@_CzOlEaR-Vxeg<>e
zv*Z$R-oTSr?V<K;MZ8+6*mQd~5x3!njx$Wi8P?C_*CtZ-WEW66F(LheY1esB^>i_6
zdup~yojZ_PYISLLueyoqyJbph(^DDd|1YX0g!UPCd5T5uc|_wWHB-P9dOin1txW$R
zb?ed78X|cJuh4jzW*Z2T2Dp&^1uQ-OGeVCLPLCfT62=dK^)QVIL}=`$u?L;##d&&7
zlcX7F_|iVF0)eFVp!WkKc#YQ74u2y`f53wu5lwXLL;DWhN{o^C5Z3rUI-el^5cian
zn>auh!%F54<T8PJA^j6V`_MCqbNlE%ob;$^?_>1sBQX{EHo}fp`Xi5UUM*k9B>E39
z5DF3r2Z^NV<p+_HBw9v^mI(rUogmK<C3lIGErRTl<u{a2GWZ=5CH*kjzD~)HViRv5
qMTt#d1!E+IRbq$fKcM*Il>7wA9S9BlMYnt=kQpZFOO+i^`sTkTUwtqD

diff --git target/classes/de/framedev/frameapi/managers/SchedulerManager$3.class target/classes/de/framedev/frameapi/managers/SchedulerManager$3.class
new file mode 100644
index 0000000000000000000000000000000000000000..cf0da77443fb329f72b749566afe8896be0038be
GIT binary patch
literal 999
zc$}3}&2G~`5dOAF<J34IP1^8Z0uAJ+5Lc873KT)1Ql+G{1m(bO6EBI0vo349B9Fpj
za6nWXcmN&>F>42q5QoN==YPJLomv0*`RzM^hp<<$f*U4GY-DjWi%J%^Ox(t17FEsf
z7`SVo#*hieZcyE3*zP#Oey8|UIN~%B_=#&zx#T0E0=qXH3n%h~>L!*p<vw<$8}2gf
z)E7-|^cm87z9Seec3deAqv=4XH+<lcrP%R@-0O4YYJF}@>qZ%@11W{t^LP*lQXec>
zxVl4qr&J_~)^!uPUdV@&E<c%<F?)WbhGO5<%KE?Qt@r$tQ_C;q(DMUVj=CZo`;LLS
zg$BwNF2J&oLz!WD>Ps;rz$1^(ggT_osOC%r2AUSOaF3z%*Hw8^sgbYNws0RU+Qy>C
zV%YT6$R0$Ki5uF%Z@>LKHoT6cOwQL@445Gwgk1drppkF<A7K`J@a*1khpvVA=msH0
zKB{;0yljulk=+Xw&8vMLOXDrWsv|rRiWfZO2Xelf+PUx=eN^c3oAe*BLP2kYq$T=t
z$b)uA(k|)RVm7zFfHl8j>2n-YAex~Vpp8|c<s=G4tO2p4(HOn!<V&z#Ar)t=6;s7@
zarq3HPcTU~&XCopsTeg+T-UYm6eT>1(XAwJj(#bQWhEk)<7TelD)BU~;X0-0;*5?J
GKfeIgo%$#M

diff --git target/classes/de/framedev/frameapi/api/API$Locations.class target/classes/de/framedev/frameapi/api/API$Locations.class
new file mode 100644
index 0000000000000000000000000000000000000000..fee2d2909ed3554b8e79690b20826f4aa8fc78d6
GIT binary patch
literal 4260
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
E0^|2~;Q#;t

diff --git target/classes/de/framedev/frameapi/kits/KitManager.class target/classes/de/framedev/frameapi/kits/KitManager.class
new file mode 100644
index 0000000000000000000000000000000000000000..c74c5bb588ac38c024094edf22de03cf673ee993
GIT binary patch
literal 3780
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
T?kCuL%1S^h*`Q#^qdfaRTtf^{

diff --git target/classes/de/framedev/frameapi/cmds/FrameCMDS.class target/classes/de/framedev/frameapi/cmds/FrameCMDS.class
new file mode 100644
index 0000000000000000000000000000000000000000..220af064c91f35c127111d15c5a720efeefab9e6
GIT binary patch
literal 7785
zc$~#pdwf)PmH(c5Cv$Hm7a9^?0|5pIkdTt$Raz1Vl7vUv1OkDkyxQK(+)M`M5#~XY
zT3uVwKDAcu1Mz`Y#ky4}Y(r8Cw5U}p>w~S^bsx2Mx7Br5*VnGv;^X{&_s(P{41w++
zntXE4?{|LZcYf#fJLmlJ;vb(m4PYt7JP6|PVg&G69iQ{y^Em9m7x0Amd{LnP)`KVU
zB@e!gBRY<1cuL2y5|rS$So}K=p2mQN6FLSxD8-Nm&){SUp2aB*r#+Z}$2~ZM=fvoF
z9cRVlD`N6h!QyK=UJwkvE<WE7m~U!$QB1y7f^+zL9pCogJNT}S@98)%Wcvs4dC7zC
z;~&K#FN@DV>G*+;f7bCYV)0*f{F~tLijE)ZcvZ)bbi5`O{$0m^c<?&j@ZiVziNO4)
zj-TrIFCG7_<7XcH9RH)^7XtoLoXYgS5~RNts{cmE{|fkj;`3V#zti!19rx&XQ%L<*
z2`=CdI{qj$`;$)4iHb=fmFML0AV5VLxjpC<*61WnC!LK)#Tt2ZD)C?^8Dc(0qp=>`
zDu{N{RT`CQG)|*3jmk9|Pf!EhA;O~8cp~KQO7GbdPWc1zSa&#-PME21Jm&8XM=bwZ
z{xs#H>j_0cGi5C%RJ86k_nH2b)tB;jgrmI?tC<(p#uHI9#bo-{p2Y1|IK`A@Hf6+&
zh5Q|<L^u}Wb$4$h9SX+?zSf}S?@pLeD`@Sr2WD^BA2q`<e;a=U?TT<LoN6G<uDTp?
z^^F8qQ#@!9u4)a(tPSaCmzCIJc10{9NIYOhZZs2NF?W!zR8Kfbm{XW@AR0{i*NRzF
zTXP4?qJ^xKP?Rvfs=AP3#qn5EJQ_7)K|*&`zJVp$?<{v%v7nWxABCd+V*WcWMpbVo
zlqQ*3o0UwOA#2S(E0$tZ$3-ZkB^I+1O%XGhv{+?-VU@+->h_k(k^5OU>LpCc6`0ZC
zRKLGHV)nBt(yL;`Q4)>EtbX3nEG*11!fO(>h;eMZ`8j&5P9)6!7B)uT#&l|9cVj#q
z3ntg}1*~2t<Xow6l=n~zGf7IT5oTT9vLec(K@q8=n3zS4m|a$cPcaiAwn}*c6BEXC
zq|CscHnUeo4JR(Xwv3I(c+RXi`b9{j|04djQR!4T;%^Nng<mG*prkb&ycWnrVv!jM
zo2*?4TO{LY!o>Uw(chc76xD?ouDDp1hI-CL9P=IFP|QrF6TJ1_zlIG8ipEK3MIhp&
z4z)_822V#kod{SWuMx&(?{%%%ZJ-y248#!UjTswhG{K;WG)be$26<_UK~t&1Km<{Z
zrWrIHeHzU$$VW4I6Q_n~e{wI!(&S6s5k57;x>nK}G>c{$G@B|lnq$yhnnzghw(ccs
zb@p&qPuSO-4qB`PRcTah(0r=V=xT!&P%UB7Nb@wN!x8p`Mt*}9q0gYjw1jV%&!DAZ
zc8&NfqigwAgk#-tgRY}_1}zt#I%304&(SX&6H>$z{r;Ae6_xkIpcS-IqXvUk(L0z&
zByI*ZT5V7h4)GmMSOUQrI%^8M_86Qk))=%FhcsGe(0X<U-}&nex`D3ebanQyxr6_t
z*VqudSZm*A$;xLJDPJ-j2(V?k(~(F&J48$Oiei<_J;_EH)G7?^>aild2DOQ?9*oCi
zjpIv_Oqq#PS31ZJ<vgF=n}=57F@rYHMiEp3-zKt~M(qY|qRkq082A}&F=(sMc#@B0
zl~j##w{J~M+%q<T8t?Ara2dJY98P8kl2%Hi8x88Dn^>|OB5}|*7O!Jis@g4_X=^*g
z+IHF@2zIg+c1Y278MKRT7N1)PRacsQxkosAIFL?SzHA`+a?IeX;#PrGsP@GZzA7`y
zn^V=C7qcc4ncJXS$<(OJpa8K(W7&sW!ht<W-%6pj2tB@x<&0glWZ}YvHg-ce)Wb#|
z!&nE?Y_fH`4GK|@*b+8y8~S)(fkb7{ZrZ~hP4=3%#iH>p13lnuH|5d|3lpzjUmK0q
zCX?a@U29-Bn8Vm%=FKu{A{6B=<O(_kuD`=3-q^L<3h)`TE}iz)^jU#4Un0Vc0z^4Q
zhAFNtcz!s>i`^#2Kl6+wQ;Bqd`El$|AH8Mb_+>|CTb5;2g|ck{nc8LlHe5!1m!siZ
z$g!NSN@c-fkxL^xx)R<vY@vChRhSH!+&AUYbap4V!4!=}=}3(kW$jIykz`9K7Ef4B
zW|FBU6tWEWUSoR9WV@A!hLcHoVN_XKr;plPvArrrTj#iD=~_7Tis)pvZQD9FwGyUP
zUAp@c3j0S{FCabd7?(reC;=<aXWOo8Gh<w45~B0Y3j(`&_vaDS=f`d#67CeZ--tM6
zYiho*0_nFqO(9s#=wVwaubLRG6WQ3vpB4)Z5>|JZGlbjh?X`r%7ZeQbOH{^so5_Z_
za4n~YR6G+JB{{wJC8C1GADiz#mM~La_*ufK#gOYx<>Z8%Z{OjXYCA7WS#NXhOoUS@
zE7ll~GpiM&1w~=5*-Fj)DzD^RzAk1kD7J|dvEy=FbNjRPX0nGHXFjQV)V`)EVR4SN
zD>>UIf6AS<DD+man{OqXy+oRiD^V=KvsrAt%f2EFyY0wuoLO*#kXR;AN#n`gFeYdh
z<#y-cntvDb!d*syVa0OE%k9pismBWJu@aeXP#3|pp1Tk`+%jh^sjB{eJk7@qM<Pc?
z#4`C<ZJ!xQTN}B_m{_$vH`*Nv-sXRsC&>(aQP8)Jtas7~o}{@i>%^Qq+Z<2Jhek=S
znMhihS;5QHEbz^_qTA%o4b5E3xmR?%>n~!K#cK(RU#}vZnsZq-^_Ynct_BuITK%Q)
z1sP7PYHBLDARY>x@kAtO{}Um{{1VF)r6X~6x!NM%!TglrcDSOdWwhiqK8FK~%8?Zj
zwbQk3V{5Z~_!U^LACV(7ejMc(m9xSKzh!oDX>@lx-Bo2(Ykn(L$YPj@0D@3qp&KE%
z;1PWrz>vE!3HjZ{uuMGC7#4x}&9;}n37&O9;a_0-{1c%0HBUpSDN_gFnm>S|?8yBT
zQz%ICcOvfxD)^jfD8_V@V+N0WNXa$H32E#D<Vc*z;Vha?=e!Dr;>UFi+EIoixw<8G
zHh=qZyG^NG&sYzj{_5%h=t7d>1L}{xE_HF4M~q?CJdctC*k1D-O6rQdMP<ei#wa*|
z%3~PoEgHa8CsDeM@#9XQtj;}%a<6*`;}y7`^cJ1Ogl#7<aS)RRFuBajpFvFF?*OI_
zp+eG#lcvd&8tjv<wNG-mPj}!9Z_yBZ93!VNbDQcQXLSr=wt`NFO{HYRBFvG~xpKPO
z<{HS#KhKeW!62#zP(6tGEHjUXP@^C-yjlU1F31RZrHa(bBWK%3R%DO#J4brFMT1!A
z&@Pg+vuxU_c}g$NDD99gk)%^>((*jg49QYKLd}wdR%TDW#y*)eugkT#Y?<V<Oe%hD
z*>$c#EFVCfoYs%jam5Jjc>Buy?doXT8!q0yN^XyOT}6ur@s8zghtKNCJZj7`8bniB
z^8nV==>osDuGp)Wt@9QSV11qL)l27&!{Gt6@VJ0ayn5cLhq1KI%|^K4?Ygm5N_y0`
zcVE_+ZH^lQA{I9ghQJT(dzQJge9PLI*97+fHf0#{uFaW2hcj@9k73IIwmL%GI709i
z`|QTd*_RjG-Y_mdjt--ut|&Kb++u|VT<m&MeG=vLic+C`AJ;3>lpPZ8RK6!53~W+g
zX1Ez?3HRYy2~W`!0ck2VNVtl2OSp#~mhcf8lyFF?5K!=ykoih@Uip!Puc<`>s&4f@
z3GY`=OL#_oNuHyMd_{NRR?b(|EKLpPzXh0sS}cMe%drq^dDM=@Ea6hlir27&%W*I2
z@gP><QLMzL(14Rzg;Qw6H_?Q1Sc4y89bU(J{1PqrEuZoxZlEHxQYqTV%O0JIc3O!|
zv<h2kGdk%e+(bcar!aQV9^69jhDrO;MGqiAA4QNJL5QB<*ZUFdrW5=oA3}`I@e}<#
z_R=dz(od11-y=<b!aijxZd0bAPpL+~avg408t_hKJMK_+;$2D)-lOcroywiKOSv2G
zRUX2A<uSZZc^vOoj^J+PySPU=j}NeC?o(dI{mQF&KzR)hsxEv;b>m^R43DT@JgUyX
zV`>c!sCD?5x)lf2oAGfqgiomV;*;wA__X>kKBFGQ<LW7VRy~6+s4w6N^&GyazJ%j!
z^)IPEz?aomaYTIsN7bL>DfJh4T2`E&U=rKgz&r77t`>8!34eq4aD{r1{b7$@$98+f
zHY>-Sa<rdop^ZDj6-JI&OA~kDy>PRRtFfOerp}ty;e9+RX5C8ge%uW=ou{St4%TH8
z?qScmS-XgXJBUhWbPl>Rdc!%x&00*7T#7_h%T!4o-G}={{o~OC_<*RPJo+G?tIE-X
z_z+jyhnVy_Ot^r}8b16cX1|5CV=rKXJ*k;L>jDBiZg>mnMhzb^B*lJZ;dn8d%-lbU
zhnX|iRocx^V{Q+fL?>U}n`8#zLbt7xVXFf@4xH=2r4HQgz(o$Mb>I>KhYK~X@w!gC
z4uLb!(cvn98JQ#9Ubo2kywxp|w}3}Uv;!{L4s2jo0nc!QaT4S3EWCVKX5utoxHEjY
zp5qJkJUi(uUzV@16TXUF_!_rBFL3+wb>9CC+`$)XKVD>Wev8fbZ5b--S?N2N?_GF=
zLxt7PwkZ!~9KfSTZ3pn^G1~z=vK>&&&OX3<i|{e0)v>u9WN!A_L0%JXDu!|aAq^j&
zhfm19>607_pTZ%h16nKD0(0#$a~wNPV&}H9T_<q!aolnYx17YSY$S64UB{t4mF<zn
r%6*fV{bWpFlPLJK<o+4Fi{TVrE#+Hr2d|&O=V>9s@8D@_MDd>i>OpwD

diff --git target/classes/de/framedev/frameapi/api/OpenOtherInventory.class target/classes/de/framedev/frameapi/api/OpenOtherInventory.class
new file mode 100644
index 0000000000000000000000000000000000000000..884d1fa04b9c6925c15e22ddce4cad2cdeabd43b
GIT binary patch
literal 8289
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

diff --git target/classes/de/framedev/frameapi/queries/DeleteQuery.class target/classes/de/framedev/frameapi/queries/DeleteQuery.class
new file mode 100644
index 0000000000000000000000000000000000000000..17977381e10f50d6d579a7f9953030f5641799e2
GIT binary patch
literal 1447
zc$}3~=~B~B6#i}(5<&`C7DWY%f_4F->{3LQ7QrbnQkKzwX?ulWXlt6H_#FQB8FWTK
zWX1>ZnH<M+(^@JmGdP*KIro0|eCIn$^7Hri9{@)2T!9}05(X8xFwlr=7!r%tgok*f
zkTon}M1hO}8KdGoCXjI%6EY?hJjRqbj7pf6@Pxr@>nW2n_!E2jfv%Z)c1KIvmXY0w
zGBmu~<rXh6w3g7KZJ1iZDA<HGCXJn}ZWk?b?z;d_*OJW$x@jY8*fR_r!P*O<Ee6j*
zE<<!J2_wr_i~A{VZTwZ2OY7#AZW&@<KJ?hT25Ac?GF*FY>H9px4@!ofH?+4!ZW+9w
z#kk3B{(^RgB*E)s#4uA&!T%5`{C%EEQ!sK_2DhHg5O=C*nDlNBhUyhla$s&Tbk)G~
zC5UeMlD3|Hv!dsnB&n4YDw!)<X})NPq+6?G3<(+)U7(V-op)f)vh+jI1{EFXRMCcZ
z2~SnbVopT>y$shciO-<M;)(c1Jg~UFwh~Y=j|CMm#7TW%dnvvi4^Wzcxz$)e!lH_2
zSW>Z!eum&xOGg=;2VYC=@w83#3ySVH|2ssYteMP(VJUe;L$7F>^n9L+x)0Xv<>e*z
z6pRnt3A)VCUst#gQP3R0o5Ey}3p}q|x=oJL!K!gz$eAW7qA`eGMFoYI?Oe%5FMX|k
z`lwy>P?H>sItFTxW8Z*>>@M7-^%k9M!cC_@NB9IRd<NIc6S$Ay2}h3L{o=UXrqxew
zrL_qy4skoW>7=vdj2_$p97|w~9vX^rh`1vL@P)s^6FEhL3)|t(6>7x+yNS4`iqco1
z^x<xq@?M2<woEC9Bgc?x*@9?5sESRlu*ns+KJ=H_K9*}Rbq1NzZ%jn|$}yTqu9sfh
zLiQ<ChEM2>_<beB<8S_k76FrjRuSLr#P5Mb>oCO`p>mB<{Bepnfgwy{4ACl0Q)Nvu
X-M)_pq$TL=*e{Gpq@MmlPF9gW-1I&@

diff --git target/classes/de/framedev/frameapi/api/SaveEnderChest$1.class target/classes/de/framedev/frameapi/api/SaveEnderChest$1.class
new file mode 100644
index 0000000000000000000000000000000000000000..e72019aac844f02b56d7e277e0f48b784bf6d863
GIT binary patch
literal 2569
zc$}S9T~`}L7=9)MHY`iQv>>*KX^WB&>;gr!rPe}7C6MqHhz07$vKe4WvYYO1BGiw1
zJjV<Ff&7AA_Z*AhIeNVE!k^@Y`p$-8sDY+l>^n2hyx;S_v-8JaKmQ6~1m85{65bQ!
zhKz39lrf4i8Mp9$0Jmj)fI9(<%a}kcfJqr~+-<>!m=Z`LfN3$#NJz>^VOGMNj3DL(
z$3hDhkrrf0kmUd}0emFb?@3sZu*%R}*7Ci)%uSaelC<nib-k3!8LsMKYB8_va$BAE
zhH1+%;{qOIXmYm<r*}{YWx2XxYXzR=<;p}W8mjoxTA9bqEVpA@-0_5N8K&XhW>^l_
zEmgNqkqm=BW@R};ThcK3Y^ku$?ImqJPe?Fn=~_Oc*@jpjfqoGKgOV^!vX<8zhto1z
zuWP+S6jFm-GKq$Tbw)ZnlG|EYQw>W^%*A(fUUUu1B)(?D6kb~PE<>m~rej=9Jev`F
zYueTHTuLi?u6l>HMkmW4r>&B$^Sg!!;QUF4t_jl=ecaUZmSdQkDei7rSqb+Qe2h;N
zyn&E{*U_WkGWr#Kiq9ly3f7??=}N7n7n1)fl#o@xu|a0J0QCyEsbEWh{^jMwqy$63
zHgXd33JNe4SSXUZ__4roTnZk*W@z^^l-JBnHSOBurUXZUixNrINS=bSaQ1WTP!1IA
zip4{Gq2Nn=MaqN^q0IPVY-)TlJUS9#=&E5lv=qO$q~L2jqKd8id>O7*os>f=v!y(h
z-h>A%mQ1r!NIhqtCqrMICaFa%Q<OBrK=`F9U)FS;JJgYb)RQyyx7R7{ThI(sO%b75
z>^Yl*YI~ErG0WUAHW{vmPuwE92bXM3oTR!zRjZ29ja9>BLVZaQikECoSXQ2EwCD&Y
zpRcL0$m*${?>Z0iDiu1lnc;X17T+-(mwLai&XiYTu7C{PCu634!`(d+q2Rhs+hdSO
z%PhIYaDjCECk849e&pGW8X?w$h%_{i6^8r&Q$r1%RnXk}HrK`7K6*y3k2|5FV3Maf
zUBr3gp~!)}VOxa>&EcaX3?sEp^2OI>Tah?j@6KGZHJ$R=N-<aW)s=7^Y8rK_CvvH!
zQqV4KQ0lLSBWtI~y1d{SCD|6ITBbMrLJ`rmExOG$_u2m_TqF3k8u`c|L{EiodOG;p
z+r@nj&`6iNK<K-SD<HRN7Nd0ojcxtWr(pd9PvPtT2@Ov?#$KXL#0cEMn?yT3;WoU5
zFyPIEO8TuKg8qs^HiSk`;a>lbU<dH;qcPaD4`~nI2LlIa-h&wo1ZCRw?W5%o3c~?f
z_mE>r!p}Xw)Ak$M5AaIzF#@T9eVmW}j_5JR1%^X(FjNE4Lv#xGRUaOsGZ<+61??*h
z!LIa*Klobu02iN-qr;fR0=<D6yby2V9MK6{$8Zso7^L^pFg=cDF-=@k^e##ugBh$M
zi5$J4zQr8Aqn#hH<fSD<dKTeF6a$o?Va(%gT=UYlca$oXzAiNWO+r2igA#_oBn<oi
dMARp|xbCHU1n<!3r>EV!=%blTIxcyM#y^eg&s6{b

diff --git target/classes/de/framedev/frameapi/main/Main$4.class target/classes/de/framedev/frameapi/main/Main$4.class
new file mode 100644
index 0000000000000000000000000000000000000000..030fa768e45c23b54532973086f621a9e1535dc0
GIT binary patch
literal 2451
zc$}41?N=0482?@O<+8J*;Oe3X*{W2#AdZq@fmwiP)Pg1kDP_&>-d#p!XSUf{l-^5x
zuT%M@@<Zq37e9AW6gkIZee6%FPW0Rv3|J6OaOS@J?sM<`J-_F9X7-PN9y|oFA74k%
zh=U56@UntKcqNKg(H%t(dS!E%qb~}MBT*d1YaIO%bmH|IyrCeC0ggdAKNiJtys6*>
zh7@eTNjZIsV_3mvdFTk<mZMWOI4%28dCfZ<?{b{sc#k3Mjv3|Vy$p$TPH1^YFN&O)
z@CSOy(2BZYX#>=Bk?ldlGTcK9yOL`er-m7Vy>?D8)TRwf3|5L6;hfYnCLyu3oz=}@
z-7(~R9t=t%3~Ik+38&Z8%Vj~+ooigwyq|aloQg$lQeGMmmdmg$Z94@mQyCvOT#XRJ
zoz(igj?6>Zv5GbB(O59*m6%*SXFF!DYH>tjw77oA)wAORddcI=@xCWyABWD7;m9&5
zLw3c<iX(<}DIyu}Ijc|Tq(YySHSMxt6$XSmX6HC^Dg^Q>w&Q6P38Xj*D#l=NoK-On
zla5zWgr&kpiJ`8VkBSfA(7h_kAeXl;_xQM}PYOpx1rrS1_rJ_>PQ`glGHjB}w2Et(
zTDRlqlWC*us`wBeaeS=e6MV|?nTpTxg^Dk6LB$kO3|qWSrfwCqA=e>ydMbvQ6GY^q
zip$dW3a%2H#P7GW-KLqCzcq1Kn8Fpg9V)I#qwDyJQf{r-lGh8@9m|{*S#mVC0G+5<
z)_h7W_|oqRM|W+992{LK!gbXcL*wXb`Lca=niOZ->a~kS-J-n7Cl?=;^<iy(c}Q3!
zRo5yOUFm9lyGEBosnZM_7ah{$bws2fTrW4Ma$?C;dO;K!TXJQ?QiP$#_)o3+B^w^A
zNSpYWULF+ZU9ZIG=Ah+GHb1ss6dkgzB@Ss@&xxETE-{HGQ!54{N|v6;hOG3bs;sJ`
z5Xj~W4EvU9XXTATg?JjarRAySG+B7Pi(%TS{m(5_=fupH+E=MLxk3z<tIK`P(&h9D
zwbiv^k@^nOX1ep_WQlS)LBc-CPFm18O{=ZT2vL$&M`)fm#hgTNDRI5fEDxa!ao7<>
zdxDN=U86*gNJx&33erhkI+f{o+!1->Je{bQN<tP$+mp3i{#KD}UE7DKax)GkR#q>&
z1EO5k3!=(_$EWqv>$H)+sgzV;b#?L$OJCb{^dzu@(490oM01HKEv<LKTJB-pFP_aV
zYQtm$b^*;auJ^6*44wnLkvxsje-bJGEcQJDh|=2ZeFSC@WJtHpAjI$^ZqOji@CbZh
z_Y7(n2HPHX1OpwRcqkscg;HBQ)ZQ6x2+ttG(8(M4!;YFjM<gDJ*W5z7fyX25ol1l9
z8<d+k&~k@}(sKvVm^zL1kFen`YJH@(L771v!!$NdBX$#toNr>7im=;rzfOgy{pR-E
z_$)S`x`+6E)K6neY%4X>Xt<AUBhvYR=X^U<a_J(P*d-ibmodz);0(J;pO|a7&aUGI
zVL#B?PwZR#%)Y||cEb~@1wjnsAoZ;z(gEn$jW&|9i9Q~Cpm{RR&da!$o(%Zkh;Zzi
zqo{;A+G)t~JjZ@U>d#T=l%*iY3mhGC@h|kxA+*w_5Z3u1@F(3EARaQPFXAQYgY;{u
S3(wLhMpz^KzY#(&A@VO!#fhc>

diff --git target/classes/de/framedev/frameapi/managers/ItemBuilder.class target/classes/de/framedev/frameapi/managers/ItemBuilder.class
new file mode 100644
index 0000000000000000000000000000000000000000..f6ad9d1ae1e731ad560865565735aeafbdffa6ea
GIT binary patch
literal 4595
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

diff --git target/classes/de/framedev/frameapi/cmds/MoneyCMD.class target/classes/de/framedev/frameapi/cmds/MoneyCMD.class
new file mode 100644
index 0000000000000000000000000000000000000000..dffc4409c6eaf57aa371ea10de4c35f2d2b5c817
GIT binary patch
literal 11009
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

diff --git target/classes/de/framedev/frameapi/glass/Glas.class target/classes/de/framedev/frameapi/glass/Glas.class
new file mode 100644
index 0000000000000000000000000000000000000000..b5a5e308dca1ffc8974531804e8a9bf97bb00286
GIT binary patch
literal 1456
zc$|$?TTc@~6#k~SrR~xph!(jQfp!&E@h<m!nk?{8f{_=qZI?RGZku*Xf<MJSz>5!R
zEJRIA^uY&zlzL{i6hcsVIdf+AJKy=vH=X|a{pA~ghgc0EiaQGK1~G>55IoR>h~S>c
z?u%@q1rNdmd?YrHMR+2@QvrCU;JJcH249uGu^3p2A+W;>1uMtkw~A%wfDX4Ag50r+
zX~)d&F$@@`N?y;@_V&1=b9>*iol@mMPn{r$E>tc#ykxIgj>&NQVtkQ4$|8ZHn!psd
zxidq36RA{ki!?2ka-=D0aNAn16*E?4)65j;q}?cG&BB&h;bPx7^f|A2m0{4xS^7@J
zELu5h-%ZRi*YgFlTGdx6Qm0labImNvQnG+S;nih#T5lpr^ZJAdazjFtlD$;nHjVDj
z)Odlci6@d*Fd<#4RkGF!7xIFl_xP^4Z>s3RFhk$}>lI9?n8u7i&#LIe4Ha{kS8)?D
zQuO1{6od*ER4igiMH{ZEXcwUa*HtWIg`xivD;U~@AiZGPd3__ZYh@jVjx)N}OvfUV
z$q04Tm`|r)Eo^LV8p{lw#sw%EIhMHagD^3ix15vPW*GUGf#-h}@yk&Rk*eh^@oKqX
z9<0-pq%UEdPL_7)^75{T>RAz^iK}QxZex(%OO#%lpPmdEO_@h{EmyKzu5?3krTdXc
zMi+OBVmIx+!v`;|bJ{VO_7$F&AK^WQuMWSaeS-f8fjSh*l=ha-2zsD(*Adcs>IiE+
zZ=v`O;q%s^ejpAndML)xLNQ9bZBj`u#RO>?BQ+DGWtP<R5@NvZi$3%NG86il%tW1s
z5TN-ye=rHJf<Z>_ot8hMle_hZg-YTWYK)_UNeVwHR^Q2~g{FW!?2>&|7trWS{{a|o
z6weV_e2a+5Lt?^{$y}C*RNPDR^`VujPuU_(wvi^=bb~Fdk(sKX3ZJKnlZ+vRNWv*q
zxJfliwz*X4231Vl!%sxT#fbC>tuI9WzG=S8I|@ZwuASkHHFyUkmUYl!Qp(Z(0%Qjx
A4FCWD

diff --git target/classes/de/framedev/frameapi/managers/SchedulerManager$1.class target/classes/de/framedev/frameapi/managers/SchedulerManager$1.class
new file mode 100644
index 0000000000000000000000000000000000000000..b7937fc1a42319514f2ddf2a1f3fdd76aef46ead
GIT binary patch
literal 2363
zc$}41ds7=#6#rd<Y#vKVX`!_$(iYo5APcRJDu|X)DmJ0DX{q3IvwM>)Y<A=BhEiXx
z&#Irmeu6sw(HWhQhs-#RfBFgRS5ZejcQ>ISfKxJ)lXK7O{?56-yPMzt`S}+BPve^i
zdhlEnPvT4j&*OzCMllw{ix`jLCA=)eSqT#o(osZkMu^EU&WYbC5qn<3D`89v_0=dY
zAQMJbEM~&E7{;Y2I`Enhmt)A`iio%x#VoFc@p=q%n3wQ|gf|)5yprMe4Koa9bgmQ}
zwaj(C6ew!NP|B*M7P;dpIjzL?s>z*fU>T*{F~c&vafZ{0y(ah1GPI^`oilV~42#cH
z%X#ixQS&BQIy1JWnzO27h;_}_Du6P`)0V}Zw5hr-r{$?VZrnFQxI<3WBAE~%LZ+=T
zbY*O(sN}1Qi-xC&-95v$D3ZAX&4Rk5DyC``m7M1oR*@X-IZxFVvuedhC*duIXwI%W
z8lN%*+OFn}Q=$kpd(P5K+od8|?v-p^!rL<5K~hF9j><TOq=a{6sK`suWayyU1sO$@
zXb%|%7Gx~KWQaF|VmQ=nny4D4&K((LP`}|+-nLDyS~6@@WV{E5;lK`k)4`^$+m5Nr
zaN$X)%2>j6hL+T_jAh&qnlIiLfJuCS4<&pg<73>EaSNYF_)NwZs4yJq{q3%rE>*2X
z(^d&e?^(?=mQ;`HM<skI<2Jq`=I!+e8ICu=cI$p+!Z%#5T2_rm{y?gpVJg!ecT~@&
zj#GQvjbWebsm^9qB1B@x3R+orm4;T+*-2uTR-l6!X=ImXTLq(7b^K8)1!9XLD3fk9
z6Ty@{rZ7lF?p@$F1Y;BP{h0^7=eQ>ryTw3sFg8chooEcNkBV}nlIqUzWzWAX^K=I-
ze{rxL?{n>9et~OZhc>lR;g-%Yl-Pb{`nQ>C?4-o7XV*Erwe;q7i&AeB0ek6g?Npx7
zMJT9V=fp!npvwCj<{a>c@KB*^;sWeery<9W6U|f3wB_xBZkpk6Vtd-;<fM28iT!-$
z1pPOJ`BthPZ?*|qa&O9}2Tn%Nji9#DsZ+7IC}vwO4J${dAsC$8T2!;kM0Z`OMWusf
z5Iid3Yf9MVju@7bCDAt}OhP*^m?UpqietFs@Pe_-aPlFyWr(??WV!3orQ2nQ)LhU1
z1EYs%54}+V7LSVuDrqhBJ%;08=p${M*1{4UNd5#iu!@!+{FtXmwowdl5+_J@2T`=@
z2YgLbqxS&@kPK?EG+A58cmGF(LMv!p$0H1x<T~0I?%+F8B!*uR&XRuvk-1ew2Uig5
zlu4|heFgjO;N}K8=9>KRx_|!~I-7h4>b`@wn><~+db%HYR&i)%Xa$D}>!U5W`|s5?
z9I1t_;V}{Xco4jfCt4sz6Y@vX1Bqlm4PgLdG=O^;#2QlAfPz0T?2oLMV(-yN1~Eih
zFTN$e;*aruZH&Y8-G|WMXqPbZ7ry_Kydj+O58yQYB?67}89a*wX`N*2LGYQyr}!L^
F{{Se7gU|o~

diff --git target/classes/de/framedev/frameapi/queries/SelectQuery.class target/classes/de/framedev/frameapi/queries/SelectQuery.class
new file mode 100644
index 0000000000000000000000000000000000000000..2f3f6dca97dfcbe02fa9eaed2494ae51b05e9178
GIT binary patch
literal 2520
zc$}4$-%}e^6vw{{Np=Yvexwvi0ZnPakO1*Vt5zr$LL$)sl28z|#U)u_A!O6dhDz0O
zrjO3}(l=lF>Z{IJYVC}VKKM5|>i6!(Kp~ka4>|YTdrm(0o*(z_U;q662Y~CS`0*N2
zGCuaB38@wg;1eOzLd*-XAjF~&pSEHN89%kGm@dn><3|7~1uJ4)Rq&Y~YgkwCx$yi#
z!CeLS6l^H?Qh}ymQ@G`X$ji`WY)SCi+GatQ5KQlC2U@J46}Mwq+cJvV6B6W{S*Yw6
z%Mv<VbHz3av9wXPX>7?F+eOW;Sp4_3Q|8IDv?>0@_h3i2bmC;w%Int5A;DE`x}4LC
zc{)mv)+MwSjD5pi+}bMZHdj&-0?tatd=NJ)MXvcKjiO;sNw^q3yV=N!1W(+|^Jwj9
zqo^-b_BVBF`TtPOoK{%TEJMtziynK&;K3s4ydK-Kw0%9VAGnHEGGg~Dx@G9)SXM9S
zIeUq-LlKUf9tl(Rj&L55*GY^7zy4K;2`U>Vsm)q3FX6*F?DccOTeRccdYvpv7!RjX
z=YsgmYAqD2R)Vqc`54~Kicw%lUEz_s-R78eOG57%^NeevS0HO^xxIO<<P?rq!0BX$
z=FgfHE2k$7QO=GNJC6&Pic#!HxNzL3)0U+jie^=D1%oPvgm?pC6(fkKhzjvKLNW{$
zyVz541J_jyBP5}x!SNVFHjz%mmqRKF*k|L8$|$NZQDO!|$;{$BE%zZDL#uO%OoA|P
zXnJ9mqd&BmnN4IuGi#i9Letr}u+1jKD2LLi`IL(-tFUofLiklP&uko@cX4x<>n|<2
zA+X=V;@Y&me3L~R=JTg+nG2a1;YIanrIIfCbgb?jXk5pky2ls$mSfJb?+BIsR@O_J
zrP(a%Wcb806E_PYLf({#SJ{|5ddkK_-3gP=Nx$gb#-~$k(_Lb34Df*lWIoSq2Wm~C
zUm)SCqhI51=+u0;>c?(!MmCf)Mx9Zi?<mG7$2t2B&9nfq$TLWh7ie00hUTa69IM_4
zg--}s2qhAIik4p-V2pB*K%fU6w4xm<E~AYHZRbHcxbY=!(u+6g(d}-7x9~RLXd)c;
zDBj^`$URJgKEf*y`4yh%bNHLE8u_`lmESQAa-*v!kbxR9K$MHTQ5WfLgd8JsyaDpv
zD)PM=@^%%;OdO&0EbV>xaPtIBsnL`gZJ1szEkmDXj;hG38tE6gJ|?y~wpn-?h#yIZ
z8gl(>RJ9tm&~CEiP1HZY#2J2{s9?XS;A#F6`5E%F4fvC69G8EKn#-T6^5?4AP~8sc
ztH-}f{yp+HPGsdI|CYn&$A-CesM1)qEg!!?fNj{8jt1M0&>{LF*!dfR)Pon?g%%F0
zqPow~CE*FWqrr==#T)E)U4>cw6NAxUk84rg!S^GS;H97F*jx2do?svvyzH9gBlHD3
zU0tER%6j*U*qWW#lIWz|VO0%u@r~}s9vid3Ygc4NOh!|pPZ{%kFjrBb=K-yUTzQCZ
z@iiXd8~nfvc$|~R)to5!9@Cg%F5;YBf%k7DWz25y_b(TlWF)AHaaKmMSrq>xC*^bh
E0rB$+wg3PC

diff --git target/classes/de/framedev/frameapi/listeners/money/MoneySigns.class target/classes/de/framedev/frameapi/listeners/money/MoneySigns.class
new file mode 100644
index 0000000000000000000000000000000000000000..5e2916cfc25dbe74d443430817363f8b0456ae42
GIT binary patch
literal 8243
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
L+*jdTqEq-kER-;b

diff --git target/classes/de/framedev/frameapi/managers/SchedulerManager$4.class target/classes/de/framedev/frameapi/managers/SchedulerManager$4.class
new file mode 100644
index 0000000000000000000000000000000000000000..bf020ef7ce08d1304094f4dff0b3cf4a0ea44c14
GIT binary patch
literal 830
zc$}3|O;6iE5PeHR+!zDFEnh9)2~t8Oj0!!0I6w<RN;vR!-`GpC#95=Y&Hv&+TXEnA
z^hZ@4uLDR(9O9K{XU6Zn89n*$zsDy4J6JDc6mvF8n78p6U$U@ZVbQ`8Ln-OXxVFWx
z)eMApt$AMr;x144t@Qd_@s7~3ckXvZkcL9H^3E=C_oR}^KErl>SaRcvp?DYtf?={L
zl{iiNZJ{rCJEV@=jC>wmaV@iY&@5()GB_tn34IvyI2KfX8**@MhxRV$R8g#FOW5a8
zs(o=Jvl-KG;hQ)7j?;=il^;g2RGpScx=~<Z*})222Npg!D8sd|>R=632Q|24=CE5a
zR3qK-+G(#R6EA-L?j4xMS*ld-!sc+o3=?s}^@{*Gw)BpIR9=e$!&pZoCyHpwr-5tr
z#(NeI7-Z-ejrDt%w*gNC`7%ns8o(-*%pS@{=q<wr0V&(3I_uaQUmw6Weq-d`U>u4i
z!T>)oPH`qjVFDGvWSJVHGX-~`_1)Bf^#_GtD835WhI~YV$41P_VFR%OJ{sgFOw(PY
NQL~sdEJn+l=RX98%*+4)

diff --git target/classes/de/framedev/frameapi/interfaces/Constructors.class target/classes/de/framedev/frameapi/interfaces/Constructors.class
new file mode 100644
index 0000000000000000000000000000000000000000..8aea890c70106165f21a2c9da318a3762fe1a3ba
GIT binary patch
literal 1404
zc$}S7ZBG+H5PlZ0N6&)-1r$X@MdVFRRD7eNh@ePO5>#URbhJxZEO+GYis|q0mzeut
z;wAn7f0XgrJEO$3*w~~y&&)nEJG(PC-+z4l2H-Z<4csvya5sx{xM$$LiH=lxU|_+7
zktziP4^5b<vS{FuiLO+6Y+%VmPpUjIuxuiqDo+ipm>5izRlPhj@Z7+fKt{UKuha!5
zie+i<`p$tY%cB%HhsxIflwz+WVnHC68l-afqza|WoLh9>R^eWX-nc3Z7^|Hefsy9^
zOPgz?Ssy*WT0U@Gry_lUna2EI`+>c!*&C^*5BZ=%f$_#p+zae=6&|C@lGl`;oa4E&
zZg1#S(+?%1k2a=rFR(Xda@USSryd9l6!)DY$F7B{YA^Y|Q!lC@<aTyTRa_^m`BGrA
z5vPzEtBzZ-w?bdJm4!upe$}fAO#RDa%?+i#pLXdil&XpqSfuyF<Xfh;?3H<JuBcr3
zvUac|{nyS;l@@c$tNA6ls<hI(?72bc*Gi%12eUdfpQ*LVTX=yv3&Xe|F#li8VqpXq
z1%^-R6bqxc#J6a@J1ktr6@jr<TEoH^t~TTT)fX1VagB|Aa#L8Cz@$LFLFp_^VcNnh
zrrGWdqbL^C-*rkdu#eY8pyyA~U+wJ661y`~NXnfN{Pxdt++;DNYe6)mpEZ$ux<v9p
z63NRZk{3xNQ%xlE;+UEtZo_rzv&VFss1r9ZM|qQ$PqgXZ`xxTg7qmrakI_MNDncfP
zLDU%`8^a_z9l?sxMbsT37o&%$H$q>GJW+pyff$2CXCj>ajfOrmyudB4<GdEo&Ec3s
dKL_CmdYN<|6Un1M%PI!2$uTH6ZFREqKLJUVcK`qY

diff --git target/classes/de/framedev/frameapi/interfaces/EnergyListenerInterface.class target/classes/de/framedev/frameapi/interfaces/EnergyListenerInterface.class
new file mode 100644
index 0000000000000000000000000000000000000000..5d9580c5e0c9ec8c0907207846e7b3cdbf0b6926
GIT binary patch
literal 301
zc${^R!D_-l5QhJ;YFcyg0r~)XaW0k~auXB;!GfUYO)`cx+l_2CLSC(hK0qI;n6(tz
zgL9bq`DXtAFkjyvp8)2FBRoYI5guG)2``gP<qA%lvecf%dhJ_&GpZGr{N1Fc%1T~@
zo=o?IxH;#_%b{{6C-A?N8%*x!2LEVRH7=8tHbQt_T5(0Y(Y2ROt*sY#RGG|9>Y@m*
zx$x1ccgf}QBh*>5{=KUCj-4<L0c?~lc$=Oi^FsomhfuwK_XG5SZVoW)2q6j_k5{z-
BS>FHv

diff --git target/classes/de/framedev/frameapi/managers/ChatManager.class target/classes/de/framedev/frameapi/managers/ChatManager.class
new file mode 100644
index 0000000000000000000000000000000000000000..ded63ff868752fa6bc36f72164770149c3dbdc14
GIT binary patch
literal 3866
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
I82;7#AGaL4DgXcg

diff --git target/classes/de/framedev/frameapi/managers/CustomConfig.class target/classes/de/framedev/frameapi/managers/CustomConfig.class
new file mode 100644
index 0000000000000000000000000000000000000000..0093a2d0eabee4a09eab2c554ce0f2dc241812f4
GIT binary patch
literal 2828
zc$|$^SyLNF5dH>at+XD4IfQdMwiDYzVAe;BaeQIGIC2CyKroPVkXB+r+ErF7jB`28
zeLUqge;}`+3Ir8b<p<=~<ULiX^o$l+5>fz4t=*aKufIN~M}PhM$DaUR$Im)WAs)s_
z+>_!hDH0kcbWCDOiu)Sg))7Knis=w$<oB$OLwHAuIVm1UF)y_jG%V`ql-lp&Jq_<`
z_&~>p_(;AB9g*_Wk`zfPQaVhe<x@t-GA#MDqG44-Rzr><l(w?wq{x{Jorx8(CXB4G
zGscYPT6X3dLqP5`w3YWP#~7z~T5nCJGYl6Jj+-%-imR)ZXCxgvZDoqC@GQqRq@7Y8
ztzIU};C0KkyqgS>=w64tbL4W=Ns-I;gk_tP#oUtV&Wfe1BIqPVc22mKeD@av-m+C-
z=uf0fBkfWkDRZs-Ao7-x6Sl~hZowEW7Ca|c=0YTR(lv$WbE9aY(lH~rNEN3$>q#^3
zvpzE8iR9{p$Sb!RYzDm`)+z{*N`m53&+Mo`1YR&bhO-T#ty-B{S}~JeIsUxxmMKq;
zTB@y!uf`D0m|hu$;Y_1MHY#S2jN*0^GSwEOWK!CEKVwc&rFuU<Wj)y(85!|@>XlgZ
z8K>wb&2iOf9o3Z@klGwET;w=|vm8<Ma=eDqRKe<o)ZlRB@iB)BYKCL=en*N{Hf6dT
z9*UIUfk(M4#~L0==yi@q_=MwA6gWPUPoLup2IK!bdqL!~HJz>DF~^s9!qC;A6Bq`Y
z;>GPXk+o7aXca^1G>)%i{9oe<#~ZlDaSOv7xABdJZ#llh_Z*}6LBo&o<tL6i7-xtb
z{5UWituG40<%aea^@W=jNwXFqzPr2|eC_dJINpSfWg8PD7!Iq>EO^3}Ag7|e&5pBg
zAy1_2OyP-fN0yd?i1yYGsi4T`O*_SK?m#ER?-DW$dCu<P>W(%%O0Pz1oi!e1L37<I
zcm*|J7R!|H3)i&0a<2z-t0~K+Z7xU2v{_K+fT5=W-9?GFPgCw0x76!dM^FMf>gY<a
z_B;W5YOc+?s(1lOqsd^76Ud$c!Jtv^7R{-&Bpq)&LK?!2)pXtNgo#AQ8VnS=GEdSi
zN=Zj6U8;2aA^&I~sBfAHBtx_xLm$b0dYeZJ{R7>xZLk>ILW>lwvA!(?HfX&C=ScR@
zwJPlcgcv5gHbUwmlmWG;>|x-%^3tvR(j|clxafQN8$qSD9(#&I3p)swpgl!sVH@Gt
zCIThsorg)3z_)Qka@a&m32nckul&?r!qEq0*4U=Cgbo7kq^&N=eN%nNtot{F5`85c
z+aT{LI5hMk{&x>$NJbWePI7=UWDwu;xK46`evYItNP1UE^9l+W!b6%UyU`XX50^-X
z$%y>8FVjay>pxhS*Dx5My(^XIe}Sf=A5zQ?kb%W5$^JQ?{qq~jlR<b9pLMw&w`gsI
zR)>krZSpr-VR%U~98z{eRSb!TtKq7oM+4HQmmpBtF1n=G*I&X5&kC<A;^S2Gy9)e7
zS+i1Xof39hxzTY0H%Xhxsp})(@S7{FkV|;+_X==O8QrVupl}5=?1M6jYQ%>c_Mx~B
w_0kSru1A}!LgN)QUO^khSQE74J9woYZF(Oxx;>hNd7>U_Zl5skD*ZSA14-eKU;qFB

diff --git target/classes/de/framedev/frameapi/listeners/energy/CapacitorListener$1$1.class target/classes/de/framedev/frameapi/listeners/energy/CapacitorListener$1$1.class
new file mode 100644
index 0000000000000000000000000000000000000000..309163904925c7285ee5976327a5daf2039a3c7a
GIT binary patch
literal 1041
zc$}qE+iuf95Ix(3xN)5jLR+qdUIHX8bg9G(D&&DE6_o;rwkppXdr6i!>&ll%`7EST
z1P^=wABC8;!%av?w6;8Z=IqRw@m{`u`}_sKBRnX>!gU+-xKW0Un>JQ(YXP^hYSYA;
zg>?%X45ehK;>Nax27|MwwTwD}h+`Qu?DTxe-$r6AeL2a2I95DRaUv-$=Ee@Dyd#c<
zr;;%0&1M?gJ0$!>X_d4Y+Rbz5w2l~xozRyI7kf&}m+81KqeIaTh^hBNPXtFIQpTT=
zMe{=pPtRU7YrhbsnrzcFU>}5O<jGxS^q2q2*m@@>g8J)fF9>6$2QOqY41EWSSaMK?
z<Dg>D9o)5W&p{I{3$BArL*B;{t@Js1W!MO#0q>`ykxF>%4W*w3GUCrNVn5Y7Uzf*c
zuE9{Ah@c@SQYQ=#d%u;-IIgrA!f49(exOdEyiwOUw3b`{m%&gO$mGp1%qZzItTkJI
zRMm+}ru=z27P^~ZDzfs=0EVjB9Qm^x9Z*kbPX<_}>o8AOhSh3jvk1-6S3woDr-a(%
z8^(4wKY+O(G50=;sgW&F4Dbq<$S&tmsN*t_A*06VrE@UT+Rc1m(LDh>LE#j|Pq@I~
uo}%<iwTc4S*OakOS_hfBljqIU3slWSU%^!xi&X0x76{devynemK70q=3=eJq

diff --git target/classes/de/framedev/frameapi/managers/InventoryManager.class target/classes/de/framedev/frameapi/managers/InventoryManager.class
new file mode 100644
index 0000000000000000000000000000000000000000..562ad3d0d0853e79a714c9ebcc491b32e1558a53
GIT binary patch
literal 3527
zc$}S9TUQfT6#mWxm@pXx5tIVOAXq~v#G<v<s0aZy8qgXFwYIfGGKPULlV&Dd?8RQ}
z^=H@zU;5B?Rg}6`ANta@`qKZ?wR+j-%n$-eKzTX0*_UsBd!K#g&wqdY4Zul!r=Syw
zdURld50eV6;d%gX;0E6&6&j{wyvdKJWy~m0knrOzKHpT}$J=~$D}Z<KZUFD$b^z}~
z<EvR2sd}WLD`>$TKQert<AcFv=4C9%$THL$=8|qYR(_Qsn6UDh$ZTO@!EhqQ^GJMS
z6=i5B9^1xUoq@$m&rEHR&YBbR+L9K@YGx*qbn=FoA;r40hG{tG8GNC>X@;7Zl_t@~
zgkkEFg~eGtKc&rPg|d~>veR1L;Ct_|#+fs0hU1B}9=VezCux1jU1&KYvZ$F_M$g-u
zKquT2ax2@qlN3l#gyMbAuV3Sa$<0iP;KoAb(e1^qOI7V`!N{f=hC+L=A?YhTXPa;)
z3)$>-%P<{1KfaREbB<w|JZDKqOD#-jIl(4XlN(Rm(H9w#p(;tIuR<@nC)x~QyjnpO
zZ8P|DmThpL3~GizZC2wE;$+u)RP8M~H>yQbRM|r?O{KWpdY~eXZ~NdTw1q%dsD9a=
zvzAGeA+ZG^sT$5|<a$<HC0BdER+kg14DHp;63G{hY?fCCU08!|T_Km&9KD1$C21A%
zDV@Y9hSu$V26;p(deE!lFoG(&aYV+V3KN!$oQe;SSMegcRGb4{@vfaqQiTnN;m~%T
zM)_UfvGn}@Ff~OtK3D`2jA>@jw47ipuM_fgH-RW%NyRcoRjgoC#;S_D_)x}2Do){J
z8K0=Qhfh^}hR+%Lb|IDu((^9k3l;bAB@g#2qKh1Tjc-&O$G0lt=w%puz9dnZYzBI5
zc3w|W?E6cSH7X|R#8gd5J-@_NTDR7|dmP=Ww;|h@5}cG|^VV*+;IhR-jm9grvR$tn
zulkr}+E!Li>ZV9o|5msuYmw+kM?9&RyLE+m&1$(Etr-R?_R=b4L5d1_p3rTZXr-EV
zEcZLZv1jzn5U^=cG|^hgKRr%eJ9EI$8;bAN*|?pyYFCnavPBe>SiJZQjcaFtX+vM;
zohGx<*?ahdw`>1BP$DrwWkl~Tb%_I`iILdV+sUbs_~iK5?MsP~WRmzwR1hW`ZJ~-E
zI0gHtKaUwU?^5pjIlPzmbMtyecX}6!VNrwXp#Lhs2Z{G3T1mWfiJ6)g%_<mgXfz(B
zU4&*vb8YxB*iS<2B^v9*p@L(c0tq05KAIWA==YR|Nm`;=4tG3)6#lWOu889%Qra&}
z9CXDz6MXeDVd9<#Fj!`+{}Fs;##+hP!79cg6c{&l9ItrB9*{Jb8V^4~4Qr|o{{m@_
z2H!erYw!qlVcOKKL7sVtBZ()de+uR1V+5MjH8k|EVINIvXk15=1cJf|=qAqm#4Cr?
zP6UCNZX>R{iQiu0`Y5p-qo_6@^8FA_2;FfH>`4JvO3Qe)i$0vfYaZTfWY|Y@1Bcbw
zzmEMrlu^)&010#ZL07m)K?6?Xb>XQ2XXvX$>nP5a<(Q0b8g+BrS24%*npH|mT^XhU
zQW~t17G8hc^Dr({KqCFH4arbNBqJEDpzPZo#;J<RF^qZ2<6amI{hWk#G)tH%3+4<F
z94!f^l;Ck(6#g$2YwUY+#M5xWE3dP@bDbRzFeFmAjsp_@z+tg@ik6!{qxCTkHXm9;
z+ZtXF3BE6}hyVR0P?VO{FqPQ_G*aZ96#HpfpC{iNX;-L-E{hbCXAhsBq}&U|3oHQN
sKTsGO_?rMSdb&3_;91~meyXo_R$gCM$o<ul@cqT`{l)OF2%W3{1NDhriU0rr

diff --git target/classes/de/framedev/frameapi/api/API$2.class target/classes/de/framedev/frameapi/api/API$2.class
new file mode 100644
index 0000000000000000000000000000000000000000..e6116e3d9038597aefa8ee7470c7bb865aca1617
GIT binary patch
literal 1129
zc$|GyTT|0O6#h0TgoXeG5fu?Zs`P>c5flVbKtPyM9bxK>Z)v->OGARW0RO@lU-S?7
z?2MxI!SUH=e~sg)CuymmGfigqTypk&-|orTZ@)f&0WgJ!QFI`#q7zqDT*GKP5=gcq
zg>*2DDY&lU3dU9Fm}o)xjK<ob;D&-p1veR5y|QrQ6AXiyBG;cg#x5`N{hDIz2|XB#
zkJslYa$Z=%TVNPYG!ISY7$VDdku!8<gvGP|Zk{{aM&2Y(PsT17X3lU#VAq|IfCPiK
zZdu$}HVxP1WDYfjiBA$I+3_u!69Ht)f$f;Z5Wy+wdB0K-p8hoOQDDcGXA~-%#$Jf1
zV2VNAvVEt(S4F^}jWUk!82bisUa<<M?Fy^3$-S~&R4}dK7Wy@GA*P`l{R(btn8B=q
zI~wLNPw6z=#e#-=xX%##7hl67mJ}>&cz_iRt5~DsZoW5$krP?mLYWtRlRNrS=y>8=
zR{b~w&bsdjQ(yPEV|cd1FwiVFgOatgqEz-6x=&!#GBZR=+zVM#1$q+6%wK?va6LN8
z&eI+`JJCSyJGJ1L5iL^6hMVPwURbPWRB<abdXM8x!z$^I@;kf`Kxo8ajc9L+LWO9=
z6aSa=<hqP)l^Vnv9@>gYB4?OB4`DZmhReNeu^aqyiH&3qL)1Q<)D$ch3#v<+M57x$
zU^qkC0@;B_O{G78r9MJ>7sm9`+)6Q!Uf?Y0eYGf(=ffsb!)%P+3+S)sdWi^RlCz&6
zR}o>zq^oFQc#R|}tqfnGY^L6WjUA!w2+>}suiii%i&mk@c>DW%04;~meV}HRTntDa
z#w8!q(g9|q!v>WBg1ty{Kx(#5>JkkN@=rt+45ok3HyM}1%?x3fWP~n?5u6LjQ@_+M
Fi$9Ql|Jwin

diff --git target/classes/de/framedev/frameapi/listeners/SleepListener$1.class target/classes/de/framedev/frameapi/listeners/SleepListener$1.class
new file mode 100644
index 0000000000000000000000000000000000000000..0eb0898d2286309e9e00e4a59875cff352bf44e9
GIT binary patch
literal 1116
zc$}3~U2oGc6g_UbWlaMuW3Vy?3|63DYq~L>Ks>A}5~v`=rt*fAHl{U8ohl!d_Op-}
zXgu%(_)&;!rvi$^LlWiMKG)~?`d&Lfet!E7;1G`sDB!j-cPv=gv2Yjnir7VU1?h88
z#C<$4@z6w#p)hy-DxY&1Gwk()aO@0|(^C;U8gpj8d&WcOjc$&(*OM_1d&>2MVKttJ
zsM=v@_dV`>2;C|7_&n{nGvW9min-)r<Q)5)&-#m@Vm=j8#LpPs*RoMFMOYs&<hy~#
z8A^R2`Riml<l%`s^a)w-2P4-XxS>$v1(;VmVz6IGTCD54QN(H3$rNLCpEhWOi6mQ7
zAy~&j5{~$Dp_g5n+y3azU5c(JM}80qIex|CN#L2N+i0L^;}S00D8jZ;Ld8VO#va-x
z92*_%n>euX2!~XFYymRt{*}jQG~r(2QxcCf@HUY$O-Cz>EQ1+HjZnsFnG4m-K%iqg
z=5gv^*sj%=R+F)a&lWT)Mdg1!hBZ=o7lgjYu(2$nQ6iWB#b}oik59x@otE0m`T#q0
z*DShMxpG-m3ZRzCrV#o{D1+e&^|~}R6w+v(gEd;`$Thyg_@pPUlU=2Wz$UJey}lrC
zP!GDNBpJP%sQeZ*G~-(1Gjd;$zrYIZ1FIKUGw?^&(o$RGxv8b?l(djGa6`}BA}^4~
OHg1tmu_(#u591dhBOvtv

diff --git target/classes/de/framedev/frameapi/api/SaveInventory.class target/classes/de/framedev/frameapi/api/SaveInventory.class
new file mode 100644
index 0000000000000000000000000000000000000000..74a74152b9f27f42b817f3cd20a73de3e2d1adf5
GIT binary patch
literal 7066
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

diff --git target/classes/de/framedev/frameapi/pets/Pets$1.class target/classes/de/framedev/frameapi/pets/Pets$1.class
new file mode 100644
index 0000000000000000000000000000000000000000..11abed6a5ed604b67230d3ff98281c36b8b38060
GIT binary patch
literal 1424
zc$|e)T~pIQ6g}G(LfdGee2StKDz*g)2!29QsUT<zj4&`hZrimDgrt+CFg*BseAW@2
z`rtS|`lB50CUpSIM>D;<d-v=;=ia-szyEyy0bmA&Fs|Z`G@}v3a5st+($ZwY7{QpF
zjYn_~6AH8_!kCO=3imrOEq7)VJW%kEA+pbnWX<4*!e$uETXsb&)^~SxR}-eIyNBAk
zw>Qhs?pAdtImwX7mxcD;=6j+n_WcR3=~_*=j<!xlV&`;Icjp<hsms9UQ>M2VLOH7}
z7-D(d6sz^UqOdo4(I8JeZ<V;Q#cf@#o6eAw$e^y6rm%AccN{^>;Y%bWr$}+ouA5|2
zlC<r>vW>FGajb1y`Un`=u<CY6Ea{RkEYDBu@O@4i7tNAkIl5UX2)AmL6+BY$7*ABh
z(XFBrT`GDoq~NKFS<I=(VqV2FJXi4o3kq^7USg49ptT^2-k@R$uM{k+Six(Cu3sPd
zJFA|k2sgnK3%p2xH^@_eE=!kT<OGLPs)};m5Vp49Io{Sy(=X@Eivv;m#7)Gytny^)
z{7&X&g*1bk6>Y(?48cvWxo2d$-n@w&6nWe4LQg7vRv)5-kaxh<Eoxl<Y0$q7*;taw
z(Ctg8ySkw*bEjJ1HQG}s#ww-dlN^iOaBXTM0lHdFQNW4}IGQ?vUn}m2k~^Djb@?2d
zhc)6zoYr`%w-Q0%&i@moJe?XpFntumTI$R+FOGXYt*oOX%yL0E4zG~L-c)ND(pyN-
zD-)wvC(zj`FET(Q-D>Hfe-C=W&_}Zzt%EeiGGj+zneih8GT#vV<N^E1wi6JjV1R6&
zcQ}S?xDI$T8IsX=14GS#9}x0T*~}LN8VE7u$NXs<!)LVnbA{n6I({PDK!l-zXb{_S
zC$2VdC4gi4IE4drM6g4T;V$N2oRE@jN{L_^H*t$31SxZQ_BMuT4AHxq#Gr>@R1xp@
E7u_jrlmGw#

diff --git target/classes/de/framedev/frameapi/interfaces/EnergyInterface.class target/classes/de/framedev/frameapi/interfaces/EnergyInterface.class
new file mode 100644
index 0000000000000000000000000000000000000000..e319f472a39907463985504bcf5095d2f27b71e3
GIT binary patch
literal 345
zc$|HYO-sW-5Qg8WZDVTvIC#~wy*L+do)rQ@3xfA)b`rKtHnQCY^4C201N>3q);0(t
z&SBmecpirN_<VZ@aEJ2*rwPsosTlL%)R!IM`sS(eB`>$@wGBKkipn}&RMM%x&t@-#
zsn@z`wdd1PLqA{r<Ib|kZhqJkF|~Dno9coM9rtEDI(crkKG#QEDdBQ&WiF^MB-h)O
zv_fE`TzIL~XuBWe)w1oW4gb;z7dw$FaV5`}E6u~0Kp0?Gqaoo4Lm=kpkYgm@d3@MY
MOd=V7iG6_S7yFJ~Qvd(}

diff --git target/classes/de/framedev/frameapi/listeners/SleepListener.class target/classes/de/framedev/frameapi/listeners/SleepListener.class
new file mode 100644
index 0000000000000000000000000000000000000000..e8046f9939b7b27624c7f0739f68bc4d9c37e337
GIT binary patch
literal 1522
zc$}3~-A)rh6#fP%3+*C50)nE*kJ?gTK@ij;3Kaw_NGyTqg~`wkW$1Rc+1-+G?<06)
zd<t(sH1Pp^8ec%;*=ZwG@S=Nh&dfLGJAXT8e*FIW9l$hRhS84UFz(=PAnr9G8b%Bw
zVZ<>S!5GFPurLvV{w97Im<%I=`xO8`gWZ&YX#)=o%rKa%N(nb<bI%hVL*txO(w}Fj
zkH)qc8j?;{Ftnzm5*ww$u5h>bu1!cs%E@qho4YdDSHK2;Uy_gUR90AfE-#3zI4m!C
zQChb2d_l21D{Tu=OjWiC2E$PrVwi}g95-j}mhyS&TjEeC-zwVtNVwLfR*NFLq<rBn
z1xJY>#gMjQ7^{iN(319fCcn;$mE?P0my|CHVq1EWfCZ%-pZn5LR8jv$-`dRzS6N$^
z5KcQKHzSs%ZcbH!;|KhZo9INBfmss|@yNtu5T`kvm&Fa4+xHF3nRtSE15Zsn!-9cD
z6G=Qbuw-HxFQ})rv~+kf2)ANl6>AKmwNM$_f^;pLtDN;}_dsN*wY?XrKQq5|srLex
z%33GE5XlLDRe3&F8EVa7G<Nyz_{#_yLzJYW_GFG>iU{YzXEa=L^`Ei!sNGi3^W=G$
zJXkeS=m%2FMaQuPr%hKhb=HNn?@E<R#NIN*Yq(<NGRg-Gebr^qx%7`JG|IQ<e`gF$
z<YmWk?JPrQwG)jJx$R$!CW=T~beZ)W(;avht!*Z2o<h?tsV(m1Q``@dp0AqYqFu_-
z-`&(Iu~t=tm)RHD5)F~HsDZ#q0t0BHcaA2Bo~%03G(04`X=jmUq(dVoV4wBzHIj`Q
zY)21CvuuD~Tqn(N1ASx_kl&+$R>15R)E%R~qv05#kBG;Q(Rd1j;S^0ltmY4&(ESaO
zHzV;Am}J|DmSeQ;1mWs+xNZawY8S51YKV|g3NeFz9lpC9q7pt>-NY?QqhGVx3~pEQ
T9njeiYB_|fq{D<p$`AD);UJ)y

diff --git target/classes/de/framedev/frameapi/pets/Pets.class target/classes/de/framedev/frameapi/pets/Pets.class
new file mode 100644
index 0000000000000000000000000000000000000000..1555beca0863c9658326456cba59bee6de47cb21
GIT binary patch
literal 4991
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
bpyHgwS1hm%6tQIq$}%0m8qIR%X88XAgyal|

diff --git target/classes/de/framedev/frameapi/listeners/money/GetMoneyInTime$1.class target/classes/de/framedev/frameapi/listeners/money/GetMoneyInTime$1.class
new file mode 100644
index 0000000000000000000000000000000000000000..8d9b08e0b234b7c744b3004bf235bdca9974f871
GIT binary patch
literal 3158
zc$}S9=~ok16#oq%Ly}Pf;#$$PMw(zSTD8{F+DZtT8bS(@x>V_7@<K)?GjSG_?)$#)
zcK^m_dny$_^g}=P^#AEOJv}|WZzddq2971?%v<ie+xy*n-_0NY-uex|A^a4;c04SG
z{vhtbBSAchW1Vy~7(yCDL7c$JHe`Z$0;k%L74vW#azTtBFNP<@FdD)b3IUwPco0wF
zjM$zH;2h42)zdOAi1}h0CW6?EXJjxLlM(_mOpjJfgU?Ek1|_sQWzCN6mvA^+<jIo7
zD!j;N`~|CONnNuYZg9&^dP2z)+!+>&j8V`kyq^?2q8XZVOv2IFnluc?$0f9+%p#Z2
zp4AMVb1ReFDzHhND4khTW%@X?G_kJ{TZGRNl#D@YQ#!M4PTM1EF&{lZS7^3egT|Qf
zMA2DgvdE%D5~%Eq4Q5SiDmm#+Pisz+8;<78Ci6O*<yODomn+=1*_7w%B{sv7Iy0t{
zV~(X6Q>0p=gGk*$&eiq2sTmHp(pObpbu`l;wsp0L$f|2uWJJRDmCZ_6KjtuXdYDx`
zKq%A_f@7v@seDKi0Bu};$$i2;p_?{T-L%QEVeXX8q6}3*5pe}Ou}i@YbSsD;E`uv5
zVM;=Hz%(7(u~^j?u-jWv4nw2qQW(<;bW~&*3QSaGSPC4tWG2sMb(0nMk+ja4A!A0t
z6<j537f%ZOs-s{Q&(e+0dyZa^@tlI^@q&UE@sb!`mhp;$SMi#R*A={hH)Xt~;BCC4
z;9a~Y<9!7m;6nu;;bRKZ>If_N1fNRi`+ZI=l)1$tSC}1PkqV^-o8}SCh?EFzZHAzU
zP-;cIXejs$ajJ_oWtD{8b@8*+GB3J1w~_-MVbnDYKa~%zLA!(vQ#FECBXram^G#6n
zh-t*osiOS6p%U2|i~G6gI+~tLnYzwZF9U=49A8M-6st?sk;zMRN=Y81hw4iS-Lcgx
zp_QouZp!!AV7-}=Yj{S;o?*KcFM+!nc|plQVMsHzEOe}@AwDkSD+%$2=!x%mJ`+t@
zoH?9iN*X1zvV0pLbQaeK36{F6sUF$2m}j#@6_pfam8vJx9g_c3gld#*){5dbtZVN@
z{G9KYzm?F_h^Nsr6TY2BSkgo9@{y9TG}ur`ws=)%Dy7e0y`5B<S!4XN%MF$HuS9RC
zaC0n`YIv}9rNogCvbj+lUVK9vf<n2KXc%a($V+qs+sh2ca#hC^dEU%blhAA25X9$~
zl~+RKUi5DGB($+&v9{c~tQJN}rKK|S8(N5>C|Z{v_$|v5Z1F$@u8vGExKWg_Bb_T`
z3TG$MXY%RMOgfiJPmGKXOyo1EQ>XJ@N4!mh)C4Gyvo-ldtf8$t#fFBw)~negRj>O|
z^0ik9a>wf~1&e@{@wI|$_)bAD_L6I>)tiL-mSU$FGv+i;X1!)g-Gfn>C^iILsIs(^
z@dLdZS<{?$$%Q}bgI`nNH=dKsDC*pf`keiD=EzEdh1n`!+o5lAb=mlxrzxiEW17SJ
zW&9{%&t2VTS^H|lM_qY4{Z9m%!eP;-0h+026Q!BH2<`=ePpcH|TWD_Y-FpL4Z|nw|
zdVfXpbs>t~G`12WNLiG|%|s(s?7{tjw-PGpFAHLb*AzZZ3WY@HO|<m>f~H$o2P~kq
z2}?SIo}O-W;Gm~h@g;n{;h@MIUz@anq=kFNO~{>X^9WqS1+fgyBb4jwRC;b={X910
z`ocXOn43p?F44Dua1(w;N1|sQor%N(HcGVZQj`U3T8BAAb41%BQIdudom)NbzIkk$
zLugUxI#~}PgDl;++4J}q-4%4#5P8)_lwIU^oc!I79y~-|XV6F7F$@!RoczCt1SW~b
zkwgU#c(?4On{?qYo%E5`VQj)aIu+qCNKdzisDT5--9)$uJX-!jR>q-!&_UzhXq8FB
sVGqRzafId;vVD|15b<fI&;OmkW!MPd8+?y%u?>&a5EhX+jsc|p1B(80i2wiq

diff --git target/classes/de/framedev/frameapi/listeners/energy/CapacitorListener$3.class target/classes/de/framedev/frameapi/listeners/energy/CapacitorListener$3.class
new file mode 100644
index 0000000000000000000000000000000000000000..f8671a718ef4ea0dfe1187ea6b1a5ba3a779aa59
GIT binary patch
literal 1377
zc$}S7ZBG+H5Pp_cj<$!bya@sdQs7#UMG+9eHyTV#iWpHy{I<PY%hBVmxtAvWDgF!-
zz~~2mfIrGOd%YM5l8~n9?9A-WGtbP<-ml+3egb%mml<R+rNnd=Io!|SE@rYQVm6C8
z%;#XBq(nJO8w(m1H9TO*w1iWXE$M~~M%DA{ycRVYcF1ENuQ{IC;M+>RbA%~(ly{S%
zH$1X~;xfZV)sp<PFHWQ-TOCC-ZSL4XC|&6XT*-QyS42~ocIf%lWJiH)*{&TvXRwT}
zQLan5bik0Vc$Q?yS8Z3mjZSLP{~&4(c?PPUDVzi0+saOyX;mVF{>G&|6-NYtBy+P{
zro|PiIORt!Nkg&e-w%b^*cHtrUv}S%d{e%*l`(QDe(6}W1d-oyO~(stx4tXGBhS*X
zq=REw$4%sQ=;+r`z?hDQc%)%Pr@>g&u%=@jPc&@kc#2IOTX?49IbP8HbzKg_%s;&k
z%p++<j`aC<?06r!Zl|vGE;BIX;;a1Fv_wca3)db`)m@D`9oi=pH(XVn<56fk{FU#E
zwn{*EG58-h-Hos;iZMDtj&SRIuXZd=LjA-rcRdF5tm-l(yRFKYFiIDg6R)t%JG;bV
z^r}6EK0DZR9h%m7W+;Cj!5(_PLllQDqQ+iA%SCa!l0)3MeCBE{r2|YseLH}jLP5<E
zKr0QF^3cD4TcFoMT7~Qst@-l88CZGo3_ay<NPUeD4wCGpgJ9DbB7Gzd&SMz2fml<J
zjDDjSO8_H+qX?{(Pr*)+E}!GZA?ZEm==~0j;R`0!)?Zg2L!zG}qw=QWyaPy6-Wlku
qh;cTHRW=`U&^zb}hdc3kwn}0=raXa3TGRApyhn6FU7!aUlf@tPj&1b-

diff --git target/classes/de/framedev/frameapi/managers/FileManager$CreateConfig.class target/classes/de/framedev/frameapi/managers/FileManager$CreateConfig.class
new file mode 100644
index 0000000000000000000000000000000000000000..391c15eff96269fa8a05f61141dde62a0644dc6f
GIT binary patch
literal 5629
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
LSm|#^3kv@aR|n9#

diff --git target/classes/de/framedev/frameapi/cmds/ChunkloaderCMD.class target/classes/de/framedev/frameapi/cmds/ChunkloaderCMD.class
new file mode 100644
index 0000000000000000000000000000000000000000..84db99be9a33ac96d8b43dba7d972f9f1c33be0d
GIT binary patch
literal 5374
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

diff --git target/classes/de/framedev/frameapi/managers/MultiWorldManager.class target/classes/de/framedev/frameapi/managers/MultiWorldManager.class
new file mode 100644
index 0000000000000000000000000000000000000000..decbe4832d9f7e53c304adfa6aaa831cc1335484
GIT binary patch
literal 5542
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

diff --git target/classes/de/framedev/frameapi/api/SaveEnderChest.class target/classes/de/framedev/frameapi/api/SaveEnderChest.class
new file mode 100644
index 0000000000000000000000000000000000000000..3922c22fb2a0749193a5d0cdce7399771db9b605
GIT binary patch
literal 4112
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

diff --git target/classes/de/framedev/frameapi/api/API$SendMessageEvent.class target/classes/de/framedev/frameapi/api/API$SendMessageEvent.class
new file mode 100644
index 0000000000000000000000000000000000000000..9878b8ec87f6b4ed826cec480e85b79c41d7c676
GIT binary patch
literal 1667
zc$}3}YfsZq7=GGymv&_!HxU6rP`7cZ3SJ>ZLnM+6LxREhv14^qwhr5ZA)0972TlB-
zKLr#dYT^&@M;YI9dg#i48MEwM-}kw^@9FP9KYjt2!nB4o##Cq+XTyX>gTYo;+3H#v
z*D;yIl!g?>lDL_~EeWYL(<xOf*OM?%sJUgMxVgS=`-Zh;Ill2QxGdP7KP@4#Q8BkI
zS3>WRNXNJRZDWbwQB<;Od7fFeB(xWvn_H$)F`crp?7Oy8W*{@RWBaobjO^(s#}jia
z5|p`GiC|j`wqrfotQIZzv01EeqS~riSutIk?Zu(uui50PZP{{4i-DvE%#;Lu!Er2i
zu3~zgMG;1!WEsy~vuc&Btzcnp*arLGUs@Px%qI{1O{6oSnX=_aN+)43oBLOBHOg5$
ztXwC>pHMr^i^OzgPp(qBPEO|1UUWB<Z7zf5tCYVa8r|2RyP?&pR}W3itX4#4V_Aly
zE!Q^PRcqd6%}7xtCzxCv?a1lKpjAg3&gdAx1sytCbX>yaByQ`tgCSyWrZb7V62||l
zYZAJTA&QHh(;V{Zg)pS486$?kK0hEvGx?#F%xv<RoYJg;o+>(M?4(_h&SNxp<_{p{
zNB1G;$MzA+e}nR5muGd+*o`=#RG}yiRHcTDvVjie1)T$fK|ao+7vL+#C-D_ylsVsd
z!8cEPnW+f*>MR+Cq`1W55sS~!yMyQuT@&ak`p_>h`#2k=enEVPW{IOE*s1c8Mry8z
zyvNl5?c^_!-$U#>k}}w0Csd&^M&%V+l-FE=9%Kjw^c7K!1GHJ;CBb~eb{i1hAg;WP
zcu0gE61*-F{Vs+cCiuSYL5_HM7tx^z6cxi55xJ8hH=h5Bc%zK>RL&0(fVg-T5_{<a
zzz6~MAUCpqJd%7^g)3o4k5oZ!r2j-!_<Twgf=;H8MNVK1^B5rg6RD>MP=%jpLv0Gl
QbCOY<6VF-04fH_$3$128lmGw#

diff --git target/classes/de/framedev/frameapi/listeners/JoinListener.class target/classes/de/framedev/frameapi/listeners/JoinListener.class
new file mode 100644
index 0000000000000000000000000000000000000000..0754b98dad399455870b9817facb7344e80ecd1c
GIT binary patch
literal 4384
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
GRR0G&_rSCO

diff --git target/classes/de/framedev/frameapi/cmds/FrameAPICMDS.class target/classes/de/framedev/frameapi/cmds/FrameAPICMDS.class
new file mode 100644
index 0000000000000000000000000000000000000000..033668f102b2c00b908630c7f71761140b5a33e6
GIT binary patch
literal 23917
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
VJ|l;c#{D8kPNe6_^lSpp{{Z|dLzn;n

diff --git target/classes/de/framedev/frameapi/cmds/MoneyBankCMD$3.class target/classes/de/framedev/frameapi/cmds/MoneyBankCMD$3.class
new file mode 100644
index 0000000000000000000000000000000000000000..c17b86f7ad595dfa73059fcca0eb98db538bdce0
GIT binary patch
literal 3040
zc$}41TXPge6#hEdWG9;elI4~l;syfQY=8+jMS>{VO(2>LNH7YBIN9ml44It?bBV+o
zcvn;|-m36|Rle{*l~q)k08+&R4?g%e<RADZmgVW0B@AIVwLHw}KBv#M`|H#5=YPN7
z0<aYq8n6x-LHY#g7i5nhdt>OpKn%TjK86=CC`dMjA?y=mzl0ZKIDlaZ2V-~%BT>8@
zLlXuhyduU!f*h7`q!F*;sD#%9e@rm1OHd_@O2|pjByb6N2?Ysb5_Ad2V;G0gh$4<g
zVMbvw#3ogv-Bs-ZcNta;T6RGh^~T3_SK+3syHm=3L!IJw4?~^MJjuW^rTGMdBt|lJ
z7#1HHJg!cvilLeXW!SZKvp`1m?wIbhcQYghHLm1swa7I-8BEj(UC9+SN6A_ypXyc3
z@pLvLY<B9V?(Sl6sy3>ecc$`EnS?t>7$Rv);|z-ib(0Ty#Zhh_R7VYx#0RaMYK*A1
zF8Go#A_`=X2TYUOX+w1!PHd{m#M`$}y|uPy5>1NWQ7fM}DDa%K*cV7=&tk!_tLDbD
z>V%&~6m%4^Vau~~yk8etHHU+26lGFDeP+(E94a%*-7!mx;)Dzvjtm9eGLq<&kwTY@
z^<uUG8)a<54jC@IC?;jRfs-<(a59QFWxR#AWxRuT2?ApOJhebsoRV=G?-4q<d8}_J
ziuYxFfDaj#&)w%<Pd7AfGc3G)Sv_QViGt-OZeJdi@ew{2<P+La5~z9GDvE_DK9%tq
z&M>qHv1=u!sM>@mFtIzAvpmz4@j1@O_yS+j_Ltm_sgpc0%DI_vyj+euPTn&TuC1C*
zp4(g#o@wJs9(^X>;RrVDnCj8^u}oi(ZAN%?+(5fg=uTQ@z_kf(4>z=g>g5v}rvnQz
z9OdIyvB=FfI@OSiK09w21)J-+v5-4q>vL;^R2=g2K%uh*=-hVOqBtw#9M1a~NLGtF
zhBYB{Ik_>ec?P$YUSDv)GtB_qEtN3Hu&%mT3=Ni<rt(!&W5_4NsLlmqrL;WEO#(&F
zJQ_U@-`H}O_%I!+>YsOecQ^H({Z;po&hm=lD+;|pn=W8`HF^w9yEV<9_7jjr5QbIB
z$`?B$TEOB1yl74Gxn^Yp7FFF;vP1|x)WHW#$5qW79o*_<g;HiMsE7tKNn2)KFEDH&
zg9kQVh&@|%b<0%p)KnDFS<+!Kc~BnFB#0TD6G13h=J3kBB29B;B;qGL)o=z1re*Uq
z-4ceS<=hb#>eYz}F3`83s(7X5L}6DZGxIICRC-ycjZ>9FwBrm*l4UEBT<cyXjSeN3
zC9qNttxyD^qB#^SxTUlQ6lKn>+*r26ihx6c{zW?ISEa70NxT36jr0ik<N6X$Pk}$u
zGeMd)^lids5M*d}5VeTXm`HU^gQeC_qbAikjoMUe-83Sp*7|AGrLLj=s&BcKXgyhi
z+VnP}%Y1JMJc;dqKNB(N7XwdYM-ZXLLPTh>JE`AL^9Spofn7&baP-yAK)Nr91d@j9
zh|QoeF3(^=eBlfhUBraYzlo+p*U%h~&tP$&xg@?cm`84483WDZ%ZbdO<px@7AQtW!
ztq2)C7R+mAjaG(?F0-C+{KrLnmJG*V6>{~&-1vzK@!LX1tLMgF6ONCYv{qNU`8wJM
zOMBDx2wSy%zN))!U~QR_vG<{pv2DKW@B0a-E>KeIqog0rM9&ho&Y>0O36U4D3tz#(
z*SLaja0}n!Z+yqPaFK1p_bh`S*a&`PI(}l8aEV>T&+IS!at~#s^DBC=Q(%wXDdFuI
r`kE2Biz|0=>R;GV?D_{8O5j-^tj}RLjS>1qPva??#mIP_4^#XP<ibuP

diff --git target/classes/de/framedev/frameapi/listeners/JoinListener$1.class target/classes/de/framedev/frameapi/listeners/JoinListener$1.class
new file mode 100644
index 0000000000000000000000000000000000000000..d840127790366ee0d2a9bc773ff89b25ac12756f
GIT binary patch
literal 1646
zc$}40>rN9v7(GJ^Th`SU5WFFxRB20L0r3i=f}qqbcS-c$w4IiP?JU{ulJEpRj|m|0
zhY#RG8Nb;!p#(5Ao6hCTcRAl>rhoqa`VC+T>z#-rsfNco5_r;yM;O+TLRv=#BQa!k
zjAASXQ^z<a)Mhe<r#h)V)A1ZHG`!UCilKd<J4wNiwp_1b7J}Vf+c(9&kiNO+@B`tQ
ztKpP$ZMmS}X@(Ae+pZ<Y8Ah#=Fv}jVijvr`FZiBqI(E$$Qg}5}X<3b(Qk=1+?awlN
zO|_(XWp3#$hUmOoqJZL-EyZ$BEeLOu7aT&mEw{*>E$-QB-vFa376xNUlB0Qt*J^^c
zW-IiP6BJs+3nYyx#X#S11Ft9+ZRMb=S#)fN?{ng|Ad8M$vt=bO{B5_S;kAKj%oymw
zO#@x%HqeU!18*>^;jMvpc&}m3z&t)s$*Qgt2O1U(EaD@B=9bG21*_qcfhFV&e1^r)
zNx}G*Td}2vyn$t`XjoMOYgD+F!eba}DnPBcElPny*`Eu6^+3vcE=O9hO3mQP9Re7#
zsn+US<w|St;u5JtGfxB6WZ?f2RGW(M=Xh~f$Woq5UQx8nRQeLjuB^DFf_YYf+zell
zJ(Yy~)j@{-)Y&U1ecL~1s7zm$%ZoWsLlr&2eetCxyu4}-6-Kl5m3oIXtXrxJO^3^h
zx#4@%g<)R1PSH8nbp)pbY4kb-Vx`Q`m-?2r&PfnaJ=iNXTr+I6<h2P|DeQ=%e+jch
z6M8`HQzf#+!1E|)n|4*?ZO2h}m@Z$A;l`=3McHELN#&ZED{vZv^l~QXC2dP2)O7=B
zrn{#Q`t_m@47X@CPx}bX@yy5(SSEXfw#-jNeuRRzY3v|DAd5RR_JzuE+(kbSu9Qhe
z-+c@;41Py@sIitg1Up3Z811xbJ4Q#hc8u70v@>!7U7cM!e`cKE`U!4?r>B&<5v6gQ
o=uFZ#g;jd*6+NTwxIr(12cgCw9?~48|BoTuqm@ol@sK|L0kF2f3;+NC

diff --git target/classes/de/framedev/frameapi/mongodb/MongoManager.class target/classes/de/framedev/frameapi/mongodb/MongoManager.class
new file mode 100644
index 0000000000000000000000000000000000000000..522f30dfeac21f39556c292a85c0349a4aeb129a
GIT binary patch
literal 4019
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

diff --git target/classes/de/framedev/frameapi/listeners/money/MoneyBankSigns.class target/classes/de/framedev/frameapi/listeners/money/MoneyBankSigns.class
new file mode 100644
index 0000000000000000000000000000000000000000..c488602b264f626bfc887df4e648ead910b4d84d
GIT binary patch
literal 6676
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
F_z(2D0dD{R

diff --git target/maven-status/maven-compiler-plugin/compile/default-compile/createdFiles.lst target/maven-status/maven-compiler-plugin/compile/default-compile/createdFiles.lst
new file mode 100644
index 0000000000000000000000000000000000000000..e69de29bb2d1d6434b8b29ae775ad8c2e48c5391
GIT binary patch
literal 0
Hc$@<O00001

